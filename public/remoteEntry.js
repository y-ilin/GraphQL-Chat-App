var chat;(()=>{"use strict";var e,r,t,n,o,a,i,l,s,u,d,f,h,p,c,v,m,g={8428:(e,r,t)=>{var n={"./Chat":()=>Promise.all([t.e(706),t.e(950),t.e(87),t.e(471)]).then((()=>()=>t(2471)))},o=(e,r)=>(t.R=r,r=t.o(n,e)?n[e]():Promise.resolve().then((()=>{throw new Error('Module "'+e+'" does not exist in container.')})),t.R=void 0,r),a=(e,r)=>{if(t.S){var n=t.S.default,o="default";if(n&&n!==e)throw new Error("Container initialization failed as it has already been initialized with a different share scope");return t.S[o]=e,t.I(o,r)}};t.d(r,{get:()=>o,init:()=>a})}},b={};function y(e){var r=b[e];if(void 0!==r)return r.exports;var t=b[e]={id:e,loaded:!1,exports:{}};return g[e].call(t.exports,t,t.exports,y),t.loaded=!0,t.exports}y.m=g,y.c=b,y.n=e=>{var r=e&&e.__esModule?()=>e.default:()=>e;return y.d(r,{a:r}),r},y.d=(e,r)=>{for(var t in r)y.o(r,t)&&!y.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:r[t]})},y.f={},y.e=e=>Promise.all(Object.keys(y.f).reduce(((r,t)=>(y.f[t](e,r),r)),[])),y.u=e=>e+".bundle.js",y.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),y.hmd=e=>((e=Object.create(e)).children||(e.children=[]),Object.defineProperty(e,"exports",{enumerable:!0,set:()=>{throw new Error("ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: "+e.id)}}),e),y.o=(e,r)=>Object.prototype.hasOwnProperty.call(e,r),e={},r="wp5-starter-react:",y.l=(t,n,o,a)=>{if(e[t])e[t].push(n);else{var i,l;if(void 0!==o)for(var s=document.getElementsByTagName("script"),u=0;u<s.length;u++){var d=s[u];if(d.getAttribute("src")==t||d.getAttribute("data-webpack")==r+o){i=d;break}}i||(l=!0,(i=document.createElement("script")).charset="utf-8",i.timeout=120,y.nc&&i.setAttribute("nonce",y.nc),i.setAttribute("data-webpack",r+o),i.src=t),e[t]=[n];var f=(r,n)=>{i.onerror=i.onload=null,clearTimeout(h);var o=e[t];if(delete e[t],i.parentNode&&i.parentNode.removeChild(i),o&&o.forEach((e=>e(n))),r)return r(n)},h=setTimeout(f.bind(null,void 0,{type:"timeout",target:i}),12e4);i.onerror=f.bind(null,i.onerror),i.onload=f.bind(null,i.onload),l&&document.head.appendChild(i)}},y.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{y.S={};var e={},r={};y.I=(t,n)=>{n||(n=[]);var o=r[t];if(o||(o=r[t]={}),!(n.indexOf(o)>=0)){if(n.push(o),e[t])return e[t];y.o(y.S,t)||(y.S[t]={});var a=y.S[t],i="wp5-starter-react",l=(e,r,t,n)=>{var o=a[e]=a[e]||{},l=o[r];(!l||!l.loaded&&(!n!=!l.eager?n:i>l.from))&&(o[r]={get:t,from:i,eager:!!n})},s=[];switch(t){case"default":l("@apollo/client","3.3.19",(()=>Promise.all([y.e(706),y.e(829),y.e(950),y.e(410)]).then((()=>()=>y(6829))))),l("graphql","15.5.0",(()=>y.e(310).then((()=>()=>y(1310))))),l("react-dom","17.0.2",(()=>Promise.all([y.e(935),y.e(950)]).then((()=>()=>y(3935))))),l("react","17.0.2",(()=>y.e(294).then((()=>()=>y(7294))))),l("shards-react","1.0.3",(()=>Promise.all([y.e(624),y.e(950),y.e(181)]).then((()=>()=>y(1624))))),l("subscriptions-transport-ws","0.9.18",(()=>y.e(313).then((()=>()=>y(5313)))))}return e[t]=s.length?Promise.all(s).then((()=>e[t]=1)):1}}})(),y.p="/",t=e=>{var r=e=>e.split(".").map((e=>+e==e?+e:e)),t=/^([^-+]+)?(?:-([^+]+))?(?:\+(.+))?$/.exec(e),n=t[1]?r(t[1]):[];return t[2]&&(n.length++,n.push.apply(n,r(t[2]))),t[3]&&(n.push([]),n.push.apply(n,r(t[3]))),n},n=(e,r)=>{e=t(e),r=t(r);for(var n=0;;){if(n>=e.length)return n<r.length&&"u"!=(typeof r[n])[0];var o=e[n],a=(typeof o)[0];if(n>=r.length)return"u"==a;var i=r[n],l=(typeof i)[0];if(a!=l)return"o"==a&&"n"==l||"s"==l||"u"==a;if("o"!=a&&"u"!=a&&o!=i)return o<i;n++}},o=e=>{var r=e[0],t="";if(1===e.length)return"*";if(r+.5){t+=0==r?">=":-1==r?"<":1==r?"^":2==r?"~":r>0?"=":"!=";for(var n=1,a=1;a<e.length;a++)n--,t+="u"==(typeof(l=e[a]))[0]?"-":(n>0?".":"")+(n=2,l);return t}var i=[];for(a=1;a<e.length;a++){var l=e[a];i.push(0===l?"not("+s()+")":1===l?"("+s()+" || "+s()+")":2===l?i.pop()+" "+i.pop():o(l))}return s();function s(){return i.pop().replace(/^\((.+)\)$/,"$1")}},a=(e,r)=>{if(0 in e){r=t(r);var n=e[0],o=n<0;o&&(n=-n-1);for(var i=0,l=1,s=!0;;l++,i++){var u,d,f=l<e.length?(typeof e[l])[0]:"";if(i>=r.length||"o"==(d=(typeof(u=r[i]))[0]))return!s||("u"==f?l>n&&!o:""==f!=o);if("u"==d){if(!s||"u"!=f)return!1}else if(s)if(f==d)if(l<=n){if(u!=e[l])return!1}else{if(o?u>e[l]:u<e[l])return!1;u!=e[l]&&(s=!1)}else if("s"!=f&&"n"!=f){if(o||l<=n)return!1;s=!1,l--}else{if(l<=n||d<f!=o)return!1;s=!1}else"s"!=f&&"n"!=f&&(s=!1,l--)}}var h=[],p=h.pop.bind(h);for(i=1;i<e.length;i++){var c=e[i];h.push(1==c?p()|p():2==c?p()&p():c?a(c,r):!p())}return!!p()},i=(e,r)=>{var t=e[r];return Object.keys(t).reduce(((e,r)=>!e||!t[e].loaded&&n(e,r)?r:e),0)},l=(e,r,t)=>"Unsatisfied version "+r+" of shared singleton module "+e+" (required "+o(t)+")",s=(e,r,t,n)=>{var o=i(e,t);return a(n,o)||"undefined"!=typeof console&&console.warn&&console.warn(l(t,o,n)),d(e[t][o])},u=(e,r,t)=>{var o=e[r];return(r=Object.keys(o).reduce(((e,r)=>!a(t,r)||e&&!n(e,r)?e:r),0))&&o[r]},d=e=>(e.loaded=1,e.get()),h=(f=e=>function(r,t,n,o){var a=y.I(r);return a&&a.then?a.then(e.bind(e,r,y.S[r],t,n,o)):e(r,y.S[r],t,n,o)})(((e,r,t,n,o)=>r&&y.o(r,t)?s(r,0,t,n):o())),p=f(((e,r,t,n,o)=>{var a=r&&y.o(r,t)&&u(r,t,n);return a?d(a):o()})),c={},v={2950:()=>h("default","react",[1,17,0,2],(()=>y.e(294).then((()=>()=>y(7294))))),8410:()=>p("default","graphql",[1,15,5,0],(()=>y.e(310).then((()=>()=>y(1310))))),2181:()=>h("default","react-dom",[1,17,0,2],(()=>y.e(935).then((()=>()=>y(3935))))),3835:()=>p("default","subscriptions-transport-ws",[2,0,9,18],(()=>y.e(313).then((()=>()=>y(5313))))),5264:()=>p("default","@apollo/client",[1,3,3,19],(()=>Promise.all([y.e(829),y.e(410)]).then((()=>()=>y(6829))))),6620:()=>p("default","shards-react",[1,1,0,3],(()=>Promise.all([y.e(624),y.e(181)]).then((()=>()=>y(1624)))))},m={87:[3835,5264,6620],181:[2181],410:[8410],950:[2950]},y.f.consumes=(e,r)=>{y.o(m,e)&&m[e].forEach((e=>{if(y.o(c,e))return r.push(c[e]);var t=r=>{c[e]=0,y.m[e]=t=>{delete y.c[e],t.exports=r()}},n=r=>{delete c[e],y.m[e]=t=>{throw delete y.c[e],r}};try{var o=v[e]();o.then?r.push(c[e]=o.then(t).catch(n)):t(o)}catch(e){n(e)}}))},(()=>{var e={348:0};y.f.j=(r,t)=>{var n=y.o(e,r)?e[r]:void 0;if(0!==n)if(n)t.push(n[2]);else if(/^(181|410|87|950)$/.test(r))e[r]=0;else{var o=new Promise(((t,o)=>n=e[r]=[t,o]));t.push(n[2]=o);var a=y.p+y.u(r),i=new Error;y.l(a,(t=>{if(y.o(e,r)&&(0!==(n=e[r])&&(e[r]=void 0),n)){var o=t&&("load"===t.type?"missing":t.type),a=t&&t.target&&t.target.src;i.message="Loading chunk "+r+" failed.\n("+o+": "+a+")",i.name="ChunkLoadError",i.type=o,i.request=a,n[1](i)}}),"chunk-"+r,r)}};var r=(r,t)=>{var n,o,[a,i,l]=t,s=0;for(n in i)y.o(i,n)&&(y.m[n]=i[n]);for(l&&l(y),r&&r(t);s<a.length;s++)o=a[s],y.o(e,o)&&e[o]&&e[o][0](),e[a[s]]=0},t=self.webpackChunkwp5_starter_react=self.webpackChunkwp5_starter_react||[];t.forEach(r.bind(null,0)),t.push=r.bind(null,t.push.bind(t))})();var w=y(8428);chat=w})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93cDUtc3RhcnRlci1yZWFjdC93ZWJwYWNrL3J1bnRpbWUvbG9hZCBzY3JpcHQiLCJ3ZWJwYWNrOi8vd3A1LXN0YXJ0ZXItcmVhY3Qvd2VicGFjay9ydW50aW1lL2NvbnN1bWVzIiwid2VicGFjazovL3dwNS1zdGFydGVyLXJlYWN0L3dlYnBhY2svY29udGFpbmVyLWVudHJ5Iiwid2VicGFjazovL3dwNS1zdGFydGVyLXJlYWN0L3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL3dwNS1zdGFydGVyLXJlYWN0L3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL3dwNS1zdGFydGVyLXJlYWN0L3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly93cDUtc3RhcnRlci1yZWFjdC93ZWJwYWNrL3J1bnRpbWUvZW5zdXJlIGNodW5rIiwid2VicGFjazovL3dwNS1zdGFydGVyLXJlYWN0L3dlYnBhY2svcnVudGltZS9nZXQgamF2YXNjcmlwdCBjaHVuayBmaWxlbmFtZSIsIndlYnBhY2s6Ly93cDUtc3RhcnRlci1yZWFjdC93ZWJwYWNrL3J1bnRpbWUvZ2xvYmFsIiwid2VicGFjazovL3dwNS1zdGFydGVyLXJlYWN0L3dlYnBhY2svcnVudGltZS9oYXJtb255IG1vZHVsZSBkZWNvcmF0b3IiLCJ3ZWJwYWNrOi8vd3A1LXN0YXJ0ZXItcmVhY3Qvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly93cDUtc3RhcnRlci1yZWFjdC93ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovL3dwNS1zdGFydGVyLXJlYWN0L3dlYnBhY2svcnVudGltZS9zaGFyaW5nIiwid2VicGFjazovL3dwNS1zdGFydGVyLXJlYWN0L3dlYnBhY2svcnVudGltZS9wdWJsaWNQYXRoIiwid2VicGFjazovL3dwNS1zdGFydGVyLXJlYWN0L3dlYnBhY2svcnVudGltZS9qc29ucCBjaHVuayBsb2FkaW5nIiwid2VicGFjazovL3dwNS1zdGFydGVyLXJlYWN0L3dlYnBhY2svc3RhcnR1cCJdLCJuYW1lcyI6WyJpblByb2dyZXNzIiwiZGF0YVdlYnBhY2tQcmVmaXgiLCJwYXJzZVZlcnNpb24iLCJ2ZXJzaW9uTHQiLCJyYW5nZVRvU3RyaW5nIiwic2F0aXNmeSIsImZpbmRTaW5nbGV0b25WZXJzaW9uS2V5IiwiZ2V0SW52YWxpZFNpbmdsZXRvblZlcnNpb25NZXNzYWdlIiwiZ2V0U2luZ2xldG9uVmVyc2lvbiIsImZpbmRWYWxpZFZlcnNpb24iLCJnZXQiLCJpbml0IiwibG9hZFNpbmdsZXRvblZlcnNpb25DaGVja0ZhbGxiYWNrIiwibG9hZFN0cmljdFZlcnNpb25DaGVja0ZhbGxiYWNrIiwiaW5zdGFsbGVkTW9kdWxlcyIsIm1vZHVsZVRvSGFuZGxlck1hcHBpbmciLCJjaHVua01hcHBpbmciLCJtb2R1bGVNYXAiLCJQcm9taXNlIiwiYWxsIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsImUiLCJ0aGVuIiwibW9kdWxlIiwiZ2V0U2NvcGUiLCJSIiwibyIsInJlc29sdmUiLCJFcnJvciIsInVuZGVmaW5lZCIsInNoYXJlU2NvcGUiLCJpbml0U2NvcGUiLCJTIiwib2xkU2NvcGUiLCJuYW1lIiwiSSIsImQiLCJleHBvcnRzIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJpZCIsImxvYWRlZCIsIl9fd2VicGFja19tb2R1bGVzX18iLCJjYWxsIiwibSIsImMiLCJuIiwiZ2V0dGVyIiwiX19lc01vZHVsZSIsImEiLCJkZWZpbml0aW9uIiwia2V5IiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZiIsImNodW5rSWQiLCJrZXlzIiwicmVkdWNlIiwicHJvbWlzZXMiLCJ1IiwiZyIsImdsb2JhbFRoaXMiLCJ0aGlzIiwiRnVuY3Rpb24iLCJ3aW5kb3ciLCJobWQiLCJjcmVhdGUiLCJjaGlsZHJlbiIsInNldCIsIm9iaiIsInByb3AiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImwiLCJ1cmwiLCJkb25lIiwicHVzaCIsInNjcmlwdCIsIm5lZWRBdHRhY2giLCJzY3JpcHRzIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImkiLCJsZW5ndGgiLCJzIiwiZ2V0QXR0cmlidXRlIiwiY3JlYXRlRWxlbWVudCIsImNoYXJzZXQiLCJ0aW1lb3V0IiwibmMiLCJzZXRBdHRyaWJ1dGUiLCJzcmMiLCJvblNjcmlwdENvbXBsZXRlIiwicHJldiIsImV2ZW50Iiwib25lcnJvciIsIm9ubG9hZCIsImNsZWFyVGltZW91dCIsImRvbmVGbnMiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJmb3JFYWNoIiwiZm4iLCJzZXRUaW1lb3V0IiwiYmluZCIsInR5cGUiLCJ0YXJnZXQiLCJoZWFkIiwiYXBwZW5kQ2hpbGQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsImluaXRQcm9taXNlcyIsImluaXRUb2tlbnMiLCJpbml0VG9rZW4iLCJpbmRleE9mIiwic2NvcGUiLCJ1bmlxdWVOYW1lIiwicmVnaXN0ZXIiLCJ2ZXJzaW9uIiwiZmFjdG9yeSIsImVhZ2VyIiwidmVyc2lvbnMiLCJhY3RpdmVWZXJzaW9uIiwiZnJvbSIsInAiLCJzdHIiLCJzcGxpdCIsIm1hcCIsImV4ZWMiLCJhcHBseSIsImIiLCJ0IiwicmFuZ2UiLCJwb3AiLCJyZXBsYWNlIiwicmVxdWlyZWRWZXJzaW9uIiwic2NvcGVOYW1lIiwiY29uc29sZSIsIndhcm4iLCJlbnRyeSIsInByb21pc2UiLCJmYWxsYmFjayIsIjI5NTAiLCI4NDEwIiwiMjE4MSIsIjM4MzUiLCI1MjY0IiwiNjYyMCIsImNvbnN1bWVzIiwib25GYWN0b3J5Iiwib25FcnJvciIsImVycm9yIiwiY2F0Y2giLCJpbnN0YWxsZWRDaHVua3MiLCIzNDgiLCJqIiwiaW5zdGFsbGVkQ2h1bmtEYXRhIiwidGVzdCIsInJlamVjdCIsImVycm9yVHlwZSIsInJlYWxTcmMiLCJtZXNzYWdlIiwicmVxdWVzdCIsIndlYnBhY2tKc29ucENhbGxiYWNrIiwicGFyZW50Q2h1bmtMb2FkaW5nRnVuY3Rpb24iLCJkYXRhIiwiY2h1bmtJZHMiLCJtb3JlTW9kdWxlcyIsInJ1bnRpbWUiLCJjaHVua0xvYWRpbmdHbG9iYWwiLCJzZWxmIiwiX193ZWJwYWNrX2V4cG9ydHNfXyJdLCJtYXBwaW5ncyI6ImdDQUFJQSxFQUNBQyxFQ0RBQyxFQUlBQyxFQUlBQyxFQUlBQyxFQWdCQUMsRUFNQUMsRUFHQUMsRUFVQUMsRUF1QkFDLEVBSUFDLEVBaUNBQyxFQUlBQyxFQVFBQyxFQUNBQyxFQVNBQyxFLGtCQ2pJSixJQUFJQyxFQUFZLENBQ2YsU0FBVSxJQUNGQyxRQUFRQyxJQUFJLENBQUNDLEVBQW9CQyxFQUFFLEtBQU1ELEVBQW9CQyxFQUFFLEtBQU1ELEVBQW9CQyxFQUFFLElBQUtELEVBQW9CQyxFQUFFLE9BQU9DLE1BQUssSUFBTSxJQUFTRixFQUFvQixTQUcxS1YsRUFBTSxDQUFDYSxFQUFRQyxLQUNsQkosRUFBb0JLLEVBQUlELEVBQ3hCQSxFQUNDSixFQUFvQk0sRUFBRVQsRUFBV00sR0FDOUJOLEVBQVVNLEtBQ1ZMLFFBQVFTLFVBQVVMLE1BQUssS0FDeEIsTUFBTSxJQUFJTSxNQUFNLFdBQWFMLEVBQVMscUNBR3pDSCxFQUFvQkssT0FBSUksRUFDakJMLEdBRUpiLEVBQU8sQ0FBQ21CLEVBQVlDLEtBQ3ZCLEdBQUtYLEVBQW9CWSxFQUF6QixDQUNBLElBQUlDLEVBQVdiLEVBQW9CWSxFQUFXLFFBQzFDRSxFQUFPLFVBQ1gsR0FBR0QsR0FBWUEsSUFBYUgsRUFBWSxNQUFNLElBQUlGLE1BQU0sbUdBRXhELE9BREFSLEVBQW9CWSxFQUFFRSxHQUFRSixFQUN2QlYsRUFBb0JlLEVBQUVELEVBQU1ILEtBSXBDWCxFQUFvQmdCLEVBQUVDLEVBQVMsQ0FDOUIzQixJQUFLLElBQU0sRUFDWEMsS0FBTSxJQUFN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dEUsUUFBUWdFLEVBQXFCN0QsS0FBSyxLQUFNLElBQzNEbUUsRUFBbUIvRixLQUFPeUYsRUFBcUI3RCxLQUFLLEtBQU1tRSxFQUFtQi9GLEtBQUs0QixLQUFLbUUsSyxHQ2hGdkYsSUFBSUUsRUFBc0IzSixFQUFvQixNIiwiZmlsZSI6InJlbW90ZUVudHJ5LmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGluUHJvZ3Jlc3MgPSB7fTtcbnZhciBkYXRhV2VicGFja1ByZWZpeCA9IFwid3A1LXN0YXJ0ZXItcmVhY3Q6XCI7XG4vLyBsb2FkU2NyaXB0IGZ1bmN0aW9uIHRvIGxvYWQgYSBzY3JpcHQgdmlhIHNjcmlwdCB0YWdcbl9fd2VicGFja19yZXF1aXJlX18ubCA9ICh1cmwsIGRvbmUsIGtleSwgY2h1bmtJZCkgPT4ge1xuXHRpZihpblByb2dyZXNzW3VybF0pIHsgaW5Qcm9ncmVzc1t1cmxdLnB1c2goZG9uZSk7IHJldHVybjsgfVxuXHR2YXIgc2NyaXB0LCBuZWVkQXR0YWNoO1xuXHRpZihrZXkgIT09IHVuZGVmaW5lZCkge1xuXHRcdHZhciBzY3JpcHRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzY3JpcHRcIik7XG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IHNjcmlwdHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBzID0gc2NyaXB0c1tpXTtcblx0XHRcdGlmKHMuZ2V0QXR0cmlidXRlKFwic3JjXCIpID09IHVybCB8fCBzLmdldEF0dHJpYnV0ZShcImRhdGEtd2VicGFja1wiKSA9PSBkYXRhV2VicGFja1ByZWZpeCArIGtleSkgeyBzY3JpcHQgPSBzOyBicmVhazsgfVxuXHRcdH1cblx0fVxuXHRpZighc2NyaXB0KSB7XG5cdFx0bmVlZEF0dGFjaCA9IHRydWU7XG5cdFx0c2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG5cblx0XHRzY3JpcHQuY2hhcnNldCA9ICd1dGYtOCc7XG5cdFx0c2NyaXB0LnRpbWVvdXQgPSAxMjA7XG5cdFx0aWYgKF9fd2VicGFja19yZXF1aXJlX18ubmMpIHtcblx0XHRcdHNjcmlwdC5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLCBfX3dlYnBhY2tfcmVxdWlyZV9fLm5jKTtcblx0XHR9XG5cdFx0c2NyaXB0LnNldEF0dHJpYnV0ZShcImRhdGEtd2VicGFja1wiLCBkYXRhV2VicGFja1ByZWZpeCArIGtleSk7XG5cdFx0c2NyaXB0LnNyYyA9IHVybDtcblx0fVxuXHRpblByb2dyZXNzW3VybF0gPSBbZG9uZV07XG5cdHZhciBvblNjcmlwdENvbXBsZXRlID0gKHByZXYsIGV2ZW50KSA9PiB7XG5cdFx0Ly8gYXZvaWQgbWVtIGxlYWtzIGluIElFLlxuXHRcdHNjcmlwdC5vbmVycm9yID0gc2NyaXB0Lm9ubG9hZCA9IG51bGw7XG5cdFx0Y2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuXHRcdHZhciBkb25lRm5zID0gaW5Qcm9ncmVzc1t1cmxdO1xuXHRcdGRlbGV0ZSBpblByb2dyZXNzW3VybF07XG5cdFx0c2NyaXB0LnBhcmVudE5vZGUgJiYgc2NyaXB0LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc2NyaXB0KTtcblx0XHRkb25lRm5zICYmIGRvbmVGbnMuZm9yRWFjaCgoZm4pID0+IChmbihldmVudCkpKTtcblx0XHRpZihwcmV2KSByZXR1cm4gcHJldihldmVudCk7XG5cdH1cblx0O1xuXHR2YXIgdGltZW91dCA9IHNldFRpbWVvdXQob25TY3JpcHRDb21wbGV0ZS5iaW5kKG51bGwsIHVuZGVmaW5lZCwgeyB0eXBlOiAndGltZW91dCcsIHRhcmdldDogc2NyaXB0IH0pLCAxMjAwMDApO1xuXHRzY3JpcHQub25lcnJvciA9IG9uU2NyaXB0Q29tcGxldGUuYmluZChudWxsLCBzY3JpcHQub25lcnJvcik7XG5cdHNjcmlwdC5vbmxvYWQgPSBvblNjcmlwdENvbXBsZXRlLmJpbmQobnVsbCwgc2NyaXB0Lm9ubG9hZCk7XG5cdG5lZWRBdHRhY2ggJiYgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzY3JpcHQpO1xufTsiLCJ2YXIgcGFyc2VWZXJzaW9uID0gKHN0cikgPT4ge1xuXHQvLyBzZWUgd2VicGFjay9saWIvdXRpbC9zZW12ZXIuanMgZm9yIG9yaWdpbmFsIGNvZGVcblx0dmFyIHA9cD0+e3JldHVybiBwLnNwbGl0KFwiLlwiKS5tYXAoKHA9PntyZXR1cm4rcD09cD8rcDpwfSkpfSxuPS9eKFteLStdKyk/KD86LShbXitdKykpPyg/OlxcKyguKykpPyQvLmV4ZWMoc3RyKSxyPW5bMV0/cChuWzFdKTpbXTtyZXR1cm4gblsyXSYmKHIubGVuZ3RoKyssci5wdXNoLmFwcGx5KHIscChuWzJdKSkpLG5bM10mJihyLnB1c2goW10pLHIucHVzaC5hcHBseShyLHAoblszXSkpKSxyO1xufVxudmFyIHZlcnNpb25MdCA9IChhLCBiKSA9PiB7XG5cdC8vIHNlZSB3ZWJwYWNrL2xpYi91dGlsL3NlbXZlci5qcyBmb3Igb3JpZ2luYWwgY29kZVxuXHRhPXBhcnNlVmVyc2lvbihhKSxiPXBhcnNlVmVyc2lvbihiKTtmb3IodmFyIHI9MDs7KXtpZihyPj1hLmxlbmd0aClyZXR1cm4gcjxiLmxlbmd0aCYmXCJ1XCIhPSh0eXBlb2YgYltyXSlbMF07dmFyIGU9YVtyXSxuPSh0eXBlb2YgZSlbMF07aWYocj49Yi5sZW5ndGgpcmV0dXJuXCJ1XCI9PW47dmFyIHQ9YltyXSxmPSh0eXBlb2YgdClbMF07aWYobiE9ZilyZXR1cm5cIm9cIj09biYmXCJuXCI9PWZ8fChcInNcIj09Znx8XCJ1XCI9PW4pO2lmKFwib1wiIT1uJiZcInVcIiE9biYmZSE9dClyZXR1cm4gZTx0O3IrK31cbn1cbnZhciByYW5nZVRvU3RyaW5nID0gKHJhbmdlKSA9PiB7XG5cdC8vIHNlZSB3ZWJwYWNrL2xpYi91dGlsL3NlbXZlci5qcyBmb3Igb3JpZ2luYWwgY29kZVxuXHR2YXIgcj1yYW5nZVswXSxuPVwiXCI7aWYoMT09PXJhbmdlLmxlbmd0aClyZXR1cm5cIipcIjtpZihyKy41KXtuKz0wPT1yP1wiPj1cIjotMT09cj9cIjxcIjoxPT1yP1wiXlwiOjI9PXI/XCJ+XCI6cj4wP1wiPVwiOlwiIT1cIjtmb3IodmFyIGU9MSxhPTE7YTxyYW5nZS5sZW5ndGg7YSsrKXtlLS0sbis9XCJ1XCI9PSh0eXBlb2YodD1yYW5nZVthXSkpWzBdP1wiLVwiOihlPjA/XCIuXCI6XCJcIikrKGU9Mix0KX1yZXR1cm4gbn12YXIgZz1bXTtmb3IoYT0xO2E8cmFuZ2UubGVuZ3RoO2ErKyl7dmFyIHQ9cmFuZ2VbYV07Zy5wdXNoKDA9PT10P1wibm90KFwiK28oKStcIilcIjoxPT09dD9cIihcIitvKCkrXCIgfHwgXCIrbygpK1wiKVwiOjI9PT10P2cucG9wKCkrXCIgXCIrZy5wb3AoKTpyYW5nZVRvU3RyaW5nKHQpKX1yZXR1cm4gbygpO2Z1bmN0aW9uIG8oKXtyZXR1cm4gZy5wb3AoKS5yZXBsYWNlKC9eXFwoKC4rKVxcKSQvLFwiJDFcIil9XG59XG52YXIgc2F0aXNmeSA9IChyYW5nZSwgdmVyc2lvbikgPT4ge1xuXHQvLyBzZWUgd2VicGFjay9saWIvdXRpbC9zZW12ZXIuanMgZm9yIG9yaWdpbmFsIGNvZGVcblx0aWYoMCBpbiByYW5nZSl7dmVyc2lvbj1wYXJzZVZlcnNpb24odmVyc2lvbik7dmFyIGU9cmFuZ2VbMF0scj1lPDA7ciYmKGU9LWUtMSk7Zm9yKHZhciBuPTAsaT0xLGE9ITA7O2krKyxuKyspe3ZhciBmLHMsZz1pPHJhbmdlLmxlbmd0aD8odHlwZW9mIHJhbmdlW2ldKVswXTpcIlwiO2lmKG4+PXZlcnNpb24ubGVuZ3RofHxcIm9cIj09KHM9KHR5cGVvZihmPXZlcnNpb25bbl0pKVswXSkpcmV0dXJuIWF8fChcInVcIj09Zz9pPmUmJiFyOlwiXCI9PWchPXIpO2lmKFwidVwiPT1zKXtpZighYXx8XCJ1XCIhPWcpcmV0dXJuITF9ZWxzZSBpZihhKWlmKGc9PXMpaWYoaTw9ZSl7aWYoZiE9cmFuZ2VbaV0pcmV0dXJuITF9ZWxzZXtpZihyP2Y+cmFuZ2VbaV06ZjxyYW5nZVtpXSlyZXR1cm4hMTtmIT1yYW5nZVtpXSYmKGE9ITEpfWVsc2UgaWYoXCJzXCIhPWcmJlwiblwiIT1nKXtpZihyfHxpPD1lKXJldHVybiExO2E9ITEsaS0tfWVsc2V7aWYoaTw9ZXx8czxnIT1yKXJldHVybiExO2E9ITF9ZWxzZVwic1wiIT1nJiZcIm5cIiE9ZyYmKGE9ITEsaS0tKX19dmFyIHQ9W10sbz10LnBvcC5iaW5kKHQpO2ZvcihuPTE7bjxyYW5nZS5sZW5ndGg7bisrKXt2YXIgdT1yYW5nZVtuXTt0LnB1c2goMT09dT9vKCl8bygpOjI9PXU/bygpJm8oKTp1P3NhdGlzZnkodSx2ZXJzaW9uKTohbygpKX1yZXR1cm4hIW8oKTtcbn1cbnZhciBlbnN1cmVFeGlzdGVuY2UgPSAoc2NvcGVOYW1lLCBrZXkpID0+IHtcblx0dmFyIHNjb3BlID0gX193ZWJwYWNrX3JlcXVpcmVfXy5TW3Njb3BlTmFtZV07XG5cdGlmKCFzY29wZSB8fCAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKHNjb3BlLCBrZXkpKSB0aHJvdyBuZXcgRXJyb3IoXCJTaGFyZWQgbW9kdWxlIFwiICsga2V5ICsgXCIgZG9lc24ndCBleGlzdCBpbiBzaGFyZWQgc2NvcGUgXCIgKyBzY29wZU5hbWUpO1xuXHRyZXR1cm4gc2NvcGU7XG59O1xudmFyIGZpbmRWZXJzaW9uID0gKHNjb3BlLCBrZXkpID0+IHtcblx0dmFyIHZlcnNpb25zID0gc2NvcGVba2V5XTtcblx0dmFyIGtleSA9IE9iamVjdC5rZXlzKHZlcnNpb25zKS5yZWR1Y2UoKGEsIGIpID0+IHtcblx0XHRyZXR1cm4gIWEgfHwgdmVyc2lvbkx0KGEsIGIpID8gYiA6IGE7XG5cdH0sIDApO1xuXHRyZXR1cm4ga2V5ICYmIHZlcnNpb25zW2tleV1cbn07XG52YXIgZmluZFNpbmdsZXRvblZlcnNpb25LZXkgPSAoc2NvcGUsIGtleSkgPT4ge1xuXHR2YXIgdmVyc2lvbnMgPSBzY29wZVtrZXldO1xuXHRyZXR1cm4gT2JqZWN0LmtleXModmVyc2lvbnMpLnJlZHVjZSgoYSwgYikgPT4ge1xuXHRcdHJldHVybiAhYSB8fCAoIXZlcnNpb25zW2FdLmxvYWRlZCAmJiB2ZXJzaW9uTHQoYSwgYikpID8gYiA6IGE7XG5cdH0sIDApO1xufTtcbnZhciBnZXRJbnZhbGlkU2luZ2xldG9uVmVyc2lvbk1lc3NhZ2UgPSAoa2V5LCB2ZXJzaW9uLCByZXF1aXJlZFZlcnNpb24pID0+IHtcblx0cmV0dXJuIFwiVW5zYXRpc2ZpZWQgdmVyc2lvbiBcIiArIHZlcnNpb24gKyBcIiBvZiBzaGFyZWQgc2luZ2xldG9uIG1vZHVsZSBcIiArIGtleSArIFwiIChyZXF1aXJlZCBcIiArIHJhbmdlVG9TdHJpbmcocmVxdWlyZWRWZXJzaW9uKSArIFwiKVwiXG59O1xudmFyIGdldFNpbmdsZXRvblZlcnNpb24gPSAoc2NvcGUsIHNjb3BlTmFtZSwga2V5LCByZXF1aXJlZFZlcnNpb24pID0+IHtcblx0dmFyIHZlcnNpb24gPSBmaW5kU2luZ2xldG9uVmVyc2lvbktleShzY29wZSwga2V5KTtcblx0aWYgKCFzYXRpc2Z5KHJlcXVpcmVkVmVyc2lvbiwgdmVyc2lvbikpIHR5cGVvZiBjb25zb2xlICE9PSBcInVuZGVmaW5lZFwiICYmIGNvbnNvbGUud2FybiAmJiBjb25zb2xlLndhcm4oZ2V0SW52YWxpZFNpbmdsZXRvblZlcnNpb25NZXNzYWdlKGtleSwgdmVyc2lvbiwgcmVxdWlyZWRWZXJzaW9uKSk7XG5cdHJldHVybiBnZXQoc2NvcGVba2V5XVt2ZXJzaW9uXSk7XG59O1xudmFyIGdldFN0cmljdFNpbmdsZXRvblZlcnNpb24gPSAoc2NvcGUsIHNjb3BlTmFtZSwga2V5LCByZXF1aXJlZFZlcnNpb24pID0+IHtcblx0dmFyIHZlcnNpb24gPSBmaW5kU2luZ2xldG9uVmVyc2lvbktleShzY29wZSwga2V5KTtcblx0aWYgKCFzYXRpc2Z5KHJlcXVpcmVkVmVyc2lvbiwgdmVyc2lvbikpIHRocm93IG5ldyBFcnJvcihnZXRJbnZhbGlkU2luZ2xldG9uVmVyc2lvbk1lc3NhZ2Uoa2V5LCB2ZXJzaW9uLCByZXF1aXJlZFZlcnNpb24pKTtcblx0cmV0dXJuIGdldChzY29wZVtrZXldW3ZlcnNpb25dKTtcbn07XG52YXIgZmluZFZhbGlkVmVyc2lvbiA9IChzY29wZSwga2V5LCByZXF1aXJlZFZlcnNpb24pID0+IHtcblx0dmFyIHZlcnNpb25zID0gc2NvcGVba2V5XTtcblx0dmFyIGtleSA9IE9iamVjdC5rZXlzKHZlcnNpb25zKS5yZWR1Y2UoKGEsIGIpID0+IHtcblx0XHRpZiAoIXNhdGlzZnkocmVxdWlyZWRWZXJzaW9uLCBiKSkgcmV0dXJuIGE7XG5cdFx0cmV0dXJuICFhIHx8IHZlcnNpb25MdChhLCBiKSA/IGIgOiBhO1xuXHR9LCAwKTtcblx0cmV0dXJuIGtleSAmJiB2ZXJzaW9uc1trZXldXG59O1xudmFyIGdldEludmFsaWRWZXJzaW9uTWVzc2FnZSA9IChzY29wZSwgc2NvcGVOYW1lLCBrZXksIHJlcXVpcmVkVmVyc2lvbikgPT4ge1xuXHR2YXIgdmVyc2lvbnMgPSBzY29wZVtrZXldO1xuXHRyZXR1cm4gXCJObyBzYXRpc2Z5aW5nIHZlcnNpb24gKFwiICsgcmFuZ2VUb1N0cmluZyhyZXF1aXJlZFZlcnNpb24pICsgXCIpIG9mIHNoYXJlZCBtb2R1bGUgXCIgKyBrZXkgKyBcIiBmb3VuZCBpbiBzaGFyZWQgc2NvcGUgXCIgKyBzY29wZU5hbWUgKyBcIi5cXG5cIiArXG5cdFx0XCJBdmFpbGFibGUgdmVyc2lvbnM6IFwiICsgT2JqZWN0LmtleXModmVyc2lvbnMpLm1hcCgoa2V5KSA9PiB7XG5cdFx0cmV0dXJuIGtleSArIFwiIGZyb20gXCIgKyB2ZXJzaW9uc1trZXldLmZyb207XG5cdH0pLmpvaW4oXCIsIFwiKTtcbn07XG52YXIgZ2V0VmFsaWRWZXJzaW9uID0gKHNjb3BlLCBzY29wZU5hbWUsIGtleSwgcmVxdWlyZWRWZXJzaW9uKSA9PiB7XG5cdHZhciBlbnRyeSA9IGZpbmRWYWxpZFZlcnNpb24oc2NvcGUsIGtleSwgcmVxdWlyZWRWZXJzaW9uKTtcblx0aWYoZW50cnkpIHJldHVybiBnZXQoZW50cnkpO1xuXHR0aHJvdyBuZXcgRXJyb3IoZ2V0SW52YWxpZFZlcnNpb25NZXNzYWdlKHNjb3BlLCBzY29wZU5hbWUsIGtleSwgcmVxdWlyZWRWZXJzaW9uKSk7XG59O1xudmFyIHdhcm5JbnZhbGlkVmVyc2lvbiA9IChzY29wZSwgc2NvcGVOYW1lLCBrZXksIHJlcXVpcmVkVmVyc2lvbikgPT4ge1xuXHR0eXBlb2YgY29uc29sZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBjb25zb2xlLndhcm4gJiYgY29uc29sZS53YXJuKGdldEludmFsaWRWZXJzaW9uTWVzc2FnZShzY29wZSwgc2NvcGVOYW1lLCBrZXksIHJlcXVpcmVkVmVyc2lvbikpO1xufTtcbnZhciBnZXQgPSAoZW50cnkpID0+IHtcblx0ZW50cnkubG9hZGVkID0gMTtcblx0cmV0dXJuIGVudHJ5LmdldCgpXG59O1xudmFyIGluaXQgPSAoZm4pID0+IChmdW5jdGlvbihzY29wZU5hbWUsIGEsIGIsIGMpIHtcblx0dmFyIHByb21pc2UgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLkkoc2NvcGVOYW1lKTtcblx0aWYgKHByb21pc2UgJiYgcHJvbWlzZS50aGVuKSByZXR1cm4gcHJvbWlzZS50aGVuKGZuLmJpbmQoZm4sIHNjb3BlTmFtZSwgX193ZWJwYWNrX3JlcXVpcmVfXy5TW3Njb3BlTmFtZV0sIGEsIGIsIGMpKTtcblx0cmV0dXJuIGZuKHNjb3BlTmFtZSwgX193ZWJwYWNrX3JlcXVpcmVfXy5TW3Njb3BlTmFtZV0sIGEsIGIsIGMpO1xufSk7XG5cbnZhciBsb2FkID0gLyojX19QVVJFX18qLyBpbml0KChzY29wZU5hbWUsIHNjb3BlLCBrZXkpID0+IHtcblx0ZW5zdXJlRXhpc3RlbmNlKHNjb3BlTmFtZSwga2V5KTtcblx0cmV0dXJuIGdldChmaW5kVmVyc2lvbihzY29wZSwga2V5KSk7XG59KTtcbnZhciBsb2FkRmFsbGJhY2sgPSAvKiNfX1BVUkVfXyovIGluaXQoKHNjb3BlTmFtZSwgc2NvcGUsIGtleSwgZmFsbGJhY2spID0+IHtcblx0cmV0dXJuIHNjb3BlICYmIF9fd2VicGFja19yZXF1aXJlX18ubyhzY29wZSwga2V5KSA/IGdldChmaW5kVmVyc2lvbihzY29wZSwga2V5KSkgOiBmYWxsYmFjaygpO1xufSk7XG52YXIgbG9hZFZlcnNpb25DaGVjayA9IC8qI19fUFVSRV9fKi8gaW5pdCgoc2NvcGVOYW1lLCBzY29wZSwga2V5LCB2ZXJzaW9uKSA9PiB7XG5cdGVuc3VyZUV4aXN0ZW5jZShzY29wZU5hbWUsIGtleSk7XG5cdHJldHVybiBnZXQoZmluZFZhbGlkVmVyc2lvbihzY29wZSwga2V5LCB2ZXJzaW9uKSB8fCB3YXJuSW52YWxpZFZlcnNpb24oc2NvcGUsIHNjb3BlTmFtZSwga2V5LCB2ZXJzaW9uKSB8fCBmaW5kVmVyc2lvbihzY29wZSwga2V5KSk7XG59KTtcbnZhciBsb2FkU2luZ2xldG9uVmVyc2lvbkNoZWNrID0gLyojX19QVVJFX18qLyBpbml0KChzY29wZU5hbWUsIHNjb3BlLCBrZXksIHZlcnNpb24pID0+IHtcblx0ZW5zdXJlRXhpc3RlbmNlKHNjb3BlTmFtZSwga2V5KTtcblx0cmV0dXJuIGdldFNpbmdsZXRvblZlcnNpb24oc2NvcGUsIHNjb3BlTmFtZSwga2V5LCB2ZXJzaW9uKTtcbn0pO1xudmFyIGxvYWRTdHJpY3RWZXJzaW9uQ2hlY2sgPSAvKiNfX1BVUkVfXyovIGluaXQoKHNjb3BlTmFtZSwgc2NvcGUsIGtleSwgdmVyc2lvbikgPT4ge1xuXHRlbnN1cmVFeGlzdGVuY2Uoc2NvcGVOYW1lLCBrZXkpO1xuXHRyZXR1cm4gZ2V0VmFsaWRWZXJzaW9uKHNjb3BlLCBzY29wZU5hbWUsIGtleSwgdmVyc2lvbik7XG59KTtcbnZhciBsb2FkU3RyaWN0U2luZ2xldG9uVmVyc2lvbkNoZWNrID0gLyojX19QVVJFX18qLyBpbml0KChzY29wZU5hbWUsIHNjb3BlLCBrZXksIHZlcnNpb24pID0+IHtcblx0ZW5zdXJlRXhpc3RlbmNlKHNjb3BlTmFtZSwga2V5KTtcblx0cmV0dXJuIGdldFN0cmljdFNpbmdsZXRvblZlcnNpb24oc2NvcGUsIHNjb3BlTmFtZSwga2V5LCB2ZXJzaW9uKTtcbn0pO1xudmFyIGxvYWRWZXJzaW9uQ2hlY2tGYWxsYmFjayA9IC8qI19fUFVSRV9fKi8gaW5pdCgoc2NvcGVOYW1lLCBzY29wZSwga2V5LCB2ZXJzaW9uLCBmYWxsYmFjaykgPT4ge1xuXHRpZighc2NvcGUgfHwgIV9fd2VicGFja19yZXF1aXJlX18ubyhzY29wZSwga2V5KSkgcmV0dXJuIGZhbGxiYWNrKCk7XG5cdHJldHVybiBnZXQoZmluZFZhbGlkVmVyc2lvbihzY29wZSwga2V5LCB2ZXJzaW9uKSB8fCB3YXJuSW52YWxpZFZlcnNpb24oc2NvcGUsIHNjb3BlTmFtZSwga2V5LCB2ZXJzaW9uKSB8fCBmaW5kVmVyc2lvbihzY29wZSwga2V5KSk7XG59KTtcbnZhciBsb2FkU2luZ2xldG9uVmVyc2lvbkNoZWNrRmFsbGJhY2sgPSAvKiNfX1BVUkVfXyovIGluaXQoKHNjb3BlTmFtZSwgc2NvcGUsIGtleSwgdmVyc2lvbiwgZmFsbGJhY2spID0+IHtcblx0aWYoIXNjb3BlIHx8ICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oc2NvcGUsIGtleSkpIHJldHVybiBmYWxsYmFjaygpO1xuXHRyZXR1cm4gZ2V0U2luZ2xldG9uVmVyc2lvbihzY29wZSwgc2NvcGVOYW1lLCBrZXksIHZlcnNpb24pO1xufSk7XG52YXIgbG9hZFN0cmljdFZlcnNpb25DaGVja0ZhbGxiYWNrID0gLyojX19QVVJFX18qLyBpbml0KChzY29wZU5hbWUsIHNjb3BlLCBrZXksIHZlcnNpb24sIGZhbGxiYWNrKSA9PiB7XG5cdHZhciBlbnRyeSA9IHNjb3BlICYmIF9fd2VicGFja19yZXF1aXJlX18ubyhzY29wZSwga2V5KSAmJiBmaW5kVmFsaWRWZXJzaW9uKHNjb3BlLCBrZXksIHZlcnNpb24pO1xuXHRyZXR1cm4gZW50cnkgPyBnZXQoZW50cnkpIDogZmFsbGJhY2soKTtcbn0pO1xudmFyIGxvYWRTdHJpY3RTaW5nbGV0b25WZXJzaW9uQ2hlY2tGYWxsYmFjayA9IC8qI19fUFVSRV9fKi8gaW5pdCgoc2NvcGVOYW1lLCBzY29wZSwga2V5LCB2ZXJzaW9uLCBmYWxsYmFjaykgPT4ge1xuXHRpZighc2NvcGUgfHwgIV9fd2VicGFja19yZXF1aXJlX18ubyhzY29wZSwga2V5KSkgcmV0dXJuIGZhbGxiYWNrKCk7XG5cdHJldHVybiBnZXRTdHJpY3RTaW5nbGV0b25WZXJzaW9uKHNjb3BlLCBzY29wZU5hbWUsIGtleSwgdmVyc2lvbik7XG59KTtcbnZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG52YXIgbW9kdWxlVG9IYW5kbGVyTWFwcGluZyA9IHtcblx0Mjk1MDogKCkgPT4gKGxvYWRTaW5nbGV0b25WZXJzaW9uQ2hlY2tGYWxsYmFjayhcImRlZmF1bHRcIiwgXCJyZWFjdFwiLCBbMSwxNywwLDJdLCAoKSA9PiAoX193ZWJwYWNrX3JlcXVpcmVfXy5lKDI5NCkudGhlbigoKSA9PiAoKCkgPT4gKF9fd2VicGFja19yZXF1aXJlX18oNzI5NCkpKSkpKSksXG5cdDg0MTA6ICgpID0+IChsb2FkU3RyaWN0VmVyc2lvbkNoZWNrRmFsbGJhY2soXCJkZWZhdWx0XCIsIFwiZ3JhcGhxbFwiLCBbMSwxNSw1LDBdLCAoKSA9PiAoX193ZWJwYWNrX3JlcXVpcmVfXy5lKDMxMCkudGhlbigoKSA9PiAoKCkgPT4gKF9fd2VicGFja19yZXF1aXJlX18oMTMxMCkpKSkpKSksXG5cdDIxODE6ICgpID0+IChsb2FkU2luZ2xldG9uVmVyc2lvbkNoZWNrRmFsbGJhY2soXCJkZWZhdWx0XCIsIFwicmVhY3QtZG9tXCIsIFsxLDE3LDAsMl0sICgpID0+IChfX3dlYnBhY2tfcmVxdWlyZV9fLmUoOTM1KS50aGVuKCgpID0+ICgoKSA9PiAoX193ZWJwYWNrX3JlcXVpcmVfXygzOTM1KSkpKSkpKSxcblx0MzgzNTogKCkgPT4gKGxvYWRTdHJpY3RWZXJzaW9uQ2hlY2tGYWxsYmFjayhcImRlZmF1bHRcIiwgXCJzdWJzY3JpcHRpb25zLXRyYW5zcG9ydC13c1wiLCBbMiwwLDksMThdLCAoKSA9PiAoX193ZWJwYWNrX3JlcXVpcmVfXy5lKDMxMykudGhlbigoKSA9PiAoKCkgPT4gKF9fd2VicGFja19yZXF1aXJlX18oNTMxMykpKSkpKSksXG5cdDUyNjQ6ICgpID0+IChsb2FkU3RyaWN0VmVyc2lvbkNoZWNrRmFsbGJhY2soXCJkZWZhdWx0XCIsIFwiQGFwb2xsby9jbGllbnRcIiwgWzEsMywzLDE5XSwgKCkgPT4gKFByb21pc2UuYWxsKFtfX3dlYnBhY2tfcmVxdWlyZV9fLmUoODI5KSwgX193ZWJwYWNrX3JlcXVpcmVfXy5lKDQxMCldKS50aGVuKCgpID0+ICgoKSA9PiAoX193ZWJwYWNrX3JlcXVpcmVfXyg2ODI5KSkpKSkpKSxcblx0NjYyMDogKCkgPT4gKGxvYWRTdHJpY3RWZXJzaW9uQ2hlY2tGYWxsYmFjayhcImRlZmF1bHRcIiwgXCJzaGFyZHMtcmVhY3RcIiwgWzEsMSwwLDNdLCAoKSA9PiAoUHJvbWlzZS5hbGwoW19fd2VicGFja19yZXF1aXJlX18uZSg2MjQpLCBfX3dlYnBhY2tfcmVxdWlyZV9fLmUoMTgxKV0pLnRoZW4oKCkgPT4gKCgpID0+IChfX3dlYnBhY2tfcmVxdWlyZV9fKDE2MjQpKSkpKSkpXG59O1xuLy8gbm8gY29uc3VtZXMgaW4gaW5pdGlhbCBjaHVua3NcbnZhciBjaHVua01hcHBpbmcgPSB7XG5cdFwiODdcIjogW1xuXHRcdDM4MzUsXG5cdFx0NTI2NCxcblx0XHQ2NjIwXG5cdF0sXG5cdFwiMTgxXCI6IFtcblx0XHQyMTgxXG5cdF0sXG5cdFwiNDEwXCI6IFtcblx0XHQ4NDEwXG5cdF0sXG5cdFwiOTUwXCI6IFtcblx0XHQyOTUwXG5cdF1cbn07XG5fX3dlYnBhY2tfcmVxdWlyZV9fLmYuY29uc3VtZXMgPSAoY2h1bmtJZCwgcHJvbWlzZXMpID0+IHtcblx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGNodW5rTWFwcGluZywgY2h1bmtJZCkpIHtcblx0XHRjaHVua01hcHBpbmdbY2h1bmtJZF0uZm9yRWFjaCgoaWQpID0+IHtcblx0XHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhpbnN0YWxsZWRNb2R1bGVzLCBpZCkpIHJldHVybiBwcm9taXNlcy5wdXNoKGluc3RhbGxlZE1vZHVsZXNbaWRdKTtcblx0XHRcdHZhciBvbkZhY3RvcnkgPSAoZmFjdG9yeSkgPT4ge1xuXHRcdFx0XHRpbnN0YWxsZWRNb2R1bGVzW2lkXSA9IDA7XG5cdFx0XHRcdF9fd2VicGFja19yZXF1aXJlX18ubVtpZF0gPSAobW9kdWxlKSA9PiB7XG5cdFx0XHRcdFx0ZGVsZXRlIF9fd2VicGFja19yZXF1aXJlX18uY1tpZF07XG5cdFx0XHRcdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0XHR2YXIgb25FcnJvciA9IChlcnJvcikgPT4ge1xuXHRcdFx0XHRkZWxldGUgaW5zdGFsbGVkTW9kdWxlc1tpZF07XG5cdFx0XHRcdF9fd2VicGFja19yZXF1aXJlX18ubVtpZF0gPSAobW9kdWxlKSA9PiB7XG5cdFx0XHRcdFx0ZGVsZXRlIF9fd2VicGFja19yZXF1aXJlX18uY1tpZF07XG5cdFx0XHRcdFx0dGhyb3cgZXJyb3I7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0XHR0cnkge1xuXHRcdFx0XHR2YXIgcHJvbWlzZSA9IG1vZHVsZVRvSGFuZGxlck1hcHBpbmdbaWRdKCk7XG5cdFx0XHRcdGlmKHByb21pc2UudGhlbikge1xuXHRcdFx0XHRcdHByb21pc2VzLnB1c2goaW5zdGFsbGVkTW9kdWxlc1tpZF0gPSBwcm9taXNlLnRoZW4ob25GYWN0b3J5KS5jYXRjaChvbkVycm9yKSk7XG5cdFx0XHRcdH0gZWxzZSBvbkZhY3RvcnkocHJvbWlzZSk7XG5cdFx0XHR9IGNhdGNoKGUpIHsgb25FcnJvcihlKTsgfVxuXHRcdH0pO1xuXHR9XG59IiwidmFyIG1vZHVsZU1hcCA9IHtcblx0XCIuL0NoYXRcIjogKCkgPT4ge1xuXHRcdHJldHVybiBQcm9taXNlLmFsbChbX193ZWJwYWNrX3JlcXVpcmVfXy5lKDcwNiksIF9fd2VicGFja19yZXF1aXJlX18uZSg5NTApLCBfX3dlYnBhY2tfcmVxdWlyZV9fLmUoODcpLCBfX3dlYnBhY2tfcmVxdWlyZV9fLmUoNDcxKV0pLnRoZW4oKCkgPT4gKCgpID0+ICgoX193ZWJwYWNrX3JlcXVpcmVfXygyNDcxKSkpKSk7XG5cdH1cbn07XG52YXIgZ2V0ID0gKG1vZHVsZSwgZ2V0U2NvcGUpID0+IHtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5SID0gZ2V0U2NvcGU7XG5cdGdldFNjb3BlID0gKFxuXHRcdF9fd2VicGFja19yZXF1aXJlX18ubyhtb2R1bGVNYXAsIG1vZHVsZSlcblx0XHRcdD8gbW9kdWxlTWFwW21vZHVsZV0oKVxuXHRcdFx0OiBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IHtcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCdNb2R1bGUgXCInICsgbW9kdWxlICsgJ1wiIGRvZXMgbm90IGV4aXN0IGluIGNvbnRhaW5lci4nKTtcblx0XHRcdH0pXG5cdCk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uUiA9IHVuZGVmaW5lZDtcblx0cmV0dXJuIGdldFNjb3BlO1xufTtcbnZhciBpbml0ID0gKHNoYXJlU2NvcGUsIGluaXRTY29wZSkgPT4ge1xuXHRpZiAoIV9fd2VicGFja19yZXF1aXJlX18uUykgcmV0dXJuO1xuXHR2YXIgb2xkU2NvcGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLlNbXCJkZWZhdWx0XCJdO1xuXHR2YXIgbmFtZSA9IFwiZGVmYXVsdFwiXG5cdGlmKG9sZFNjb3BlICYmIG9sZFNjb3BlICE9PSBzaGFyZVNjb3BlKSB0aHJvdyBuZXcgRXJyb3IoXCJDb250YWluZXIgaW5pdGlhbGl6YXRpb24gZmFpbGVkIGFzIGl0IGhhcyBhbHJlYWR5IGJlZW4gaW5pdGlhbGl6ZWQgd2l0aCBhIGRpZmZlcmVudCBzaGFyZSBzY29wZVwiKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5TW25hbWVdID0gc2hhcmVTY29wZTtcblx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18uSShuYW1lLCBpbml0U2NvcGUpO1xufTtcblxuLy8gVGhpcyBleHBvcnRzIGdldHRlcnMgdG8gZGlzYWxsb3cgbW9kaWZpY2F0aW9uc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kKGV4cG9ydHMsIHtcblx0Z2V0OiAoKSA9PiAoZ2V0KSxcblx0aW5pdDogKCkgPT4gKGluaXQpXG59KTsiLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdGlkOiBtb2R1bGVJZCxcblx0XHRsb2FkZWQ6IGZhbHNlLFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcblx0bW9kdWxlLmxvYWRlZCA9IHRydWU7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4vLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuX193ZWJwYWNrX3JlcXVpcmVfXy5tID0gX193ZWJwYWNrX21vZHVsZXNfXztcblxuLy8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbl9fd2VicGFja19yZXF1aXJlX18uYyA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfXztcblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gKG1vZHVsZVsnZGVmYXVsdCddKSA6XG5cdFx0KCkgPT4gKG1vZHVsZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmYgPSB7fTtcbi8vIFRoaXMgZmlsZSBjb250YWlucyBvbmx5IHRoZSBlbnRyeSBjaHVuay5cbi8vIFRoZSBjaHVuayBsb2FkaW5nIGZ1bmN0aW9uIGZvciBhZGRpdGlvbmFsIGNodW5rc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5lID0gKGNodW5rSWQpID0+IHtcblx0cmV0dXJuIFByb21pc2UuYWxsKE9iamVjdC5rZXlzKF9fd2VicGFja19yZXF1aXJlX18uZikucmVkdWNlKChwcm9taXNlcywga2V5KSA9PiB7XG5cdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5mW2tleV0oY2h1bmtJZCwgcHJvbWlzZXMpO1xuXHRcdHJldHVybiBwcm9taXNlcztcblx0fSwgW10pKTtcbn07IiwiLy8gVGhpcyBmdW5jdGlvbiBhbGxvdyB0byByZWZlcmVuY2UgYXN5bmMgY2h1bmtzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnUgPSAoY2h1bmtJZCkgPT4ge1xuXHQvLyByZXR1cm4gdXJsIGZvciBmaWxlbmFtZXMgYmFzZWQgb24gdGVtcGxhdGVcblx0cmV0dXJuIFwiXCIgKyBjaHVua0lkICsgXCIuYnVuZGxlLmpzXCI7XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18uZyA9IChmdW5jdGlvbigpIHtcblx0aWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSAnb2JqZWN0JykgcmV0dXJuIGdsb2JhbFRoaXM7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIHRoaXMgfHwgbmV3IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHJldHVybiB3aW5kb3c7XG5cdH1cbn0pKCk7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5obWQgPSAobW9kdWxlKSA9PiB7XG5cdG1vZHVsZSA9IE9iamVjdC5jcmVhdGUobW9kdWxlKTtcblx0aWYgKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCAnZXhwb3J0cycsIHtcblx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdHNldDogKCkgPT4ge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdFUyBNb2R1bGVzIG1heSBub3QgYXNzaWduIG1vZHVsZS5leHBvcnRzIG9yIGV4cG9ydHMuKiwgVXNlIEVTTSBleHBvcnQgc3ludGF4LCBpbnN0ZWFkOiAnICsgbW9kdWxlLmlkKTtcblx0XHR9XG5cdH0pO1xuXHRyZXR1cm4gbW9kdWxlO1xufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gKGV4cG9ydHMpID0+IHtcblx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cdH1cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5TID0ge307XG52YXIgaW5pdFByb21pc2VzID0ge307XG52YXIgaW5pdFRva2VucyA9IHt9O1xuX193ZWJwYWNrX3JlcXVpcmVfXy5JID0gKG5hbWUsIGluaXRTY29wZSkgPT4ge1xuXHRpZighaW5pdFNjb3BlKSBpbml0U2NvcGUgPSBbXTtcblx0Ly8gaGFuZGxpbmcgY2lyY3VsYXIgaW5pdCBjYWxsc1xuXHR2YXIgaW5pdFRva2VuID0gaW5pdFRva2Vuc1tuYW1lXTtcblx0aWYoIWluaXRUb2tlbikgaW5pdFRva2VuID0gaW5pdFRva2Vuc1tuYW1lXSA9IHt9O1xuXHRpZihpbml0U2NvcGUuaW5kZXhPZihpbml0VG9rZW4pID49IDApIHJldHVybjtcblx0aW5pdFNjb3BlLnB1c2goaW5pdFRva2VuKTtcblx0Ly8gb25seSBydW5zIG9uY2Vcblx0aWYoaW5pdFByb21pc2VzW25hbWVdKSByZXR1cm4gaW5pdFByb21pc2VzW25hbWVdO1xuXHQvLyBjcmVhdGVzIGEgbmV3IHNoYXJlIHNjb3BlIGlmIG5lZWRlZFxuXHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKF9fd2VicGFja19yZXF1aXJlX18uUywgbmFtZSkpIF9fd2VicGFja19yZXF1aXJlX18uU1tuYW1lXSA9IHt9O1xuXHQvLyBydW5zIGFsbCBpbml0IHNuaXBwZXRzIGZyb20gYWxsIG1vZHVsZXMgcmVhY2hhYmxlXG5cdHZhciBzY29wZSA9IF9fd2VicGFja19yZXF1aXJlX18uU1tuYW1lXTtcblx0dmFyIHdhcm4gPSAobXNnKSA9PiAodHlwZW9mIGNvbnNvbGUgIT09IFwidW5kZWZpbmVkXCIgJiYgY29uc29sZS53YXJuICYmIGNvbnNvbGUud2Fybihtc2cpKTtcblx0dmFyIHVuaXF1ZU5hbWUgPSBcIndwNS1zdGFydGVyLXJlYWN0XCI7XG5cdHZhciByZWdpc3RlciA9IChuYW1lLCB2ZXJzaW9uLCBmYWN0b3J5LCBlYWdlcikgPT4ge1xuXHRcdHZhciB2ZXJzaW9ucyA9IHNjb3BlW25hbWVdID0gc2NvcGVbbmFtZV0gfHwge307XG5cdFx0dmFyIGFjdGl2ZVZlcnNpb24gPSB2ZXJzaW9uc1t2ZXJzaW9uXTtcblx0XHRpZighYWN0aXZlVmVyc2lvbiB8fCAoIWFjdGl2ZVZlcnNpb24ubG9hZGVkICYmICghZWFnZXIgIT0gIWFjdGl2ZVZlcnNpb24uZWFnZXIgPyBlYWdlciA6IHVuaXF1ZU5hbWUgPiBhY3RpdmVWZXJzaW9uLmZyb20pKSkgdmVyc2lvbnNbdmVyc2lvbl0gPSB7IGdldDogZmFjdG9yeSwgZnJvbTogdW5pcXVlTmFtZSwgZWFnZXI6ICEhZWFnZXIgfTtcblx0fTtcblx0dmFyIGluaXRFeHRlcm5hbCA9IChpZCkgPT4ge1xuXHRcdHZhciBoYW5kbGVFcnJvciA9IChlcnIpID0+ICh3YXJuKFwiSW5pdGlhbGl6YXRpb24gb2Ygc2hhcmluZyBleHRlcm5hbCBmYWlsZWQ6IFwiICsgZXJyKSk7XG5cdFx0dHJ5IHtcblx0XHRcdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKGlkKTtcblx0XHRcdGlmKCFtb2R1bGUpIHJldHVybjtcblx0XHRcdHZhciBpbml0Rm4gPSAobW9kdWxlKSA9PiAobW9kdWxlICYmIG1vZHVsZS5pbml0ICYmIG1vZHVsZS5pbml0KF9fd2VicGFja19yZXF1aXJlX18uU1tuYW1lXSwgaW5pdFNjb3BlKSlcblx0XHRcdGlmKG1vZHVsZS50aGVuKSByZXR1cm4gcHJvbWlzZXMucHVzaChtb2R1bGUudGhlbihpbml0Rm4sIGhhbmRsZUVycm9yKSk7XG5cdFx0XHR2YXIgaW5pdFJlc3VsdCA9IGluaXRGbihtb2R1bGUpO1xuXHRcdFx0aWYoaW5pdFJlc3VsdCAmJiBpbml0UmVzdWx0LnRoZW4pIHJldHVybiBwcm9taXNlcy5wdXNoKGluaXRSZXN1bHQuY2F0Y2goaGFuZGxlRXJyb3IpKTtcblx0XHR9IGNhdGNoKGVycikgeyBoYW5kbGVFcnJvcihlcnIpOyB9XG5cdH1cblx0dmFyIHByb21pc2VzID0gW107XG5cdHN3aXRjaChuYW1lKSB7XG5cdFx0Y2FzZSBcImRlZmF1bHRcIjoge1xuXHRcdFx0cmVnaXN0ZXIoXCJAYXBvbGxvL2NsaWVudFwiLCBcIjMuMy4xOVwiLCAoKSA9PiAoUHJvbWlzZS5hbGwoW19fd2VicGFja19yZXF1aXJlX18uZSg3MDYpLCBfX3dlYnBhY2tfcmVxdWlyZV9fLmUoODI5KSwgX193ZWJwYWNrX3JlcXVpcmVfXy5lKDk1MCksIF9fd2VicGFja19yZXF1aXJlX18uZSg0MTApXSkudGhlbigoKSA9PiAoKCkgPT4gKF9fd2VicGFja19yZXF1aXJlX18oNjgyOSkpKSkpKTtcblx0XHRcdHJlZ2lzdGVyKFwiZ3JhcGhxbFwiLCBcIjE1LjUuMFwiLCAoKSA9PiAoX193ZWJwYWNrX3JlcXVpcmVfXy5lKDMxMCkudGhlbigoKSA9PiAoKCkgPT4gKF9fd2VicGFja19yZXF1aXJlX18oMTMxMCkpKSkpKTtcblx0XHRcdHJlZ2lzdGVyKFwicmVhY3QtZG9tXCIsIFwiMTcuMC4yXCIsICgpID0+IChQcm9taXNlLmFsbChbX193ZWJwYWNrX3JlcXVpcmVfXy5lKDkzNSksIF9fd2VicGFja19yZXF1aXJlX18uZSg5NTApXSkudGhlbigoKSA9PiAoKCkgPT4gKF9fd2VicGFja19yZXF1aXJlX18oMzkzNSkpKSkpKTtcblx0XHRcdHJlZ2lzdGVyKFwicmVhY3RcIiwgXCIxNy4wLjJcIiwgKCkgPT4gKF9fd2VicGFja19yZXF1aXJlX18uZSgyOTQpLnRoZW4oKCkgPT4gKCgpID0+IChfX3dlYnBhY2tfcmVxdWlyZV9fKDcyOTQpKSkpKSk7XG5cdFx0XHRyZWdpc3RlcihcInNoYXJkcy1yZWFjdFwiLCBcIjEuMC4zXCIsICgpID0+IChQcm9taXNlLmFsbChbX193ZWJwYWNrX3JlcXVpcmVfXy5lKDYyNCksIF9fd2VicGFja19yZXF1aXJlX18uZSg5NTApLCBfX3dlYnBhY2tfcmVxdWlyZV9fLmUoMTgxKV0pLnRoZW4oKCkgPT4gKCgpID0+IChfX3dlYnBhY2tfcmVxdWlyZV9fKDE2MjQpKSkpKSk7XG5cdFx0XHRyZWdpc3RlcihcInN1YnNjcmlwdGlvbnMtdHJhbnNwb3J0LXdzXCIsIFwiMC45LjE4XCIsICgpID0+IChfX3dlYnBhY2tfcmVxdWlyZV9fLmUoMzEzKS50aGVuKCgpID0+ICgoKSA9PiAoX193ZWJwYWNrX3JlcXVpcmVfXyg1MzEzKSkpKSkpO1xuXHRcdH1cblx0XHRicmVhaztcblx0fVxuXHRpZighcHJvbWlzZXMubGVuZ3RoKSByZXR1cm4gaW5pdFByb21pc2VzW25hbWVdID0gMTtcblx0cmV0dXJuIGluaXRQcm9taXNlc1tuYW1lXSA9IFByb21pc2UuYWxsKHByb21pc2VzKS50aGVuKCgpID0+IChpbml0UHJvbWlzZXNbbmFtZV0gPSAxKSk7XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiL1wiOyIsIi8vIG5vIGJhc2VVUklcblxuLy8gb2JqZWN0IHRvIHN0b3JlIGxvYWRlZCBhbmQgbG9hZGluZyBjaHVua3Ncbi8vIHVuZGVmaW5lZCA9IGNodW5rIG5vdCBsb2FkZWQsIG51bGwgPSBjaHVuayBwcmVsb2FkZWQvcHJlZmV0Y2hlZFxuLy8gW3Jlc29sdmUsIHJlamVjdCwgUHJvbWlzZV0gPSBjaHVuayBsb2FkaW5nLCAwID0gY2h1bmsgbG9hZGVkXG52YXIgaW5zdGFsbGVkQ2h1bmtzID0ge1xuXHQzNDg6IDBcbn07XG5cbl9fd2VicGFja19yZXF1aXJlX18uZi5qID0gKGNodW5rSWQsIHByb21pc2VzKSA9PiB7XG5cdFx0Ly8gSlNPTlAgY2h1bmsgbG9hZGluZyBmb3IgamF2YXNjcmlwdFxuXHRcdHZhciBpbnN0YWxsZWRDaHVua0RhdGEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm8oaW5zdGFsbGVkQ2h1bmtzLCBjaHVua0lkKSA/IGluc3RhbGxlZENodW5rc1tjaHVua0lkXSA6IHVuZGVmaW5lZDtcblx0XHRpZihpbnN0YWxsZWRDaHVua0RhdGEgIT09IDApIHsgLy8gMCBtZWFucyBcImFscmVhZHkgaW5zdGFsbGVkXCIuXG5cblx0XHRcdC8vIGEgUHJvbWlzZSBtZWFucyBcImN1cnJlbnRseSBsb2FkaW5nXCIuXG5cdFx0XHRpZihpbnN0YWxsZWRDaHVua0RhdGEpIHtcblx0XHRcdFx0cHJvbWlzZXMucHVzaChpbnN0YWxsZWRDaHVua0RhdGFbMl0pO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aWYoIS9eKDE4MXw0MTB8ODd8OTUwKSQvLnRlc3QoY2h1bmtJZCkpIHtcblx0XHRcdFx0XHQvLyBzZXR1cCBQcm9taXNlIGluIGNodW5rIGNhY2hlXG5cdFx0XHRcdFx0dmFyIHByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiAoaW5zdGFsbGVkQ2h1bmtEYXRhID0gaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdID0gW3Jlc29sdmUsIHJlamVjdF0pKTtcblx0XHRcdFx0XHRwcm9taXNlcy5wdXNoKGluc3RhbGxlZENodW5rRGF0YVsyXSA9IHByb21pc2UpO1xuXG5cdFx0XHRcdFx0Ly8gc3RhcnQgY2h1bmsgbG9hZGluZ1xuXHRcdFx0XHRcdHZhciB1cmwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLnAgKyBfX3dlYnBhY2tfcmVxdWlyZV9fLnUoY2h1bmtJZCk7XG5cdFx0XHRcdFx0Ly8gY3JlYXRlIGVycm9yIGJlZm9yZSBzdGFjayB1bndvdW5kIHRvIGdldCB1c2VmdWwgc3RhY2t0cmFjZSBsYXRlclxuXHRcdFx0XHRcdHZhciBlcnJvciA9IG5ldyBFcnJvcigpO1xuXHRcdFx0XHRcdHZhciBsb2FkaW5nRW5kZWQgPSAoZXZlbnQpID0+IHtcblx0XHRcdFx0XHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhpbnN0YWxsZWRDaHVua3MsIGNodW5rSWQpKSB7XG5cdFx0XHRcdFx0XHRcdGluc3RhbGxlZENodW5rRGF0YSA9IGluc3RhbGxlZENodW5rc1tjaHVua0lkXTtcblx0XHRcdFx0XHRcdFx0aWYoaW5zdGFsbGVkQ2h1bmtEYXRhICE9PSAwKSBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gPSB1bmRlZmluZWQ7XG5cdFx0XHRcdFx0XHRcdGlmKGluc3RhbGxlZENodW5rRGF0YSkge1xuXHRcdFx0XHRcdFx0XHRcdHZhciBlcnJvclR5cGUgPSBldmVudCAmJiAoZXZlbnQudHlwZSA9PT0gJ2xvYWQnID8gJ21pc3NpbmcnIDogZXZlbnQudHlwZSk7XG5cdFx0XHRcdFx0XHRcdFx0dmFyIHJlYWxTcmMgPSBldmVudCAmJiBldmVudC50YXJnZXQgJiYgZXZlbnQudGFyZ2V0LnNyYztcblx0XHRcdFx0XHRcdFx0XHRlcnJvci5tZXNzYWdlID0gJ0xvYWRpbmcgY2h1bmsgJyArIGNodW5rSWQgKyAnIGZhaWxlZC5cXG4oJyArIGVycm9yVHlwZSArICc6ICcgKyByZWFsU3JjICsgJyknO1xuXHRcdFx0XHRcdFx0XHRcdGVycm9yLm5hbWUgPSAnQ2h1bmtMb2FkRXJyb3InO1xuXHRcdFx0XHRcdFx0XHRcdGVycm9yLnR5cGUgPSBlcnJvclR5cGU7XG5cdFx0XHRcdFx0XHRcdFx0ZXJyb3IucmVxdWVzdCA9IHJlYWxTcmM7XG5cdFx0XHRcdFx0XHRcdFx0aW5zdGFsbGVkQ2h1bmtEYXRhWzFdKGVycm9yKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5sKHVybCwgbG9hZGluZ0VuZGVkLCBcImNodW5rLVwiICsgY2h1bmtJZCwgY2h1bmtJZCk7XG5cdFx0XHRcdH0gZWxzZSBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gPSAwO1xuXHRcdFx0fVxuXHRcdH1cbn07XG5cbi8vIG5vIHByZWZldGNoaW5nXG5cbi8vIG5vIHByZWxvYWRlZFxuXG4vLyBubyBITVJcblxuLy8gbm8gSE1SIG1hbmlmZXN0XG5cbi8vIG5vIG9uIGNodW5rcyBsb2FkZWRcblxuLy8gaW5zdGFsbCBhIEpTT05QIGNhbGxiYWNrIGZvciBjaHVuayBsb2FkaW5nXG52YXIgd2VicGFja0pzb25wQ2FsbGJhY2sgPSAocGFyZW50Q2h1bmtMb2FkaW5nRnVuY3Rpb24sIGRhdGEpID0+IHtcblx0dmFyIFtjaHVua0lkcywgbW9yZU1vZHVsZXMsIHJ1bnRpbWVdID0gZGF0YTtcblx0Ly8gYWRkIFwibW9yZU1vZHVsZXNcIiB0byB0aGUgbW9kdWxlcyBvYmplY3QsXG5cdC8vIHRoZW4gZmxhZyBhbGwgXCJjaHVua0lkc1wiIGFzIGxvYWRlZCBhbmQgZmlyZSBjYWxsYmFja1xuXHR2YXIgbW9kdWxlSWQsIGNodW5rSWQsIGkgPSAwO1xuXHRmb3IobW9kdWxlSWQgaW4gbW9yZU1vZHVsZXMpIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8obW9yZU1vZHVsZXMsIG1vZHVsZUlkKSkge1xuXHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tW21vZHVsZUlkXSA9IG1vcmVNb2R1bGVzW21vZHVsZUlkXTtcblx0XHR9XG5cdH1cblx0aWYocnVudGltZSkgcnVudGltZShfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblx0aWYocGFyZW50Q2h1bmtMb2FkaW5nRnVuY3Rpb24pIHBhcmVudENodW5rTG9hZGluZ0Z1bmN0aW9uKGRhdGEpO1xuXHRmb3IoO2kgPCBjaHVua0lkcy5sZW5ndGg7IGkrKykge1xuXHRcdGNodW5rSWQgPSBjaHVua0lkc1tpXTtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oaW5zdGFsbGVkQ2h1bmtzLCBjaHVua0lkKSAmJiBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0pIHtcblx0XHRcdGluc3RhbGxlZENodW5rc1tjaHVua0lkXVswXSgpO1xuXHRcdH1cblx0XHRpbnN0YWxsZWRDaHVua3NbY2h1bmtJZHNbaV1dID0gMDtcblx0fVxuXG59XG5cbnZhciBjaHVua0xvYWRpbmdHbG9iYWwgPSBzZWxmW1wid2VicGFja0NodW5rd3A1X3N0YXJ0ZXJfcmVhY3RcIl0gPSBzZWxmW1wid2VicGFja0NodW5rd3A1X3N0YXJ0ZXJfcmVhY3RcIl0gfHwgW107XG5jaHVua0xvYWRpbmdHbG9iYWwuZm9yRWFjaCh3ZWJwYWNrSnNvbnBDYWxsYmFjay5iaW5kKG51bGwsIDApKTtcbmNodW5rTG9hZGluZ0dsb2JhbC5wdXNoID0gd2VicGFja0pzb25wQ2FsbGJhY2suYmluZChudWxsLCBjaHVua0xvYWRpbmdHbG9iYWwucHVzaC5iaW5kKGNodW5rTG9hZGluZ0dsb2JhbCkpOyIsIi8vIG1vZHVsZSBjYWNoZSBhcmUgdXNlZCBzbyBlbnRyeSBpbmxpbmluZyBpcyBkaXNhYmxlZFxuLy8gc3RhcnR1cFxuLy8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG52YXIgX193ZWJwYWNrX2V4cG9ydHNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oODQyOCk7XG4iXSwic291cmNlUm9vdCI6IiJ9