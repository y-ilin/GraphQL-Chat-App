(self.webpackChunkwp5_starter_react=self.webpackChunkwp5_starter_react||[]).push([[310],{1310:(e,n,t)=>{"use strict";t.r(n),t.d(n,{BREAK:()=>ve,BreakingChangeType:()=>Ao,DEFAULT_DEPRECATION_REASON:()=>Pt,DangerousChangeType:()=>So,DirectiveLocation:()=>Q,ExecutableDefinitionsRule:()=>_r,FieldsOnCorrectTypeRule:()=>Fr,FragmentsOnCompositeTypesRule:()=>Rr,GraphQLBoolean:()=>ft,GraphQLDeprecatedDirective:()=>Ut,GraphQLDirective:()=>Vt,GraphQLEnumType:()=>Kn,GraphQLError:()=>O,GraphQLFloat:()=>ut,GraphQLID:()=>dt,GraphQLIncludeDirective:()=>jt,GraphQLInputObjectType:()=>Hn,GraphQLInt:()=>st,GraphQLInterfaceType:()=>Qn,GraphQLList:()=>_n,GraphQLNonNull:()=>On,GraphQLObjectType:()=>Cn,GraphQLScalarType:()=>jn,GraphQLSchema:()=>Jt,GraphQLSkipDirective:()=>Ct,GraphQLSpecifiedByDirective:()=>Mt,GraphQLString:()=>pt,GraphQLUnionType:()=>qn,Kind:()=>A,KnownArgumentNamesRule:()=>Kr,KnownDirectivesRule:()=>Gr,KnownFragmentNamesRule:()=>Vr,KnownTypeNamesRule:()=>Ar,Lexer:()=>H,Location:()=>x,LoneAnonymousOperationRule:()=>Dr,LoneSchemaDefinitionRule:()=>Ti,NoDeprecatedCustomRule:()=>Sa,NoFragmentCyclesRule:()=>Pr,NoSchemaIntrospectionCustomRule:()=>Ra,NoUndefinedVariablesRule:()=>Mr,NoUnusedFragmentsRule:()=>jr,NoUnusedVariablesRule:()=>Br,OverlappingFieldsCanBeMergedRule:()=>ci,PossibleFragmentSpreadsRule:()=>Cr,PossibleTypeExtensionsRule:()=>wi,ProvidedRequiredArgumentsRule:()=>ni,ScalarLeafsRule:()=>xr,SchemaMetaFieldDef:()=>wt,SingleFieldSubscriptionsRule:()=>wr,Source:()=>G,Token:()=>F,TokenKind:()=>V,TypeInfo:()=>fr,TypeKind:()=>Ot,TypeMetaFieldDef:()=>At,TypeNameMetaFieldDef:()=>St,UniqueArgumentNamesRule:()=>Hr,UniqueDirectiveNamesRule:()=>Oi,UniqueDirectivesPerLocationRule:()=>Yr,UniqueEnumValueNamesRule:()=>Ii,UniqueFieldDefinitionNamesRule:()=>bi,UniqueFragmentNamesRule:()=>Lr,UniqueInputFieldNamesRule:()=>Ei,UniqueOperationNamesRule:()=>Or,UniqueOperationTypesRule:()=>gi,UniqueTypeNamesRule:()=>Ni,UniqueVariableNamesRule:()=>Ur,ValidationContext:()=>Li,ValuesOfCorrectTypeRule:()=>zr,VariablesAreInputTypesRule:()=>kr,VariablesInAllowedPositionRule:()=>ii,__Directive:()=>Tt,__DirectiveLocation:()=>gt,__EnumValue:()=>_t,__Field:()=>It,__InputValue:()=>bt,__Schema:()=>Et,__Type:()=>Nt,__TypeKind:()=>Dt,assertAbstractType:()=>bn,assertCompositeType:()=>Nn,assertDirective:()=>Lt,assertEnumType:()=>cn,assertInputObjectType:()=>un,assertInputType:()=>hn,assertInterfaceType:()=>tn,assertLeafType:()=>Tn,assertListType:()=>pn,assertNamedType:()=>xn,assertNonNullType:()=>dn,assertNullableType:()=>Sn,assertObjectType:()=>en,assertOutputType:()=>mn,assertScalarType:()=>We,assertSchema:()=>qt,assertType:()=>ze,assertUnionType:()=>an,assertValidName:()=>Ie,assertValidSchema:()=>Ht,assertWrappingType:()=>wn,astFromValue:()=>yt,buildASTSchema:()=>Ha,buildClientSchema:()=>Ua,buildSchema:()=>za,coerceInputValue:()=>Yi,concatAST:()=>To,createSourceEventStream:()=>Aa,defaultFieldResolver:()=>ma,defaultTypeResolver:()=>ya,doTypesOverlap:()=>et,execute:()=>Hi,executeSync:()=>zi,extendSchema:()=>Ya,findBreakingChanges:()=>Ro,findDangerousChanges:()=>ko,findDeprecatedUsages:()=>Qo,formatError:()=>ka,getDescription:()=>Xa,getDirectiveValues:()=>Ki,getIntrospectionQuery:()=>La,getLocation:()=>p,getNamedType:()=>Fn,getNullableType:()=>Rn,getOperationAST:()=>Va,getOperationRootType:()=>Ui,getVisitFn:()=>me,graphql:()=>Ta,graphqlSync:()=>ga,introspectionFromSchema:()=>Pa,introspectionTypes:()=>Rt,isAbstractType:()=>In,isCompositeType:()=>gn,isDefinitionNode:()=>hr,isDirective:()=>Ft,isEnumType:()=>on,isEqualType:()=>Wn,isExecutableDefinitionNode:()=>yr,isInputObjectType:()=>sn,isInputType:()=>vn,isInterfaceType:()=>nn,isIntrospectionType:()=>kt,isLeafType:()=>En,isListType:()=>ln,isNamedType:()=>kn,isNonNullType:()=>fn,isNullableType:()=>An,isObjectType:()=>Ze,isOutputType:()=>yn,isRequiredArgument:()=>Yn,isRequiredInputField:()=>$n,isScalarType:()=>$e,isSchema:()=>Qt,isSelectionNode:()=>mr,isSpecifiedDirective:()=>Gt,isSpecifiedScalarType:()=>ht,isType:()=>He,isTypeDefinitionNode:()=>Nr,isTypeExtensionNode:()=>br,isTypeNode:()=>Tr,isTypeSubTypeOf:()=>Zn,isTypeSystemDefinitionNode:()=>gr,isTypeSystemExtensionNode:()=>Ir,isUnionType:()=>rn,isValidNameError:()=>be,isValueNode:()=>Er,isWrappingType:()=>Dn,lexicographicSortSchema:()=>eo,locatedError:()=>ge,parse:()=>ce,parseType:()=>ue,parseValue:()=>se,print:()=>Ce,printError:()=>D,printIntrospectionSchema:()=>ao,printLocation:()=>f,printSchema:()=>io,printSourceLocation:()=>d,printType:()=>uo,responsePathAsArray:()=>Pi,separateOperations:()=>go,specifiedDirectives:()=>Bt,specifiedRules:()=>Si,specifiedScalarTypes:()=>vt,stripIgnoredCharacters:()=>bo,subscribe:()=>Oa,syntaxError:()=>w,typeFromAST:()=>pr,validate:()=>Vi,validateSchema:()=>Xt,valueFromAST:()=>Bi,valueFromASTUntyped:()=>Je,version:()=>r,versionInfo:()=>i,visit:()=>he,visitInParallel:()=>ye,visitWithTypeInfo:()=>vr});var r="15.5.0",i=Object.freeze({major:15,minor:5,patch:0,preReleaseTag:null});function a(e){return"function"==typeof(null==e?void 0:e.then)}function o(e){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function c(e){return"object"==o(e)&&null!==e}var s="function"==typeof Symbol&&null!=Symbol.iterator?Symbol.iterator:"@@iterator",u="function"==typeof Symbol&&null!=Symbol.asyncIterator?Symbol.asyncIterator:"@@asyncIterator",l="function"==typeof Symbol&&null!=Symbol.toStringTag?Symbol.toStringTag:"@@toStringTag";function p(e,n){for(var t,r=/\r\n|[\n\r]/g,i=1,a=n+1;(t=r.exec(e.body))&&t.index<n;)i+=1,a=n+1-(t.index+t[0].length);return{line:i,column:a}}function f(e){return d(e.source,p(e.source,e.start))}function d(e,n){var t=e.locationOffset.column-1,r=h(t)+e.body,i=n.line-1,a=e.locationOffset.line-1,o=n.line+a,c=1===n.line?t:0,s=n.column+c,u="".concat(e.name,":").concat(o,":").concat(s,"\n"),l=r.split(/\r\n|[\n\r]/g),p=l[i];if(p.length>120){for(var f=Math.floor(s/80),d=s%80,y=[],m=0;m<p.length;m+=80)y.push(p.slice(m,m+80));return u+v([["".concat(o),y[0]]].concat(y.slice(1,f+1).map((function(e){return["",e]})),[[" ",h(d-1)+"^"],["",y[f+1]]]))}return u+v([["".concat(o-1),l[i-1]],["".concat(o),p],["",h(s-1)+"^"],["".concat(o+1),l[i+1]]])}function v(e){var n=e.filter((function(e){return e[0],void 0!==e[1]})),t=Math.max.apply(Math,n.map((function(e){return e[0].length})));return n.map((function(e){var n,r=e[0],i=e[1];return h(t-(n=r).length)+n+(i?" | "+i:" |")})).join("\n")}function h(e){return Array(e+1).join(" ")}function y(e){return(y="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function m(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function E(e,n){return!n||"object"!==y(n)&&"function"!=typeof n?T(e):n}function T(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function g(e){var n="function"==typeof Map?new Map:void 0;return(g=function(e){if(null===e||(t=e,-1===Function.toString.call(t).indexOf("[native code]")))return e;var t;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==n){if(n.has(e))return n.get(e);n.set(e,r)}function r(){return N(e,arguments,_(this).constructor)}return r.prototype=Object.create(e.prototype,{constructor:{value:r,enumerable:!1,writable:!0,configurable:!0}}),b(r,e)})(e)}function N(e,n,t){return(N=I()?Reflect.construct:function(e,n,t){var r=[null];r.push.apply(r,n);var i=new(Function.bind.apply(e,r));return t&&b(i,t.prototype),i}).apply(null,arguments)}function I(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function b(e,n){return(b=Object.setPrototypeOf||function(e,n){return e.__proto__=n,e})(e,n)}function _(e){return(_=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var O=function(e){!function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),n&&b(e,n)}(o,e);var n,t,r,i,a=(n=o,t=I(),function(){var e,r=_(n);if(t){var i=_(this).constructor;e=Reflect.construct(r,arguments,i)}else e=r.apply(this,arguments);return E(this,e)});function o(e,n,t,r,i,s,u){var l,f,d,v,h;!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,o),h=a.call(this,e);var y,m=Array.isArray(n)?0!==n.length?n:void 0:n?[n]:void 0,g=t;!g&&m&&(g=null===(y=m[0].loc)||void 0===y?void 0:y.source);var N,I=r;!I&&m&&(I=m.reduce((function(e,n){return n.loc&&e.push(n.loc.start),e}),[])),I&&0===I.length&&(I=void 0),r&&t?N=r.map((function(e){return p(t,e)})):m&&(N=m.reduce((function(e,n){return n.loc&&e.push(p(n.loc.source,n.loc.start)),e}),[]));var b=u;if(null==b&&null!=s){var _=s.extensions;c(_)&&(b=_)}return Object.defineProperties(T(h),{name:{value:"GraphQLError"},message:{value:e,enumerable:!0,writable:!0},locations:{value:null!==(l=N)&&void 0!==l?l:void 0,enumerable:null!=N},path:{value:null!=i?i:void 0,enumerable:null!=i},nodes:{value:null!=m?m:void 0},source:{value:null!==(f=g)&&void 0!==f?f:void 0},positions:{value:null!==(d=I)&&void 0!==d?d:void 0},originalError:{value:s},extensions:{value:null!==(v=b)&&void 0!==v?v:void 0,enumerable:null!=b}}),null!=s&&s.stack?(Object.defineProperty(T(h),"stack",{value:s.stack,writable:!0,configurable:!0}),E(h)):(Error.captureStackTrace?Error.captureStackTrace(T(h),o):Object.defineProperty(T(h),"stack",{value:Error().stack,writable:!0,configurable:!0}),h)}return r=o,(i=[{key:"toString",value:function(){return D(this)}},{key:l,get:function(){return"Object"}}])&&m(r.prototype,i),o}(g(Error));function D(e){var n=e.message;if(e.nodes)for(var t=0,r=e.nodes;t<r.length;t++){var i=r[t];i.loc&&(n+="\n\n"+f(i.loc))}else if(e.source&&e.locations)for(var a=0,o=e.locations;a<o.length;a++){var c=o[a];n+="\n\n"+d(e.source,c)}return n}function w(e,n,t){return new O("Syntax Error: ".concat(t),void 0,e,[n])}var A=Object.freeze({NAME:"Name",DOCUMENT:"Document",OPERATION_DEFINITION:"OperationDefinition",VARIABLE_DEFINITION:"VariableDefinition",SELECTION_SET:"SelectionSet",FIELD:"Field",ARGUMENT:"Argument",FRAGMENT_SPREAD:"FragmentSpread",INLINE_FRAGMENT:"InlineFragment",FRAGMENT_DEFINITION:"FragmentDefinition",VARIABLE:"Variable",INT:"IntValue",FLOAT:"FloatValue",STRING:"StringValue",BOOLEAN:"BooleanValue",NULL:"NullValue",ENUM:"EnumValue",LIST:"ListValue",OBJECT:"ObjectValue",OBJECT_FIELD:"ObjectField",DIRECTIVE:"Directive",NAMED_TYPE:"NamedType",LIST_TYPE:"ListType",NON_NULL_TYPE:"NonNullType",SCHEMA_DEFINITION:"SchemaDefinition",OPERATION_TYPE_DEFINITION:"OperationTypeDefinition",SCALAR_TYPE_DEFINITION:"ScalarTypeDefinition",OBJECT_TYPE_DEFINITION:"ObjectTypeDefinition",FIELD_DEFINITION:"FieldDefinition",INPUT_VALUE_DEFINITION:"InputValueDefinition",INTERFACE_TYPE_DEFINITION:"InterfaceTypeDefinition",UNION_TYPE_DEFINITION:"UnionTypeDefinition",ENUM_TYPE_DEFINITION:"EnumTypeDefinition",ENUM_VALUE_DEFINITION:"EnumValueDefinition",INPUT_OBJECT_TYPE_DEFINITION:"InputObjectTypeDefinition",DIRECTIVE_DEFINITION:"DirectiveDefinition",SCHEMA_EXTENSION:"SchemaExtension",SCALAR_TYPE_EXTENSION:"ScalarTypeExtension",OBJECT_TYPE_EXTENSION:"ObjectTypeExtension",INTERFACE_TYPE_EXTENSION:"InterfaceTypeExtension",UNION_TYPE_EXTENSION:"UnionTypeExtension",ENUM_TYPE_EXTENSION:"EnumTypeExtension",INPUT_OBJECT_TYPE_EXTENSION:"InputObjectTypeExtension"});function S(e,n){if(!Boolean(e))throw new Error(null!=n?n:"Unexpected invariant triggered.")}const R="function"==typeof Symbol&&"function"==typeof Symbol.for?Symbol.for("nodejs.util.inspect.custom"):void 0;function k(e){var n=e.prototype.toJSON;"function"==typeof n||S(0),e.prototype.inspect=n,R&&(e.prototype[R]=n)}var x=function(){function e(e,n,t){this.start=e.start,this.end=n.end,this.startToken=e,this.endToken=n,this.source=t}return e.prototype.toJSON=function(){return{start:this.start,end:this.end}},e}();k(x);var F=function(){function e(e,n,t,r,i,a,o){this.kind=e,this.start=n,this.end=t,this.line=r,this.column=i,this.value=o,this.prev=a,this.next=null}return e.prototype.toJSON=function(){return{kind:this.kind,value:this.value,line:this.line,column:this.column}},e}();function L(e){return null!=e&&"string"==typeof e.kind}k(F);var V=Object.freeze({SOF:"<SOF>",EOF:"<EOF>",BANG:"!",DOLLAR:"$",AMP:"&",PAREN_L:"(",PAREN_R:")",SPREAD:"...",COLON:":",EQUALS:"=",AT:"@",BRACKET_L:"[",BRACKET_R:"]",BRACE_L:"{",PIPE:"|",BRACE_R:"}",NAME:"Name",INT:"Int",FLOAT:"Float",STRING:"String",BLOCK_STRING:"BlockString",COMMENT:"Comment"});function j(e){return(j="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function C(e){return P(e,[])}function P(e,n){switch(j(e)){case"string":return JSON.stringify(e);case"function":return e.name?"[function ".concat(e.name,"]"):"[function]";case"object":return null===e?"null":function(e,n){if(-1!==n.indexOf(e))return"[Circular]";var t=[].concat(n,[e]),r=function(e){var n=e[String(R)];return"function"==typeof n?n:"function"==typeof e.inspect?e.inspect:void 0}(e);if(void 0!==r){var i=r.call(e);if(i!==e)return"string"==typeof i?i:P(i,t)}else if(Array.isArray(e))return function(e,n){if(0===e.length)return"[]";if(n.length>2)return"[Array]";for(var t=Math.min(10,e.length),r=e.length-t,i=[],a=0;a<t;++a)i.push(P(e[a],n));return 1===r?i.push("... 1 more item"):r>1&&i.push("... ".concat(r," more items")),"["+i.join(", ")+"]"}(e,t);return function(e,n){var t=Object.keys(e);return 0===t.length?"{}":n.length>2?"["+function(e){var n=Object.prototype.toString.call(e).replace(/^\[object /,"").replace(/]$/,"");if("Object"===n&&"function"==typeof e.constructor){var t=e.constructor.name;if("string"==typeof t&&""!==t)return t}return n}(e)+"]":"{ "+t.map((function(t){return t+": "+P(e[t],n)})).join(", ")+" }"}(e,t)}(e,n);default:return String(e)}}function U(e,n){if(!Boolean(e))throw new Error(n)}const M=function(e,n){return e instanceof n};function B(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var G=function(){function e(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"GraphQL request",t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{line:1,column:1};"string"==typeof e||U(0,"Body must be a string. Received: ".concat(C(e),".")),this.body=e,this.name=n,this.locationOffset=t,this.locationOffset.line>0||U(0,"line in locationOffset is 1-indexed and must be positive."),this.locationOffset.column>0||U(0,"column in locationOffset is 1-indexed and must be positive.")}var n,t;return n=e,(t=[{key:l,get:function(){return"Source"}}])&&B(n.prototype,t),e}();function Y(e){return M(e,G)}var Q=Object.freeze({QUERY:"QUERY",MUTATION:"MUTATION",SUBSCRIPTION:"SUBSCRIPTION",FIELD:"FIELD",FRAGMENT_DEFINITION:"FRAGMENT_DEFINITION",FRAGMENT_SPREAD:"FRAGMENT_SPREAD",INLINE_FRAGMENT:"INLINE_FRAGMENT",VARIABLE_DEFINITION:"VARIABLE_DEFINITION",SCHEMA:"SCHEMA",SCALAR:"SCALAR",OBJECT:"OBJECT",FIELD_DEFINITION:"FIELD_DEFINITION",ARGUMENT_DEFINITION:"ARGUMENT_DEFINITION",INTERFACE:"INTERFACE",UNION:"UNION",ENUM:"ENUM",ENUM_VALUE:"ENUM_VALUE",INPUT_OBJECT:"INPUT_OBJECT",INPUT_FIELD_DEFINITION:"INPUT_FIELD_DEFINITION"});function q(e){var n=e.split(/\r\n|[\n\r]/g),t=K(e);if(0!==t)for(var r=1;r<n.length;r++)n[r]=n[r].slice(t);for(var i=0;i<n.length&&J(n[i]);)++i;for(var a=n.length;a>i&&J(n[a-1]);)--a;return n.slice(i,a).join("\n")}function J(e){for(var n=0;n<e.length;++n)if(" "!==e[n]&&"\t"!==e[n])return!1;return!0}function K(e){for(var n,t=!0,r=!0,i=0,a=null,o=0;o<e.length;++o)switch(e.charCodeAt(o)){case 13:10===e.charCodeAt(o+1)&&++o;case 10:t=!1,r=!0,i=0;break;case 9:case 32:++i;break;default:r&&!t&&(null===a||i<a)&&(a=i),r=!1}return null!==(n=a)&&void 0!==n?n:0}function X(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",t=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=-1===e.indexOf("\n"),i=" "===e[0]||"\t"===e[0],a='"'===e[e.length-1],o="\\"===e[e.length-1],c=!r||a||o||t,s="";return!c||r&&i||(s+="\n"+n),s+=n?e.replace(/\n/g,"\n"+n):e,c&&(s+="\n"),'"""'+s.replace(/"""/g,'\\"""')+'"""'}var H=function(){function e(e){var n=new F(V.SOF,0,0,0,0,null);this.source=e,this.lastToken=n,this.token=n,this.line=1,this.lineStart=0}var n=e.prototype;return n.advance=function(){return this.lastToken=this.token,this.token=this.lookahead()},n.lookahead=function(){var e=this.token;if(e.kind!==V.EOF)do{var n;e=null!==(n=e.next)&&void 0!==n?n:e.next=W(this,e)}while(e.kind===V.COMMENT);return e},e}();function z(e){return e===V.BANG||e===V.DOLLAR||e===V.AMP||e===V.PAREN_L||e===V.PAREN_R||e===V.SPREAD||e===V.COLON||e===V.EQUALS||e===V.AT||e===V.BRACKET_L||e===V.BRACKET_R||e===V.BRACE_L||e===V.PIPE||e===V.BRACE_R}function $(e){return isNaN(e)?V.EOF:e<127?JSON.stringify(String.fromCharCode(e)):'"\\u'.concat(("00"+e.toString(16).toUpperCase()).slice(-4),'"')}function W(e,n){for(var t=e.source,r=t.body,i=r.length,a=n.end;a<i;){var o=r.charCodeAt(a),c=e.line,s=1+a-e.lineStart;switch(o){case 65279:case 9:case 32:case 44:++a;continue;case 10:++a,++e.line,e.lineStart=a;continue;case 13:10===r.charCodeAt(a+1)?a+=2:++a,++e.line,e.lineStart=a;continue;case 33:return new F(V.BANG,a,a+1,c,s,n);case 35:return ee(t,a,c,s,n);case 36:return new F(V.DOLLAR,a,a+1,c,s,n);case 38:return new F(V.AMP,a,a+1,c,s,n);case 40:return new F(V.PAREN_L,a,a+1,c,s,n);case 41:return new F(V.PAREN_R,a,a+1,c,s,n);case 46:if(46===r.charCodeAt(a+1)&&46===r.charCodeAt(a+2))return new F(V.SPREAD,a,a+3,c,s,n);break;case 58:return new F(V.COLON,a,a+1,c,s,n);case 61:return new F(V.EQUALS,a,a+1,c,s,n);case 64:return new F(V.AT,a,a+1,c,s,n);case 91:return new F(V.BRACKET_L,a,a+1,c,s,n);case 93:return new F(V.BRACKET_R,a,a+1,c,s,n);case 123:return new F(V.BRACE_L,a,a+1,c,s,n);case 124:return new F(V.PIPE,a,a+1,c,s,n);case 125:return new F(V.BRACE_R,a,a+1,c,s,n);case 34:return 34===r.charCodeAt(a+1)&&34===r.charCodeAt(a+2)?ie(t,a,c,s,n,e):re(t,a,c,s,n);case 45:case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:return ne(t,a,o,c,s,n);case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:return oe(t,a,c,s,n)}throw w(t,a,Z(o))}var u=e.line,l=1+a-e.lineStart;return new F(V.EOF,i,i,u,l,n)}function Z(e){return e<32&&9!==e&&10!==e&&13!==e?"Cannot contain the invalid character ".concat($(e),"."):39===e?"Unexpected single quote character ('), did you mean to use a double quote (\")?":"Cannot parse the unexpected character ".concat($(e),".")}function ee(e,n,t,r,i){var a,o=e.body,c=n;do{a=o.charCodeAt(++c)}while(!isNaN(a)&&(a>31||9===a));return new F(V.COMMENT,n,c,t,r,i,o.slice(n+1,c))}function ne(e,n,t,r,i,a){var o=e.body,c=t,s=n,u=!1;if(45===c&&(c=o.charCodeAt(++s)),48===c){if((c=o.charCodeAt(++s))>=48&&c<=57)throw w(e,s,"Invalid number, unexpected digit after 0: ".concat($(c),"."))}else s=te(e,s,c),c=o.charCodeAt(s);if(46===c&&(u=!0,c=o.charCodeAt(++s),s=te(e,s,c),c=o.charCodeAt(s)),69!==c&&101!==c||(u=!0,43!==(c=o.charCodeAt(++s))&&45!==c||(c=o.charCodeAt(++s)),s=te(e,s,c),c=o.charCodeAt(s)),46===c||function(e){return 95===e||e>=65&&e<=90||e>=97&&e<=122}(c))throw w(e,s,"Invalid number, expected digit but got: ".concat($(c),"."));return new F(u?V.FLOAT:V.INT,n,s,r,i,a,o.slice(n,s))}function te(e,n,t){var r=e.body,i=n,a=t;if(a>=48&&a<=57){do{a=r.charCodeAt(++i)}while(a>=48&&a<=57);return i}throw w(e,i,"Invalid number, expected digit but got: ".concat($(a),"."))}function re(e,n,t,r,i){for(var a,o,c,s,u=e.body,l=n+1,p=l,f=0,d="";l<u.length&&!isNaN(f=u.charCodeAt(l))&&10!==f&&13!==f;){if(34===f)return d+=u.slice(p,l),new F(V.STRING,n,l+1,t,r,i,d);if(f<32&&9!==f)throw w(e,l,"Invalid character within String: ".concat($(f),"."));if(++l,92===f){switch(d+=u.slice(p,l-1),f=u.charCodeAt(l)){case 34:d+='"';break;case 47:d+="/";break;case 92:d+="\\";break;case 98:d+="\b";break;case 102:d+="\f";break;case 110:d+="\n";break;case 114:d+="\r";break;case 116:d+="\t";break;case 117:var v=(a=u.charCodeAt(l+1),o=u.charCodeAt(l+2),c=u.charCodeAt(l+3),s=u.charCodeAt(l+4),ae(a)<<12|ae(o)<<8|ae(c)<<4|ae(s));if(v<0){var h=u.slice(l+1,l+5);throw w(e,l,"Invalid character escape sequence: \\u".concat(h,"."))}d+=String.fromCharCode(v),l+=4;break;default:throw w(e,l,"Invalid character escape sequence: \\".concat(String.fromCharCode(f),"."))}p=++l}}throw w(e,l,"Unterminated string.")}function ie(e,n,t,r,i,a){for(var o=e.body,c=n+3,s=c,u=0,l="";c<o.length&&!isNaN(u=o.charCodeAt(c));){if(34===u&&34===o.charCodeAt(c+1)&&34===o.charCodeAt(c+2))return l+=o.slice(s,c),new F(V.BLOCK_STRING,n,c+3,t,r,i,q(l));if(u<32&&9!==u&&10!==u&&13!==u)throw w(e,c,"Invalid character within String: ".concat($(u),"."));10===u?(++c,++a.line,a.lineStart=c):13===u?(10===o.charCodeAt(c+1)?c+=2:++c,++a.line,a.lineStart=c):92===u&&34===o.charCodeAt(c+1)&&34===o.charCodeAt(c+2)&&34===o.charCodeAt(c+3)?(l+=o.slice(s,c)+'"""',s=c+=4):++c}throw w(e,c,"Unterminated string.")}function ae(e){return e>=48&&e<=57?e-48:e>=65&&e<=70?e-55:e>=97&&e<=102?e-87:-1}function oe(e,n,t,r,i){for(var a=e.body,o=a.length,c=n+1,s=0;c!==o&&!isNaN(s=a.charCodeAt(c))&&(95===s||s>=48&&s<=57||s>=65&&s<=90||s>=97&&s<=122);)++c;return new F(V.NAME,n,c,t,r,i,a.slice(n,c))}function ce(e,n){return new le(e,n).parseDocument()}function se(e,n){var t=new le(e,n);t.expectToken(V.SOF);var r=t.parseValueLiteral(!1);return t.expectToken(V.EOF),r}function ue(e,n){var t=new le(e,n);t.expectToken(V.SOF);var r=t.parseTypeReference();return t.expectToken(V.EOF),r}var le=function(){function e(e,n){var t=Y(e)?e:new G(e);this._lexer=new H(t),this._options=n}var n=e.prototype;return n.parseName=function(){var e=this.expectToken(V.NAME);return{kind:A.NAME,value:e.value,loc:this.loc(e)}},n.parseDocument=function(){var e=this._lexer.token;return{kind:A.DOCUMENT,definitions:this.many(V.SOF,this.parseDefinition,V.EOF),loc:this.loc(e)}},n.parseDefinition=function(){if(this.peek(V.NAME))switch(this._lexer.token.value){case"query":case"mutation":case"subscription":return this.parseOperationDefinition();case"fragment":return this.parseFragmentDefinition();case"schema":case"scalar":case"type":case"interface":case"union":case"enum":case"input":case"directive":return this.parseTypeSystemDefinition();case"extend":return this.parseTypeSystemExtension()}else{if(this.peek(V.BRACE_L))return this.parseOperationDefinition();if(this.peekDescription())return this.parseTypeSystemDefinition()}throw this.unexpected()},n.parseOperationDefinition=function(){var e=this._lexer.token;if(this.peek(V.BRACE_L))return{kind:A.OPERATION_DEFINITION,operation:"query",name:void 0,variableDefinitions:[],directives:[],selectionSet:this.parseSelectionSet(),loc:this.loc(e)};var n,t=this.parseOperationType();return this.peek(V.NAME)&&(n=this.parseName()),{kind:A.OPERATION_DEFINITION,operation:t,name:n,variableDefinitions:this.parseVariableDefinitions(),directives:this.parseDirectives(!1),selectionSet:this.parseSelectionSet(),loc:this.loc(e)}},n.parseOperationType=function(){var e=this.expectToken(V.NAME);switch(e.value){case"query":return"query";case"mutation":return"mutation";case"subscription":return"subscription"}throw this.unexpected(e)},n.parseVariableDefinitions=function(){return this.optionalMany(V.PAREN_L,this.parseVariableDefinition,V.PAREN_R)},n.parseVariableDefinition=function(){var e=this._lexer.token;return{kind:A.VARIABLE_DEFINITION,variable:this.parseVariable(),type:(this.expectToken(V.COLON),this.parseTypeReference()),defaultValue:this.expectOptionalToken(V.EQUALS)?this.parseValueLiteral(!0):void 0,directives:this.parseDirectives(!0),loc:this.loc(e)}},n.parseVariable=function(){var e=this._lexer.token;return this.expectToken(V.DOLLAR),{kind:A.VARIABLE,name:this.parseName(),loc:this.loc(e)}},n.parseSelectionSet=function(){var e=this._lexer.token;return{kind:A.SELECTION_SET,selections:this.many(V.BRACE_L,this.parseSelection,V.BRACE_R),loc:this.loc(e)}},n.parseSelection=function(){return this.peek(V.SPREAD)?this.parseFragment():this.parseField()},n.parseField=function(){var e,n,t=this._lexer.token,r=this.parseName();return this.expectOptionalToken(V.COLON)?(e=r,n=this.parseName()):n=r,{kind:A.FIELD,alias:e,name:n,arguments:this.parseArguments(!1),directives:this.parseDirectives(!1),selectionSet:this.peek(V.BRACE_L)?this.parseSelectionSet():void 0,loc:this.loc(t)}},n.parseArguments=function(e){var n=e?this.parseConstArgument:this.parseArgument;return this.optionalMany(V.PAREN_L,n,V.PAREN_R)},n.parseArgument=function(){var e=this._lexer.token,n=this.parseName();return this.expectToken(V.COLON),{kind:A.ARGUMENT,name:n,value:this.parseValueLiteral(!1),loc:this.loc(e)}},n.parseConstArgument=function(){var e=this._lexer.token;return{kind:A.ARGUMENT,name:this.parseName(),value:(this.expectToken(V.COLON),this.parseValueLiteral(!0)),loc:this.loc(e)}},n.parseFragment=function(){var e=this._lexer.token;this.expectToken(V.SPREAD);var n=this.expectOptionalKeyword("on");return!n&&this.peek(V.NAME)?{kind:A.FRAGMENT_SPREAD,name:this.parseFragmentName(),directives:this.parseDirectives(!1),loc:this.loc(e)}:{kind:A.INLINE_FRAGMENT,typeCondition:n?this.parseNamedType():void 0,directives:this.parseDirectives(!1),selectionSet:this.parseSelectionSet(),loc:this.loc(e)}},n.parseFragmentDefinition=function(){var e,n=this._lexer.token;return this.expectKeyword("fragment"),!0===(null===(e=this._options)||void 0===e?void 0:e.experimentalFragmentVariables)?{kind:A.FRAGMENT_DEFINITION,name:this.parseFragmentName(),variableDefinitions:this.parseVariableDefinitions(),typeCondition:(this.expectKeyword("on"),this.parseNamedType()),directives:this.parseDirectives(!1),selectionSet:this.parseSelectionSet(),loc:this.loc(n)}:{kind:A.FRAGMENT_DEFINITION,name:this.parseFragmentName(),typeCondition:(this.expectKeyword("on"),this.parseNamedType()),directives:this.parseDirectives(!1),selectionSet:this.parseSelectionSet(),loc:this.loc(n)}},n.parseFragmentName=function(){if("on"===this._lexer.token.value)throw this.unexpected();return this.parseName()},n.parseValueLiteral=function(e){var n=this._lexer.token;switch(n.kind){case V.BRACKET_L:return this.parseList(e);case V.BRACE_L:return this.parseObject(e);case V.INT:return this._lexer.advance(),{kind:A.INT,value:n.value,loc:this.loc(n)};case V.FLOAT:return this._lexer.advance(),{kind:A.FLOAT,value:n.value,loc:this.loc(n)};case V.STRING:case V.BLOCK_STRING:return this.parseStringLiteral();case V.NAME:switch(this._lexer.advance(),n.value){case"true":return{kind:A.BOOLEAN,value:!0,loc:this.loc(n)};case"false":return{kind:A.BOOLEAN,value:!1,loc:this.loc(n)};case"null":return{kind:A.NULL,loc:this.loc(n)};default:return{kind:A.ENUM,value:n.value,loc:this.loc(n)}}case V.DOLLAR:if(!e)return this.parseVariable()}throw this.unexpected()},n.parseStringLiteral=function(){var e=this._lexer.token;return this._lexer.advance(),{kind:A.STRING,value:e.value,block:e.kind===V.BLOCK_STRING,loc:this.loc(e)}},n.parseList=function(e){var n=this,t=this._lexer.token;return{kind:A.LIST,values:this.any(V.BRACKET_L,(function(){return n.parseValueLiteral(e)}),V.BRACKET_R),loc:this.loc(t)}},n.parseObject=function(e){var n=this,t=this._lexer.token;return{kind:A.OBJECT,fields:this.any(V.BRACE_L,(function(){return n.parseObjectField(e)}),V.BRACE_R),loc:this.loc(t)}},n.parseObjectField=function(e){var n=this._lexer.token,t=this.parseName();return this.expectToken(V.COLON),{kind:A.OBJECT_FIELD,name:t,value:this.parseValueLiteral(e),loc:this.loc(n)}},n.parseDirectives=function(e){for(var n=[];this.peek(V.AT);)n.push(this.parseDirective(e));return n},n.parseDirective=function(e){var n=this._lexer.token;return this.expectToken(V.AT),{kind:A.DIRECTIVE,name:this.parseName(),arguments:this.parseArguments(e),loc:this.loc(n)}},n.parseTypeReference=function(){var e,n=this._lexer.token;return this.expectOptionalToken(V.BRACKET_L)?(e=this.parseTypeReference(),this.expectToken(V.BRACKET_R),e={kind:A.LIST_TYPE,type:e,loc:this.loc(n)}):e=this.parseNamedType(),this.expectOptionalToken(V.BANG)?{kind:A.NON_NULL_TYPE,type:e,loc:this.loc(n)}:e},n.parseNamedType=function(){var e=this._lexer.token;return{kind:A.NAMED_TYPE,name:this.parseName(),loc:this.loc(e)}},n.parseTypeSystemDefinition=function(){var e=this.peekDescription()?this._lexer.lookahead():this._lexer.token;if(e.kind===V.NAME)switch(e.value){case"schema":return this.parseSchemaDefinition();case"scalar":return this.parseScalarTypeDefinition();case"type":return this.parseObjectTypeDefinition();case"interface":return this.parseInterfaceTypeDefinition();case"union":return this.parseUnionTypeDefinition();case"enum":return this.parseEnumTypeDefinition();case"input":return this.parseInputObjectTypeDefinition();case"directive":return this.parseDirectiveDefinition()}throw this.unexpected(e)},n.peekDescription=function(){return this.peek(V.STRING)||this.peek(V.BLOCK_STRING)},n.parseDescription=function(){if(this.peekDescription())return this.parseStringLiteral()},n.parseSchemaDefinition=function(){var e=this._lexer.token,n=this.parseDescription();this.expectKeyword("schema");var t=this.parseDirectives(!0),r=this.many(V.BRACE_L,this.parseOperationTypeDefinition,V.BRACE_R);return{kind:A.SCHEMA_DEFINITION,description:n,directives:t,operationTypes:r,loc:this.loc(e)}},n.parseOperationTypeDefinition=function(){var e=this._lexer.token,n=this.parseOperationType();this.expectToken(V.COLON);var t=this.parseNamedType();return{kind:A.OPERATION_TYPE_DEFINITION,operation:n,type:t,loc:this.loc(e)}},n.parseScalarTypeDefinition=function(){var e=this._lexer.token,n=this.parseDescription();this.expectKeyword("scalar");var t=this.parseName(),r=this.parseDirectives(!0);return{kind:A.SCALAR_TYPE_DEFINITION,description:n,name:t,directives:r,loc:this.loc(e)}},n.parseObjectTypeDefinition=function(){var e=this._lexer.token,n=this.parseDescription();this.expectKeyword("type");var t=this.parseName(),r=this.parseImplementsInterfaces(),i=this.parseDirectives(!0),a=this.parseFieldsDefinition();return{kind:A.OBJECT_TYPE_DEFINITION,description:n,name:t,interfaces:r,directives:i,fields:a,loc:this.loc(e)}},n.parseImplementsInterfaces=function(){var e;if(!this.expectOptionalKeyword("implements"))return[];if(!0===(null===(e=this._options)||void 0===e?void 0:e.allowLegacySDLImplementsInterfaces)){var n=[];this.expectOptionalToken(V.AMP);do{n.push(this.parseNamedType())}while(this.expectOptionalToken(V.AMP)||this.peek(V.NAME));return n}return this.delimitedMany(V.AMP,this.parseNamedType)},n.parseFieldsDefinition=function(){var e;return!0===(null===(e=this._options)||void 0===e?void 0:e.allowLegacySDLEmptyFields)&&this.peek(V.BRACE_L)&&this._lexer.lookahead().kind===V.BRACE_R?(this._lexer.advance(),this._lexer.advance(),[]):this.optionalMany(V.BRACE_L,this.parseFieldDefinition,V.BRACE_R)},n.parseFieldDefinition=function(){var e=this._lexer.token,n=this.parseDescription(),t=this.parseName(),r=this.parseArgumentDefs();this.expectToken(V.COLON);var i=this.parseTypeReference(),a=this.parseDirectives(!0);return{kind:A.FIELD_DEFINITION,description:n,name:t,arguments:r,type:i,directives:a,loc:this.loc(e)}},n.parseArgumentDefs=function(){return this.optionalMany(V.PAREN_L,this.parseInputValueDef,V.PAREN_R)},n.parseInputValueDef=function(){var e=this._lexer.token,n=this.parseDescription(),t=this.parseName();this.expectToken(V.COLON);var r,i=this.parseTypeReference();this.expectOptionalToken(V.EQUALS)&&(r=this.parseValueLiteral(!0));var a=this.parseDirectives(!0);return{kind:A.INPUT_VALUE_DEFINITION,description:n,name:t,type:i,defaultValue:r,directives:a,loc:this.loc(e)}},n.parseInterfaceTypeDefinition=function(){var e=this._lexer.token,n=this.parseDescription();this.expectKeyword("interface");var t=this.parseName(),r=this.parseImplementsInterfaces(),i=this.parseDirectives(!0),a=this.parseFieldsDefinition();return{kind:A.INTERFACE_TYPE_DEFINITION,description:n,name:t,interfaces:r,directives:i,fields:a,loc:this.loc(e)}},n.parseUnionTypeDefinition=function(){var e=this._lexer.token,n=this.parseDescription();this.expectKeyword("union");var t=this.parseName(),r=this.parseDirectives(!0),i=this.parseUnionMemberTypes();return{kind:A.UNION_TYPE_DEFINITION,description:n,name:t,directives:r,types:i,loc:this.loc(e)}},n.parseUnionMemberTypes=function(){return this.expectOptionalToken(V.EQUALS)?this.delimitedMany(V.PIPE,this.parseNamedType):[]},n.parseEnumTypeDefinition=function(){var e=this._lexer.token,n=this.parseDescription();this.expectKeyword("enum");var t=this.parseName(),r=this.parseDirectives(!0),i=this.parseEnumValuesDefinition();return{kind:A.ENUM_TYPE_DEFINITION,description:n,name:t,directives:r,values:i,loc:this.loc(e)}},n.parseEnumValuesDefinition=function(){return this.optionalMany(V.BRACE_L,this.parseEnumValueDefinition,V.BRACE_R)},n.parseEnumValueDefinition=function(){var e=this._lexer.token,n=this.parseDescription(),t=this.parseName(),r=this.parseDirectives(!0);return{kind:A.ENUM_VALUE_DEFINITION,description:n,name:t,directives:r,loc:this.loc(e)}},n.parseInputObjectTypeDefinition=function(){var e=this._lexer.token,n=this.parseDescription();this.expectKeyword("input");var t=this.parseName(),r=this.parseDirectives(!0),i=this.parseInputFieldsDefinition();return{kind:A.INPUT_OBJECT_TYPE_DEFINITION,description:n,name:t,directives:r,fields:i,loc:this.loc(e)}},n.parseInputFieldsDefinition=function(){return this.optionalMany(V.BRACE_L,this.parseInputValueDef,V.BRACE_R)},n.parseTypeSystemExtension=function(){var e=this._lexer.lookahead();if(e.kind===V.NAME)switch(e.value){case"schema":return this.parseSchemaExtension();case"scalar":return this.parseScalarTypeExtension();case"type":return this.parseObjectTypeExtension();case"interface":return this.parseInterfaceTypeExtension();case"union":return this.parseUnionTypeExtension();case"enum":return this.parseEnumTypeExtension();case"input":return this.parseInputObjectTypeExtension()}throw this.unexpected(e)},n.parseSchemaExtension=function(){var e=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("schema");var n=this.parseDirectives(!0),t=this.optionalMany(V.BRACE_L,this.parseOperationTypeDefinition,V.BRACE_R);if(0===n.length&&0===t.length)throw this.unexpected();return{kind:A.SCHEMA_EXTENSION,directives:n,operationTypes:t,loc:this.loc(e)}},n.parseScalarTypeExtension=function(){var e=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("scalar");var n=this.parseName(),t=this.parseDirectives(!0);if(0===t.length)throw this.unexpected();return{kind:A.SCALAR_TYPE_EXTENSION,name:n,directives:t,loc:this.loc(e)}},n.parseObjectTypeExtension=function(){var e=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("type");var n=this.parseName(),t=this.parseImplementsInterfaces(),r=this.parseDirectives(!0),i=this.parseFieldsDefinition();if(0===t.length&&0===r.length&&0===i.length)throw this.unexpected();return{kind:A.OBJECT_TYPE_EXTENSION,name:n,interfaces:t,directives:r,fields:i,loc:this.loc(e)}},n.parseInterfaceTypeExtension=function(){var e=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("interface");var n=this.parseName(),t=this.parseImplementsInterfaces(),r=this.parseDirectives(!0),i=this.parseFieldsDefinition();if(0===t.length&&0===r.length&&0===i.length)throw this.unexpected();return{kind:A.INTERFACE_TYPE_EXTENSION,name:n,interfaces:t,directives:r,fields:i,loc:this.loc(e)}},n.parseUnionTypeExtension=function(){var e=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("union");var n=this.parseName(),t=this.parseDirectives(!0),r=this.parseUnionMemberTypes();if(0===t.length&&0===r.length)throw this.unexpected();return{kind:A.UNION_TYPE_EXTENSION,name:n,directives:t,types:r,loc:this.loc(e)}},n.parseEnumTypeExtension=function(){var e=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("enum");var n=this.parseName(),t=this.parseDirectives(!0),r=this.parseEnumValuesDefinition();if(0===t.length&&0===r.length)throw this.unexpected();return{kind:A.ENUM_TYPE_EXTENSION,name:n,directives:t,values:r,loc:this.loc(e)}},n.parseInputObjectTypeExtension=function(){var e=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("input");var n=this.parseName(),t=this.parseDirectives(!0),r=this.parseInputFieldsDefinition();if(0===t.length&&0===r.length)throw this.unexpected();return{kind:A.INPUT_OBJECT_TYPE_EXTENSION,name:n,directives:t,fields:r,loc:this.loc(e)}},n.parseDirectiveDefinition=function(){var e=this._lexer.token,n=this.parseDescription();this.expectKeyword("directive"),this.expectToken(V.AT);var t=this.parseName(),r=this.parseArgumentDefs(),i=this.expectOptionalKeyword("repeatable");this.expectKeyword("on");var a=this.parseDirectiveLocations();return{kind:A.DIRECTIVE_DEFINITION,description:n,name:t,arguments:r,repeatable:i,locations:a,loc:this.loc(e)}},n.parseDirectiveLocations=function(){return this.delimitedMany(V.PIPE,this.parseDirectiveLocation)},n.parseDirectiveLocation=function(){var e=this._lexer.token,n=this.parseName();if(void 0!==Q[n.value])return n;throw this.unexpected(e)},n.loc=function(e){var n;if(!0!==(null===(n=this._options)||void 0===n?void 0:n.noLocation))return new x(e,this._lexer.lastToken,this._lexer.source)},n.peek=function(e){return this._lexer.token.kind===e},n.expectToken=function(e){var n=this._lexer.token;if(n.kind===e)return this._lexer.advance(),n;throw w(this._lexer.source,n.start,"Expected ".concat(fe(e),", found ").concat(pe(n),"."))},n.expectOptionalToken=function(e){var n=this._lexer.token;if(n.kind===e)return this._lexer.advance(),n},n.expectKeyword=function(e){var n=this._lexer.token;if(n.kind!==V.NAME||n.value!==e)throw w(this._lexer.source,n.start,'Expected "'.concat(e,'", found ').concat(pe(n),"."));this._lexer.advance()},n.expectOptionalKeyword=function(e){var n=this._lexer.token;return n.kind===V.NAME&&n.value===e&&(this._lexer.advance(),!0)},n.unexpected=function(e){var n=null!=e?e:this._lexer.token;return w(this._lexer.source,n.start,"Unexpected ".concat(pe(n),"."))},n.any=function(e,n,t){this.expectToken(e);for(var r=[];!this.expectOptionalToken(t);)r.push(n.call(this));return r},n.optionalMany=function(e,n,t){if(this.expectOptionalToken(e)){var r=[];do{r.push(n.call(this))}while(!this.expectOptionalToken(t));return r}return[]},n.many=function(e,n,t){this.expectToken(e);var r=[];do{r.push(n.call(this))}while(!this.expectOptionalToken(t));return r},n.delimitedMany=function(e,n){this.expectOptionalToken(e);var t=[];do{t.push(n.call(this))}while(this.expectOptionalToken(e));return t},e}();function pe(e){var n=e.value;return fe(e.kind)+(null!=n?' "'.concat(n,'"'):"")}function fe(e){return z(e)?'"'.concat(e,'"'):e}var de={Name:[],Document:["definitions"],OperationDefinition:["name","variableDefinitions","directives","selectionSet"],VariableDefinition:["variable","type","defaultValue","directives"],Variable:["name"],SelectionSet:["selections"],Field:["alias","name","arguments","directives","selectionSet"],Argument:["name","value"],FragmentSpread:["name","directives"],InlineFragment:["typeCondition","directives","selectionSet"],FragmentDefinition:["name","variableDefinitions","typeCondition","directives","selectionSet"],IntValue:[],FloatValue:[],StringValue:[],BooleanValue:[],NullValue:[],EnumValue:[],ListValue:["values"],ObjectValue:["fields"],ObjectField:["name","value"],Directive:["name","arguments"],NamedType:["name"],ListType:["type"],NonNullType:["type"],SchemaDefinition:["description","directives","operationTypes"],OperationTypeDefinition:["type"],ScalarTypeDefinition:["description","name","directives"],ObjectTypeDefinition:["description","name","interfaces","directives","fields"],FieldDefinition:["description","name","arguments","type","directives"],InputValueDefinition:["description","name","type","defaultValue","directives"],InterfaceTypeDefinition:["description","name","interfaces","directives","fields"],UnionTypeDefinition:["description","name","directives","types"],EnumTypeDefinition:["description","name","directives","values"],EnumValueDefinition:["description","name","directives"],InputObjectTypeDefinition:["description","name","directives","fields"],DirectiveDefinition:["description","name","arguments","locations"],SchemaExtension:["directives","operationTypes"],ScalarTypeExtension:["name","directives"],ObjectTypeExtension:["name","interfaces","directives","fields"],InterfaceTypeExtension:["name","interfaces","directives","fields"],UnionTypeExtension:["name","directives","types"],EnumTypeExtension:["name","directives","values"],InputObjectTypeExtension:["name","directives","fields"]},ve=Object.freeze({});function he(e,n){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:de,r=void 0,i=Array.isArray(e),a=[e],o=-1,c=[],s=void 0,u=void 0,l=void 0,p=[],f=[],d=e;do{var v=++o===a.length,h=v&&0!==c.length;if(v){if(u=0===f.length?void 0:p[p.length-1],s=l,l=f.pop(),h){if(i)s=s.slice();else{for(var y={},m=0,E=Object.keys(s);m<E.length;m++){var T=E[m];y[T]=s[T]}s=y}for(var g=0,N=0;N<c.length;N++){var I=c[N][0],b=c[N][1];i&&(I-=g),i&&null===b?(s.splice(I,1),g++):s[I]=b}}o=r.index,a=r.keys,c=r.edits,i=r.inArray,r=r.prev}else{if(u=l?i?o:a[o]:void 0,null==(s=l?l[u]:d))continue;l&&p.push(u)}var _,O=void 0;if(!Array.isArray(s)){if(!L(s))throw new Error("Invalid AST Node: ".concat(C(s),"."));var D=me(n,s.kind,v);if(D){if((O=D.call(n,s,u,l,p,f))===ve)break;if(!1===O){if(!v){p.pop();continue}}else if(void 0!==O&&(c.push([u,O]),!v)){if(!L(O)){p.pop();continue}s=O}}}void 0===O&&h&&c.push([u,s]),v?p.pop():(r={inArray:i,index:o,keys:a,edits:c,prev:r},a=(i=Array.isArray(s))?s:null!==(_=t[s.kind])&&void 0!==_?_:[],o=-1,c=[],l&&f.push(l),l=s)}while(void 0!==r);return 0!==c.length&&(d=c[c.length-1][1]),d}function ye(e){var n=new Array(e.length);return{enter:function(t){for(var r=0;r<e.length;r++)if(null==n[r]){var i=me(e[r],t.kind,!1);if(i){var a=i.apply(e[r],arguments);if(!1===a)n[r]=t;else if(a===ve)n[r]=ve;else if(void 0!==a)return a}}},leave:function(t){for(var r=0;r<e.length;r++)if(null==n[r]){var i=me(e[r],t.kind,!0);if(i){var a=i.apply(e[r],arguments);if(a===ve)n[r]=ve;else if(void 0!==a&&!1!==a)return a}}else n[r]===t&&(n[r]=null)}}}function me(e,n,t){var r=e[n];if(r){if(!t&&"function"==typeof r)return r;var i=t?r.leave:r.enter;if("function"==typeof i)return i}else{var a=t?e.leave:e.enter;if(a){if("function"==typeof a)return a;var o=a[n];if("function"==typeof o)return o}}}const Ee=Array.prototype.find?function(e,n){return Array.prototype.find.call(e,n)}:function(e,n){for(var t=0;t<e.length;t++){var r=e[t];if(n(r))return r}},Te=Object.values||function(e){return Object.keys(e).map((function(n){return e[n]}))};function ge(e,n,t){var r,i=e instanceof Error?e:new Error("Unexpected error value: "+C(e));return Array.isArray(i.path)?i:new O(i.message,null!==(r=i.nodes)&&void 0!==r?r:n,i.source,i.positions,t,i)}var Ne=/^[_a-zA-Z][_a-zA-Z0-9]*$/;function Ie(e){var n=be(e);if(n)throw n;return e}function be(e){return"string"==typeof e||U(0,"Expected name to be a string."),e.length>1&&"_"===e[0]&&"_"===e[1]?new O('Name "'.concat(e,'" must not begin with "__", which is reserved by GraphQL introspection.')):Ne.test(e)?void 0:new O('Names must match /^[_a-zA-Z][_a-zA-Z0-9]*$/ but "'.concat(e,'" does not.'))}const _e=Object.entries||function(e){return Object.keys(e).map((function(n){return[n,e[n]]}))};function Oe(e,n){return e.reduce((function(e,t){return e[n(t)]=t,e}),Object.create(null))}function De(e,n){for(var t=Object.create(null),r=0,i=_e(e);r<i.length;r++){var a=i[r],o=a[0],c=a[1];t[o]=n(c,o)}return t}function we(e){if(null===Object.getPrototypeOf(e))return e;for(var n=Object.create(null),t=0,r=_e(e);t<r.length;t++){var i=r[t],a=i[0],o=i[1];n[a]=o}return n}function Ae(e,n,t){return e.reduce((function(e,r){return e[n(r)]=t(r),e}),Object.create(null))}function Se(e,n){var t="string"==typeof e?[e,n]:[void 0,e],r=t[0],i=" Did you mean ";r&&(i+=r+" ");var a=t[1].map((function(e){return'"'.concat(e,'"')}));switch(a.length){case 0:return"";case 1:return i+a[0]+"?";case 2:return i+a[0]+" or "+a[1]+"?"}var o=a.slice(0,5),c=o.pop();return i+o.join(", ")+", or "+c+"?"}function Re(e){return e}function ke(e,n){for(var t=0,r=0;t<e.length&&r<n.length;){var i=e.charCodeAt(t),a=n.charCodeAt(r);if(Fe(i)&&Fe(a)){var o=0;do{++t,o=10*o+i-xe,i=e.charCodeAt(t)}while(Fe(i)&&o>0);var c=0;do{++r,c=10*c+a-xe,a=n.charCodeAt(r)}while(Fe(a)&&c>0);if(o<c)return-1;if(o>c)return 1}else{if(i<a)return-1;if(i>a)return 1;++t,++r}}return e.length-n.length}var xe=48;function Fe(e){return!isNaN(e)&&xe<=e&&e<=57}function Le(e,n){for(var t=Object.create(null),r=new Ve(e),i=Math.floor(.4*e.length)+1,a=0;a<n.length;a++){var o=n[a],c=r.measure(o,i);void 0!==c&&(t[o]=c)}return Object.keys(t).sort((function(e,n){var r=t[e]-t[n];return 0!==r?r:ke(e,n)}))}var Ve=function(){function e(e){this._input=e,this._inputLowerCase=e.toLowerCase(),this._inputArray=je(this._inputLowerCase),this._rows=[new Array(e.length+1).fill(0),new Array(e.length+1).fill(0),new Array(e.length+1).fill(0)]}return e.prototype.measure=function(e,n){if(this._input===e)return 0;var t=e.toLowerCase();if(this._inputLowerCase===t)return 1;var r=je(t),i=this._inputArray;if(r.length<i.length){var a=r;r=i,i=a}var o=r.length,c=i.length;if(!(o-c>n)){for(var s=this._rows,u=0;u<=c;u++)s[0][u]=u;for(var l=1;l<=o;l++){for(var p=s[(l-1)%3],f=s[l%3],d=f[0]=l,v=1;v<=c;v++){var h=r[l-1]===i[v-1]?0:1,y=Math.min(p[v]+1,f[v-1]+1,p[v-1]+h);if(l>1&&v>1&&r[l-1]===i[v-2]&&r[l-2]===i[v-1]){var m=s[(l-2)%3][v-2];y=Math.min(y,m+1)}y<d&&(d=y),f[v]=y}if(d>n)return}var E=s[o%3][c];return E<=n?E:void 0}},e}();function je(e){for(var n=e.length,t=new Array(n),r=0;r<n;++r)t[r]=e.charCodeAt(r);return t}function Ce(e){return he(e,{leave:Pe})}var Pe={Name:function(e){return e.value},Variable:function(e){return"$"+e.name},Document:function(e){return Me(e.definitions,"\n\n")+"\n"},OperationDefinition:function(e){var n=e.operation,t=e.name,r=Ge("(",Me(e.variableDefinitions,", "),")"),i=Me(e.directives," "),a=e.selectionSet;return t||i||r||"query"!==n?Me([n,Me([t,r]),i,a]," "):a},VariableDefinition:function(e){var n=e.variable,t=e.type,r=e.defaultValue,i=e.directives;return n+": "+t+Ge(" = ",r)+Ge(" ",Me(i," "))},SelectionSet:function(e){return Be(e.selections)},Field:function(e){var n=e.alias,t=e.name,r=e.arguments,i=e.directives,a=e.selectionSet,o=Ge("",n,": ")+t,c=o+Ge("(",Me(r,", "),")");return c.length>80&&(c=o+Ge("(\n",Ye(Me(r,"\n")),"\n)")),Me([c,Me(i," "),a]," ")},Argument:function(e){return e.name+": "+e.value},FragmentSpread:function(e){return"..."+e.name+Ge(" ",Me(e.directives," "))},InlineFragment:function(e){var n=e.typeCondition,t=e.directives,r=e.selectionSet;return Me(["...",Ge("on ",n),Me(t," "),r]," ")},FragmentDefinition:function(e){var n=e.name,t=e.typeCondition,r=e.variableDefinitions,i=e.directives,a=e.selectionSet;return"fragment ".concat(n).concat(Ge("(",Me(r,", "),")")," ")+"on ".concat(t," ").concat(Ge("",Me(i," ")," "))+a},IntValue:function(e){return e.value},FloatValue:function(e){return e.value},StringValue:function(e,n){var t=e.value;return e.block?X(t,"description"===n?"":"  "):JSON.stringify(t)},BooleanValue:function(e){return e.value?"true":"false"},NullValue:function(){return"null"},EnumValue:function(e){return e.value},ListValue:function(e){return"["+Me(e.values,", ")+"]"},ObjectValue:function(e){return"{"+Me(e.fields,", ")+"}"},ObjectField:function(e){return e.name+": "+e.value},Directive:function(e){return"@"+e.name+Ge("(",Me(e.arguments,", "),")")},NamedType:function(e){return e.name},ListType:function(e){return"["+e.type+"]"},NonNullType:function(e){return e.type+"!"},SchemaDefinition:Ue((function(e){var n=e.directives,t=e.operationTypes;return Me(["schema",Me(n," "),Be(t)]," ")})),OperationTypeDefinition:function(e){return e.operation+": "+e.type},ScalarTypeDefinition:Ue((function(e){return Me(["scalar",e.name,Me(e.directives," ")]," ")})),ObjectTypeDefinition:Ue((function(e){var n=e.name,t=e.interfaces,r=e.directives,i=e.fields;return Me(["type",n,Ge("implements ",Me(t," & ")),Me(r," "),Be(i)]," ")})),FieldDefinition:Ue((function(e){var n=e.name,t=e.arguments,r=e.type,i=e.directives;return n+(qe(t)?Ge("(\n",Ye(Me(t,"\n")),"\n)"):Ge("(",Me(t,", "),")"))+": "+r+Ge(" ",Me(i," "))})),InputValueDefinition:Ue((function(e){var n=e.name,t=e.type,r=e.defaultValue,i=e.directives;return Me([n+": "+t,Ge("= ",r),Me(i," ")]," ")})),InterfaceTypeDefinition:Ue((function(e){var n=e.name,t=e.interfaces,r=e.directives,i=e.fields;return Me(["interface",n,Ge("implements ",Me(t," & ")),Me(r," "),Be(i)]," ")})),UnionTypeDefinition:Ue((function(e){var n=e.name,t=e.directives,r=e.types;return Me(["union",n,Me(t," "),r&&0!==r.length?"= "+Me(r," | "):""]," ")})),EnumTypeDefinition:Ue((function(e){var n=e.name,t=e.directives,r=e.values;return Me(["enum",n,Me(t," "),Be(r)]," ")})),EnumValueDefinition:Ue((function(e){return Me([e.name,Me(e.directives," ")]," ")})),InputObjectTypeDefinition:Ue((function(e){var n=e.name,t=e.directives,r=e.fields;return Me(["input",n,Me(t," "),Be(r)]," ")})),DirectiveDefinition:Ue((function(e){var n=e.name,t=e.arguments,r=e.repeatable,i=e.locations;return"directive @"+n+(qe(t)?Ge("(\n",Ye(Me(t,"\n")),"\n)"):Ge("(",Me(t,", "),")"))+(r?" repeatable":"")+" on "+Me(i," | ")})),SchemaExtension:function(e){var n=e.directives,t=e.operationTypes;return Me(["extend schema",Me(n," "),Be(t)]," ")},ScalarTypeExtension:function(e){return Me(["extend scalar",e.name,Me(e.directives," ")]," ")},ObjectTypeExtension:function(e){var n=e.name,t=e.interfaces,r=e.directives,i=e.fields;return Me(["extend type",n,Ge("implements ",Me(t," & ")),Me(r," "),Be(i)]," ")},InterfaceTypeExtension:function(e){var n=e.name,t=e.interfaces,r=e.directives,i=e.fields;return Me(["extend interface",n,Ge("implements ",Me(t," & ")),Me(r," "),Be(i)]," ")},UnionTypeExtension:function(e){var n=e.name,t=e.directives,r=e.types;return Me(["extend union",n,Me(t," "),r&&0!==r.length?"= "+Me(r," | "):""]," ")},EnumTypeExtension:function(e){var n=e.name,t=e.directives,r=e.values;return Me(["extend enum",n,Me(t," "),Be(r)]," ")},InputObjectTypeExtension:function(e){var n=e.name,t=e.directives,r=e.fields;return Me(["extend input",n,Me(t," "),Be(r)]," ")}};function Ue(e){return function(n){return Me([n.description,e(n)],"\n")}}function Me(e){var n,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";return null!==(n=null==e?void 0:e.filter((function(e){return e})).join(t))&&void 0!==n?n:""}function Be(e){return Ge("{\n",Ye(Me(e,"\n")),"\n}")}function Ge(e,n){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"";return null!=n&&""!==n?e+n+t:""}function Ye(e){return Ge("  ",e.replace(/\n/g,"\n  "))}function Qe(e){return-1!==e.indexOf("\n")}function qe(e){return null!=e&&e.some(Qe)}function Je(e,n){switch(e.kind){case A.NULL:return null;case A.INT:return parseInt(e.value,10);case A.FLOAT:return parseFloat(e.value);case A.STRING:case A.ENUM:case A.BOOLEAN:return e.value;case A.LIST:return e.values.map((function(e){return Je(e,n)}));case A.OBJECT:return Ae(e.fields,(function(e){return e.name.value}),(function(e){return Je(e.value,n)}));case A.VARIABLE:return null==n?void 0:n[e.name.value]}S(0,"Unexpected value node: "+C(e))}function Ke(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Xe(e,n,t){return n&&Ke(e.prototype,n),t&&Ke(e,t),e}function He(e){return $e(e)||Ze(e)||nn(e)||rn(e)||on(e)||sn(e)||ln(e)||fn(e)}function ze(e){if(!He(e))throw new Error("Expected ".concat(C(e)," to be a GraphQL type."));return e}function $e(e){return M(e,jn)}function We(e){if(!$e(e))throw new Error("Expected ".concat(C(e)," to be a GraphQL Scalar type."));return e}function Ze(e){return M(e,Cn)}function en(e){if(!Ze(e))throw new Error("Expected ".concat(C(e)," to be a GraphQL Object type."));return e}function nn(e){return M(e,Qn)}function tn(e){if(!nn(e))throw new Error("Expected ".concat(C(e)," to be a GraphQL Interface type."));return e}function rn(e){return M(e,qn)}function an(e){if(!rn(e))throw new Error("Expected ".concat(C(e)," to be a GraphQL Union type."));return e}function on(e){return M(e,Kn)}function cn(e){if(!on(e))throw new Error("Expected ".concat(C(e)," to be a GraphQL Enum type."));return e}function sn(e){return M(e,Hn)}function un(e){if(!sn(e))throw new Error("Expected ".concat(C(e)," to be a GraphQL Input Object type."));return e}function ln(e){return M(e,_n)}function pn(e){if(!ln(e))throw new Error("Expected ".concat(C(e)," to be a GraphQL List type."));return e}function fn(e){return M(e,On)}function dn(e){if(!fn(e))throw new Error("Expected ".concat(C(e)," to be a GraphQL Non-Null type."));return e}function vn(e){return $e(e)||on(e)||sn(e)||Dn(e)&&vn(e.ofType)}function hn(e){if(!vn(e))throw new Error("Expected ".concat(C(e)," to be a GraphQL input type."));return e}function yn(e){return $e(e)||Ze(e)||nn(e)||rn(e)||on(e)||Dn(e)&&yn(e.ofType)}function mn(e){if(!yn(e))throw new Error("Expected ".concat(C(e)," to be a GraphQL output type."));return e}function En(e){return $e(e)||on(e)}function Tn(e){if(!En(e))throw new Error("Expected ".concat(C(e)," to be a GraphQL leaf type."));return e}function gn(e){return Ze(e)||nn(e)||rn(e)}function Nn(e){if(!gn(e))throw new Error("Expected ".concat(C(e)," to be a GraphQL composite type."));return e}function In(e){return nn(e)||rn(e)}function bn(e){if(!In(e))throw new Error("Expected ".concat(C(e)," to be a GraphQL abstract type."));return e}function _n(e){if(!(this instanceof _n))return new _n(e);this.ofType=ze(e)}function On(e){if(!(this instanceof On))return new On(e);this.ofType=Sn(e)}function Dn(e){return ln(e)||fn(e)}function wn(e){if(!Dn(e))throw new Error("Expected ".concat(C(e)," to be a GraphQL wrapping type."));return e}function An(e){return He(e)&&!fn(e)}function Sn(e){if(!An(e))throw new Error("Expected ".concat(C(e)," to be a GraphQL nullable type."));return e}function Rn(e){if(e)return fn(e)?e.ofType:e}function kn(e){return $e(e)||Ze(e)||nn(e)||rn(e)||on(e)||sn(e)}function xn(e){if(!kn(e))throw new Error("Expected ".concat(C(e)," to be a GraphQL named type."));return e}function Fn(e){if(e){for(var n=e;Dn(n);)n=n.ofType;return n}}function Ln(e){return"function"==typeof e?e():e}function Vn(e){return e&&e.length>0?e:void 0}_n.prototype.toString=function(){return"["+String(this.ofType)+"]"},_n.prototype.toJSON=function(){return this.toString()},Object.defineProperty(_n.prototype,l,{get:function(){return"GraphQLList"}}),k(_n),On.prototype.toString=function(){return String(this.ofType)+"!"},On.prototype.toJSON=function(){return this.toString()},Object.defineProperty(On.prototype,l,{get:function(){return"GraphQLNonNull"}}),k(On);var jn=function(){function e(e){var n,t,r,i=null!==(n=e.parseValue)&&void 0!==n?n:Re;this.name=e.name,this.description=e.description,this.specifiedByUrl=e.specifiedByUrl,this.serialize=null!==(t=e.serialize)&&void 0!==t?t:Re,this.parseValue=i,this.parseLiteral=null!==(r=e.parseLiteral)&&void 0!==r?r:function(e,n){return i(Je(e,n))},this.extensions=e.extensions&&we(e.extensions),this.astNode=e.astNode,this.extensionASTNodes=Vn(e.extensionASTNodes),"string"==typeof e.name||U(0,"Must provide name."),null==e.specifiedByUrl||"string"==typeof e.specifiedByUrl||U(0,"".concat(this.name,' must provide "specifiedByUrl" as a string, ')+"but got: ".concat(C(e.specifiedByUrl),".")),null==e.serialize||"function"==typeof e.serialize||U(0,"".concat(this.name,' must provide "serialize" function. If this custom Scalar is also used as an input type, ensure "parseValue" and "parseLiteral" functions are also provided.')),e.parseLiteral&&("function"==typeof e.parseValue&&"function"==typeof e.parseLiteral||U(0,"".concat(this.name,' must provide both "parseValue" and "parseLiteral" functions.')))}var n=e.prototype;return n.toConfig=function(){var e;return{name:this.name,description:this.description,specifiedByUrl:this.specifiedByUrl,serialize:this.serialize,parseValue:this.parseValue,parseLiteral:this.parseLiteral,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:null!==(e=this.extensionASTNodes)&&void 0!==e?e:[]}},n.toString=function(){return this.name},n.toJSON=function(){return this.toString()},Xe(e,[{key:l,get:function(){return"GraphQLScalarType"}}]),e}();k(jn);var Cn=function(){function e(e){this.name=e.name,this.description=e.description,this.isTypeOf=e.isTypeOf,this.extensions=e.extensions&&we(e.extensions),this.astNode=e.astNode,this.extensionASTNodes=Vn(e.extensionASTNodes),this._fields=Un.bind(void 0,e),this._interfaces=Pn.bind(void 0,e),"string"==typeof e.name||U(0,"Must provide name."),null==e.isTypeOf||"function"==typeof e.isTypeOf||U(0,"".concat(this.name,' must provide "isTypeOf" as a function, ')+"but got: ".concat(C(e.isTypeOf),"."))}var n=e.prototype;return n.getFields=function(){return"function"==typeof this._fields&&(this._fields=this._fields()),this._fields},n.getInterfaces=function(){return"function"==typeof this._interfaces&&(this._interfaces=this._interfaces()),this._interfaces},n.toConfig=function(){return{name:this.name,description:this.description,interfaces:this.getInterfaces(),fields:Bn(this.getFields()),isTypeOf:this.isTypeOf,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes||[]}},n.toString=function(){return this.name},n.toJSON=function(){return this.toString()},Xe(e,[{key:l,get:function(){return"GraphQLObjectType"}}]),e}();function Pn(e){var n,t=null!==(n=Ln(e.interfaces))&&void 0!==n?n:[];return Array.isArray(t)||U(0,"".concat(e.name," interfaces must be an Array or a function which returns an Array.")),t}function Un(e){var n=Ln(e.fields);return Mn(n)||U(0,"".concat(e.name," fields must be an object with field names as keys or a function which returns such an object.")),De(n,(function(n,t){var r;Mn(n)||U(0,"".concat(e.name,".").concat(t," field config must be an object.")),!("isDeprecated"in n)||U(0,"".concat(e.name,".").concat(t,' should provide "deprecationReason" instead of "isDeprecated".')),null==n.resolve||"function"==typeof n.resolve||U(0,"".concat(e.name,".").concat(t," field resolver must be a function if ")+"provided, but got: ".concat(C(n.resolve),"."));var i=null!==(r=n.args)&&void 0!==r?r:{};Mn(i)||U(0,"".concat(e.name,".").concat(t," args must be an object with argument names as keys."));var a=_e(i).map((function(e){var n=e[0],t=e[1];return{name:n,description:t.description,type:t.type,defaultValue:t.defaultValue,deprecationReason:t.deprecationReason,extensions:t.extensions&&we(t.extensions),astNode:t.astNode}}));return{name:t,description:n.description,type:n.type,args:a,resolve:n.resolve,subscribe:n.subscribe,isDeprecated:null!=n.deprecationReason,deprecationReason:n.deprecationReason,extensions:n.extensions&&we(n.extensions),astNode:n.astNode}}))}function Mn(e){return c(e)&&!Array.isArray(e)}function Bn(e){return De(e,(function(e){return{description:e.description,type:e.type,args:Gn(e.args),resolve:e.resolve,subscribe:e.subscribe,deprecationReason:e.deprecationReason,extensions:e.extensions,astNode:e.astNode}}))}function Gn(e){return Ae(e,(function(e){return e.name}),(function(e){return{description:e.description,type:e.type,defaultValue:e.defaultValue,deprecationReason:e.deprecationReason,extensions:e.extensions,astNode:e.astNode}}))}function Yn(e){return fn(e.type)&&void 0===e.defaultValue}k(Cn);var Qn=function(){function e(e){this.name=e.name,this.description=e.description,this.resolveType=e.resolveType,this.extensions=e.extensions&&we(e.extensions),this.astNode=e.astNode,this.extensionASTNodes=Vn(e.extensionASTNodes),this._fields=Un.bind(void 0,e),this._interfaces=Pn.bind(void 0,e),"string"==typeof e.name||U(0,"Must provide name."),null==e.resolveType||"function"==typeof e.resolveType||U(0,"".concat(this.name,' must provide "resolveType" as a function, ')+"but got: ".concat(C(e.resolveType),"."))}var n=e.prototype;return n.getFields=function(){return"function"==typeof this._fields&&(this._fields=this._fields()),this._fields},n.getInterfaces=function(){return"function"==typeof this._interfaces&&(this._interfaces=this._interfaces()),this._interfaces},n.toConfig=function(){var e;return{name:this.name,description:this.description,interfaces:this.getInterfaces(),fields:Bn(this.getFields()),resolveType:this.resolveType,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:null!==(e=this.extensionASTNodes)&&void 0!==e?e:[]}},n.toString=function(){return this.name},n.toJSON=function(){return this.toString()},Xe(e,[{key:l,get:function(){return"GraphQLInterfaceType"}}]),e}();k(Qn);var qn=function(){function e(e){this.name=e.name,this.description=e.description,this.resolveType=e.resolveType,this.extensions=e.extensions&&we(e.extensions),this.astNode=e.astNode,this.extensionASTNodes=Vn(e.extensionASTNodes),this._types=Jn.bind(void 0,e),"string"==typeof e.name||U(0,"Must provide name."),null==e.resolveType||"function"==typeof e.resolveType||U(0,"".concat(this.name,' must provide "resolveType" as a function, ')+"but got: ".concat(C(e.resolveType),"."))}var n=e.prototype;return n.getTypes=function(){return"function"==typeof this._types&&(this._types=this._types()),this._types},n.toConfig=function(){var e;return{name:this.name,description:this.description,types:this.getTypes(),resolveType:this.resolveType,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:null!==(e=this.extensionASTNodes)&&void 0!==e?e:[]}},n.toString=function(){return this.name},n.toJSON=function(){return this.toString()},Xe(e,[{key:l,get:function(){return"GraphQLUnionType"}}]),e}();function Jn(e){var n=Ln(e.types);return Array.isArray(n)||U(0,"Must provide Array of types or a function which returns such an array for Union ".concat(e.name,".")),n}k(qn);var Kn=function(){function e(e){var n,t;this.name=e.name,this.description=e.description,this.extensions=e.extensions&&we(e.extensions),this.astNode=e.astNode,this.extensionASTNodes=Vn(e.extensionASTNodes),this._values=(n=this.name,Mn(t=e.values)||U(0,"".concat(n," values must be an object with value names as keys.")),_e(t).map((function(e){var t=e[0],r=e[1];return Mn(r)||U(0,"".concat(n,".").concat(t,' must refer to an object with a "value" key ')+"representing an internal value but got: ".concat(C(r),".")),!("isDeprecated"in r)||U(0,"".concat(n,".").concat(t,' should provide "deprecationReason" instead of "isDeprecated".')),{name:t,description:r.description,value:void 0!==r.value?r.value:t,isDeprecated:null!=r.deprecationReason,deprecationReason:r.deprecationReason,extensions:r.extensions&&we(r.extensions),astNode:r.astNode}}))),this._valueLookup=new Map(this._values.map((function(e){return[e.value,e]}))),this._nameLookup=Oe(this._values,(function(e){return e.name})),"string"==typeof e.name||U(0,"Must provide name.")}var n=e.prototype;return n.getValues=function(){return this._values},n.getValue=function(e){return this._nameLookup[e]},n.serialize=function(e){var n=this._valueLookup.get(e);if(void 0===n)throw new O('Enum "'.concat(this.name,'" cannot represent value: ').concat(C(e)));return n.name},n.parseValue=function(e){if("string"!=typeof e){var n=C(e);throw new O('Enum "'.concat(this.name,'" cannot represent non-string value: ').concat(n,".")+Xn(this,n))}var t=this.getValue(e);if(null==t)throw new O('Value "'.concat(e,'" does not exist in "').concat(this.name,'" enum.')+Xn(this,e));return t.value},n.parseLiteral=function(e,n){if(e.kind!==A.ENUM){var t=Ce(e);throw new O('Enum "'.concat(this.name,'" cannot represent non-enum value: ').concat(t,".")+Xn(this,t),e)}var r=this.getValue(e.value);if(null==r){var i=Ce(e);throw new O('Value "'.concat(i,'" does not exist in "').concat(this.name,'" enum.')+Xn(this,i),e)}return r.value},n.toConfig=function(){var e,n=Ae(this.getValues(),(function(e){return e.name}),(function(e){return{description:e.description,value:e.value,deprecationReason:e.deprecationReason,extensions:e.extensions,astNode:e.astNode}}));return{name:this.name,description:this.description,values:n,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:null!==(e=this.extensionASTNodes)&&void 0!==e?e:[]}},n.toString=function(){return this.name},n.toJSON=function(){return this.toString()},Xe(e,[{key:l,get:function(){return"GraphQLEnumType"}}]),e}();function Xn(e,n){return Se("the enum value",Le(n,e.getValues().map((function(e){return e.name}))))}k(Kn);var Hn=function(){function e(e){this.name=e.name,this.description=e.description,this.extensions=e.extensions&&we(e.extensions),this.astNode=e.astNode,this.extensionASTNodes=Vn(e.extensionASTNodes),this._fields=zn.bind(void 0,e),"string"==typeof e.name||U(0,"Must provide name.")}var n=e.prototype;return n.getFields=function(){return"function"==typeof this._fields&&(this._fields=this._fields()),this._fields},n.toConfig=function(){var e,n=De(this.getFields(),(function(e){return{description:e.description,type:e.type,defaultValue:e.defaultValue,extensions:e.extensions,astNode:e.astNode}}));return{name:this.name,description:this.description,fields:n,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:null!==(e=this.extensionASTNodes)&&void 0!==e?e:[]}},n.toString=function(){return this.name},n.toJSON=function(){return this.toString()},Xe(e,[{key:l,get:function(){return"GraphQLInputObjectType"}}]),e}();function zn(e){var n=Ln(e.fields);return Mn(n)||U(0,"".concat(e.name," fields must be an object with field names as keys or a function which returns such an object.")),De(n,(function(n,t){return!("resolve"in n)||U(0,"".concat(e.name,".").concat(t," field has a resolve property, but Input Types cannot define resolvers.")),{name:t,description:n.description,type:n.type,defaultValue:n.defaultValue,deprecationReason:n.deprecationReason,extensions:n.extensions&&we(n.extensions),astNode:n.astNode}}))}function $n(e){return fn(e.type)&&void 0===e.defaultValue}function Wn(e,n){return e===n||(fn(e)&&fn(n)||!(!ln(e)||!ln(n)))&&Wn(e.ofType,n.ofType)}function Zn(e,n,t){return n===t||(fn(t)?!!fn(n)&&Zn(e,n.ofType,t.ofType):fn(n)?Zn(e,n.ofType,t):ln(t)?!!ln(n)&&Zn(e,n.ofType,t.ofType):!ln(n)&&In(t)&&(nn(n)||Ze(n))&&e.isSubType(t,n))}function et(e,n,t){return n===t||(In(n)?In(t)?e.getPossibleTypes(n).some((function(n){return e.isSubType(t,n)})):e.isSubType(n,t):!!In(t)&&e.isSubType(t,n))}k(Hn);const nt=Array.from||function(e,n,t){if(null==e)throw new TypeError("Array.from requires an array-like object - not null or undefined");var r=e[s];if("function"==typeof r){for(var i,a=r.call(e),o=[],c=0;!(i=a.next()).done;++c)if(o.push(n.call(t,i.value,c)),c>9999999)throw new TypeError("Near-infinite iteration.");return o}var u=e.length;if("number"==typeof u&&u>=0&&u%1==0){for(var l=[],p=0;p<u;++p)Object.prototype.hasOwnProperty.call(e,p)&&l.push(n.call(t,e[p],p));return l}return[]},tt=Number.isFinite||function(e){return"number"==typeof e&&isFinite(e)};function rt(e){return(rt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function it(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(e){return e};if(null==e||"object"!==rt(e))return null;if(Array.isArray(e))return e.map(n);var t=e[s];if("function"==typeof t){for(var r,i=t.call(e),a=[],o=0;!(r=i.next()).done;++o)a.push(n(r.value,o));return a}var c=e.length;if("number"==typeof c&&c>=0&&c%1==0){for(var u=[],l=0;l<c;++l){if(!Object.prototype.hasOwnProperty.call(e,l))return null;u.push(n(e[String(l)],l))}return u}return null}const at=Number.isInteger||function(e){return"number"==typeof e&&isFinite(e)&&Math.floor(e)===e};var ot=2147483647,ct=-2147483648,st=new jn({name:"Int",description:"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.",serialize:function(e){var n=lt(e);if("boolean"==typeof n)return n?1:0;var t=n;if("string"==typeof n&&""!==n&&(t=Number(n)),!at(t))throw new O("Int cannot represent non-integer value: ".concat(C(n)));if(t>ot||t<ct)throw new O("Int cannot represent non 32-bit signed integer value: "+C(n));return t},parseValue:function(e){if(!at(e))throw new O("Int cannot represent non-integer value: ".concat(C(e)));if(e>ot||e<ct)throw new O("Int cannot represent non 32-bit signed integer value: ".concat(e));return e},parseLiteral:function(e){if(e.kind!==A.INT)throw new O("Int cannot represent non-integer value: ".concat(Ce(e)),e);var n=parseInt(e.value,10);if(n>ot||n<ct)throw new O("Int cannot represent non 32-bit signed integer value: ".concat(e.value),e);return n}}),ut=new jn({name:"Float",description:"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).",serialize:function(e){var n=lt(e);if("boolean"==typeof n)return n?1:0;var t=n;if("string"==typeof n&&""!==n&&(t=Number(n)),!tt(t))throw new O("Float cannot represent non numeric value: ".concat(C(n)));return t},parseValue:function(e){if(!tt(e))throw new O("Float cannot represent non numeric value: ".concat(C(e)));return e},parseLiteral:function(e){if(e.kind!==A.FLOAT&&e.kind!==A.INT)throw new O("Float cannot represent non numeric value: ".concat(Ce(e)),e);return parseFloat(e.value)}});function lt(e){if(c(e)){if("function"==typeof e.valueOf){var n=e.valueOf();if(!c(n))return n}if("function"==typeof e.toJSON)return e.toJSON()}return e}var pt=new jn({name:"String",description:"The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.",serialize:function(e){var n=lt(e);if("string"==typeof n)return n;if("boolean"==typeof n)return n?"true":"false";if(tt(n))return n.toString();throw new O("String cannot represent value: ".concat(C(e)))},parseValue:function(e){if("string"!=typeof e)throw new O("String cannot represent a non string value: ".concat(C(e)));return e},parseLiteral:function(e){if(e.kind!==A.STRING)throw new O("String cannot represent a non string value: ".concat(Ce(e)),e);return e.value}}),ft=new jn({name:"Boolean",description:"The `Boolean` scalar type represents `true` or `false`.",serialize:function(e){var n=lt(e);if("boolean"==typeof n)return n;if(tt(n))return 0!==n;throw new O("Boolean cannot represent a non boolean value: ".concat(C(n)))},parseValue:function(e){if("boolean"!=typeof e)throw new O("Boolean cannot represent a non boolean value: ".concat(C(e)));return e},parseLiteral:function(e){if(e.kind!==A.BOOLEAN)throw new O("Boolean cannot represent a non boolean value: ".concat(Ce(e)),e);return e.value}}),dt=new jn({name:"ID",description:'The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.',serialize:function(e){var n=lt(e);if("string"==typeof n)return n;if(at(n))return String(n);throw new O("ID cannot represent value: ".concat(C(e)))},parseValue:function(e){if("string"==typeof e)return e;if(at(e))return e.toString();throw new O("ID cannot represent value: ".concat(C(e)))},parseLiteral:function(e){if(e.kind!==A.STRING&&e.kind!==A.INT)throw new O("ID cannot represent a non-string and non-integer value: "+Ce(e),e);return e.value}}),vt=Object.freeze([pt,st,ut,ft,dt]);function ht(e){return vt.some((function(n){var t=n.name;return e.name===t}))}function yt(e,n){if(fn(n)){var t=yt(e,n.ofType);return(null==t?void 0:t.kind)===A.NULL?null:t}if(null===e)return{kind:A.NULL};if(void 0===e)return null;if(ln(n)){var r=n.ofType,i=it(e);if(null!=i){for(var a=[],o=0;o<i.length;o++){var s=yt(i[o],r);null!=s&&a.push(s)}return{kind:A.LIST,values:a}}return yt(e,r)}if(sn(n)){if(!c(e))return null;for(var u=[],l=0,p=Te(n.getFields());l<p.length;l++){var f=p[l],d=yt(e[f.name],f.type);d&&u.push({kind:A.OBJECT_FIELD,name:{kind:A.NAME,value:f.name},value:d})}return{kind:A.OBJECT,fields:u}}if(En(n)){var v=n.serialize(e);if(null==v)return null;if("boolean"==typeof v)return{kind:A.BOOLEAN,value:v};if("number"==typeof v&&tt(v)){var h=String(v);return mt.test(h)?{kind:A.INT,value:h}:{kind:A.FLOAT,value:h}}if("string"==typeof v)return on(n)?{kind:A.ENUM,value:v}:n===dt&&mt.test(v)?{kind:A.INT,value:v}:{kind:A.STRING,value:v};throw new TypeError("Cannot convert value to AST: ".concat(C(v),"."))}S(0,"Unexpected input type: "+C(n))}var mt=/^-?(?:0|[1-9][0-9]*)$/,Et=new Cn({name:"__Schema",description:"A GraphQL Schema defines the capabilities of a GraphQL server. It exposes all available types and directives on the server, as well as the entry points for query, mutation, and subscription operations.",fields:function(){return{description:{type:pt,resolve:function(e){return e.description}},types:{description:"A list of all types supported by this server.",type:new On(new _n(new On(Nt))),resolve:function(e){return Te(e.getTypeMap())}},queryType:{description:"The type that query operations will be rooted at.",type:new On(Nt),resolve:function(e){return e.getQueryType()}},mutationType:{description:"If this server supports mutation, the type that mutation operations will be rooted at.",type:Nt,resolve:function(e){return e.getMutationType()}},subscriptionType:{description:"If this server support subscription, the type that subscription operations will be rooted at.",type:Nt,resolve:function(e){return e.getSubscriptionType()}},directives:{description:"A list of all directives supported by this server.",type:new On(new _n(new On(Tt))),resolve:function(e){return e.getDirectives()}}}}}),Tt=new Cn({name:"__Directive",description:"A Directive provides a way to describe alternate runtime execution and type validation behavior in a GraphQL document.\n\nIn some cases, you need to provide options to alter GraphQL's execution behavior in ways field arguments will not suffice, such as conditionally including or skipping a field. Directives provide this by describing additional information to the executor.",fields:function(){return{name:{type:new On(pt),resolve:function(e){return e.name}},description:{type:pt,resolve:function(e){return e.description}},isRepeatable:{type:new On(ft),resolve:function(e){return e.isRepeatable}},locations:{type:new On(new _n(new On(gt))),resolve:function(e){return e.locations}},args:{type:new On(new _n(new On(bt))),resolve:function(e){return e.args}}}}}),gt=new Kn({name:"__DirectiveLocation",description:"A Directive can be adjacent to many parts of the GraphQL language, a __DirectiveLocation describes one such possible adjacencies.",values:{QUERY:{value:Q.QUERY,description:"Location adjacent to a query operation."},MUTATION:{value:Q.MUTATION,description:"Location adjacent to a mutation operation."},SUBSCRIPTION:{value:Q.SUBSCRIPTION,description:"Location adjacent to a subscription operation."},FIELD:{value:Q.FIELD,description:"Location adjacent to a field."},FRAGMENT_DEFINITION:{value:Q.FRAGMENT_DEFINITION,description:"Location adjacent to a fragment definition."},FRAGMENT_SPREAD:{value:Q.FRAGMENT_SPREAD,description:"Location adjacent to a fragment spread."},INLINE_FRAGMENT:{value:Q.INLINE_FRAGMENT,description:"Location adjacent to an inline fragment."},VARIABLE_DEFINITION:{value:Q.VARIABLE_DEFINITION,description:"Location adjacent to a variable definition."},SCHEMA:{value:Q.SCHEMA,description:"Location adjacent to a schema definition."},SCALAR:{value:Q.SCALAR,description:"Location adjacent to a scalar definition."},OBJECT:{value:Q.OBJECT,description:"Location adjacent to an object type definition."},FIELD_DEFINITION:{value:Q.FIELD_DEFINITION,description:"Location adjacent to a field definition."},ARGUMENT_DEFINITION:{value:Q.ARGUMENT_DEFINITION,description:"Location adjacent to an argument definition."},INTERFACE:{value:Q.INTERFACE,description:"Location adjacent to an interface definition."},UNION:{value:Q.UNION,description:"Location adjacent to a union definition."},ENUM:{value:Q.ENUM,description:"Location adjacent to an enum definition."},ENUM_VALUE:{value:Q.ENUM_VALUE,description:"Location adjacent to an enum value definition."},INPUT_OBJECT:{value:Q.INPUT_OBJECT,description:"Location adjacent to an input object type definition."},INPUT_FIELD_DEFINITION:{value:Q.INPUT_FIELD_DEFINITION,description:"Location adjacent to an input object field definition."}}}),Nt=new Cn({name:"__Type",description:"The fundamental unit of any GraphQL Schema is the type. There are many kinds of types in GraphQL as represented by the `__TypeKind` enum.\n\nDepending on the kind of a type, certain fields describe information about that type. Scalar types provide no information beyond a name, description and optional `specifiedByUrl`, while Enum types provide their values. Object and Interface types provide the fields they describe. Abstract types, Union and Interface, provide the Object types possible at runtime. List and NonNull types compose other types.",fields:function(){return{kind:{type:new On(Dt),resolve:function(e){return $e(e)?Ot.SCALAR:Ze(e)?Ot.OBJECT:nn(e)?Ot.INTERFACE:rn(e)?Ot.UNION:on(e)?Ot.ENUM:sn(e)?Ot.INPUT_OBJECT:ln(e)?Ot.LIST:fn(e)?Ot.NON_NULL:void S(0,'Unexpected type: "'.concat(C(e),'".'))}},name:{type:pt,resolve:function(e){return void 0!==e.name?e.name:void 0}},description:{type:pt,resolve:function(e){return void 0!==e.description?e.description:void 0}},specifiedByUrl:{type:pt,resolve:function(e){return void 0!==e.specifiedByUrl?e.specifiedByUrl:void 0}},fields:{type:new _n(new On(It)),args:{includeDeprecated:{type:ft,defaultValue:!1}},resolve:function(e,n){var t=n.includeDeprecated;if(Ze(e)||nn(e)){var r=Te(e.getFields());return t?r:r.filter((function(e){return null==e.deprecationReason}))}}},interfaces:{type:new _n(new On(Nt)),resolve:function(e){if(Ze(e)||nn(e))return e.getInterfaces()}},possibleTypes:{type:new _n(new On(Nt)),resolve:function(e,n,t,r){var i=r.schema;if(In(e))return i.getPossibleTypes(e)}},enumValues:{type:new _n(new On(_t)),args:{includeDeprecated:{type:ft,defaultValue:!1}},resolve:function(e,n){var t=n.includeDeprecated;if(on(e)){var r=e.getValues();return t?r:r.filter((function(e){return null==e.deprecationReason}))}}},inputFields:{type:new _n(new On(bt)),args:{includeDeprecated:{type:ft,defaultValue:!1}},resolve:function(e,n){var t=n.includeDeprecated;if(sn(e)){var r=Te(e.getFields());return t?r:r.filter((function(e){return null==e.deprecationReason}))}}},ofType:{type:Nt,resolve:function(e){return void 0!==e.ofType?e.ofType:void 0}}}}}),It=new Cn({name:"__Field",description:"Object and Interface types are described by a list of Fields, each of which has a name, potentially a list of arguments, and a return type.",fields:function(){return{name:{type:new On(pt),resolve:function(e){return e.name}},description:{type:pt,resolve:function(e){return e.description}},args:{type:new On(new _n(new On(bt))),args:{includeDeprecated:{type:ft,defaultValue:!1}},resolve:function(e,n){return n.includeDeprecated?e.args:e.args.filter((function(e){return null==e.deprecationReason}))}},type:{type:new On(Nt),resolve:function(e){return e.type}},isDeprecated:{type:new On(ft),resolve:function(e){return null!=e.deprecationReason}},deprecationReason:{type:pt,resolve:function(e){return e.deprecationReason}}}}}),bt=new Cn({name:"__InputValue",description:"Arguments provided to Fields or Directives and the input fields of an InputObject are represented as Input Values which describe their type and optionally a default value.",fields:function(){return{name:{type:new On(pt),resolve:function(e){return e.name}},description:{type:pt,resolve:function(e){return e.description}},type:{type:new On(Nt),resolve:function(e){return e.type}},defaultValue:{type:pt,description:"A GraphQL-formatted string representing the default value for this input value.",resolve:function(e){var n=e.type,t=yt(e.defaultValue,n);return t?Ce(t):null}},isDeprecated:{type:new On(ft),resolve:function(e){return null!=e.deprecationReason}},deprecationReason:{type:pt,resolve:function(e){return e.deprecationReason}}}}}),_t=new Cn({name:"__EnumValue",description:"One possible value for a given Enum. Enum values are unique values, not a placeholder for a string or numeric value. However an Enum value is returned in a JSON response as a string.",fields:function(){return{name:{type:new On(pt),resolve:function(e){return e.name}},description:{type:pt,resolve:function(e){return e.description}},isDeprecated:{type:new On(ft),resolve:function(e){return null!=e.deprecationReason}},deprecationReason:{type:pt,resolve:function(e){return e.deprecationReason}}}}}),Ot=Object.freeze({SCALAR:"SCALAR",OBJECT:"OBJECT",INTERFACE:"INTERFACE",UNION:"UNION",ENUM:"ENUM",INPUT_OBJECT:"INPUT_OBJECT",LIST:"LIST",NON_NULL:"NON_NULL"}),Dt=new Kn({name:"__TypeKind",description:"An enum describing what kind of type a given `__Type` is.",values:{SCALAR:{value:Ot.SCALAR,description:"Indicates this type is a scalar."},OBJECT:{value:Ot.OBJECT,description:"Indicates this type is an object. `fields` and `interfaces` are valid fields."},INTERFACE:{value:Ot.INTERFACE,description:"Indicates this type is an interface. `fields`, `interfaces`, and `possibleTypes` are valid fields."},UNION:{value:Ot.UNION,description:"Indicates this type is a union. `possibleTypes` is a valid field."},ENUM:{value:Ot.ENUM,description:"Indicates this type is an enum. `enumValues` is a valid field."},INPUT_OBJECT:{value:Ot.INPUT_OBJECT,description:"Indicates this type is an input object. `inputFields` is a valid field."},LIST:{value:Ot.LIST,description:"Indicates this type is a list. `ofType` is a valid field."},NON_NULL:{value:Ot.NON_NULL,description:"Indicates this type is a non-null. `ofType` is a valid field."}}}),wt={name:"__schema",type:new On(Et),description:"Access the current type schema of this server.",args:[],resolve:function(e,n,t,r){return r.schema},isDeprecated:!1,deprecationReason:void 0,extensions:void 0,astNode:void 0},At={name:"__type",type:Nt,description:"Request the type information of a single type.",args:[{name:"name",description:void 0,type:new On(pt),defaultValue:void 0,deprecationReason:void 0,extensions:void 0,astNode:void 0}],resolve:function(e,n,t,r){var i=n.name;return r.schema.getType(i)},isDeprecated:!1,deprecationReason:void 0,extensions:void 0,astNode:void 0},St={name:"__typename",type:new On(pt),description:"The name of the current Object type at runtime.",args:[],resolve:function(e,n,t,r){return r.parentType.name},isDeprecated:!1,deprecationReason:void 0,extensions:void 0,astNode:void 0},Rt=Object.freeze([Et,Tt,gt,Nt,It,bt,_t,Dt]);function kt(e){return Rt.some((function(n){var t=n.name;return e.name===t}))}function xt(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Ft(e){return M(e,Vt)}function Lt(e){if(!Ft(e))throw new Error("Expected ".concat(C(e)," to be a GraphQL directive."));return e}var Vt=function(){function e(e){var n,t;this.name=e.name,this.description=e.description,this.locations=e.locations,this.isRepeatable=null!==(n=e.isRepeatable)&&void 0!==n&&n,this.extensions=e.extensions&&we(e.extensions),this.astNode=e.astNode,e.name||U(0,"Directive must be named."),Array.isArray(e.locations)||U(0,"@".concat(e.name," locations must be an Array."));var r=null!==(t=e.args)&&void 0!==t?t:{};c(r)&&!Array.isArray(r)||U(0,"@".concat(e.name," args must be an object with argument names as keys.")),this.args=_e(r).map((function(e){var n=e[0],t=e[1];return{name:n,description:t.description,type:t.type,defaultValue:t.defaultValue,deprecationReason:t.deprecationReason,extensions:t.extensions&&we(t.extensions),astNode:t.astNode}}))}var n,t,r=e.prototype;return r.toConfig=function(){return{name:this.name,description:this.description,locations:this.locations,args:Gn(this.args),isRepeatable:this.isRepeatable,extensions:this.extensions,astNode:this.astNode}},r.toString=function(){return"@"+this.name},r.toJSON=function(){return this.toString()},n=e,(t=[{key:l,get:function(){return"GraphQLDirective"}}])&&xt(n.prototype,t),e}();k(Vt);var jt=new Vt({name:"include",description:"Directs the executor to include this field or fragment only when the `if` argument is true.",locations:[Q.FIELD,Q.FRAGMENT_SPREAD,Q.INLINE_FRAGMENT],args:{if:{type:new On(ft),description:"Included when true."}}}),Ct=new Vt({name:"skip",description:"Directs the executor to skip this field or fragment when the `if` argument is true.",locations:[Q.FIELD,Q.FRAGMENT_SPREAD,Q.INLINE_FRAGMENT],args:{if:{type:new On(ft),description:"Skipped when true."}}}),Pt="No longer supported",Ut=new Vt({name:"deprecated",description:"Marks an element of a GraphQL schema as no longer supported.",locations:[Q.FIELD_DEFINITION,Q.ARGUMENT_DEFINITION,Q.INPUT_FIELD_DEFINITION,Q.ENUM_VALUE],args:{reason:{type:pt,description:"Explains why this element was deprecated, usually also including a suggestion for how to access supported similar data. Formatted using the Markdown syntax, as specified by [CommonMark](https://commonmark.org/).",defaultValue:Pt}}}),Mt=new Vt({name:"specifiedBy",description:"Exposes a URL that specifies the behaviour of this scalar.",locations:[Q.SCALAR],args:{url:{type:new On(pt),description:"The URL that specifies the behaviour of this scalar."}}}),Bt=Object.freeze([jt,Ct,Ut,Mt]);function Gt(e){return Bt.some((function(n){return n.name===e.name}))}function Yt(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Qt(e){return M(e,Jt)}function qt(e){if(!Qt(e))throw new Error("Expected ".concat(C(e)," to be a GraphQL schema."));return e}var Jt=function(){function e(e){var n;this.__validationErrors=!0===e.assumeValid?[]:void 0,c(e)||U(0,"Must provide configuration object."),!e.types||Array.isArray(e.types)||U(0,'"types" must be Array if provided but got: '.concat(C(e.types),".")),!e.directives||Array.isArray(e.directives)||U(0,'"directives" must be Array if provided but got: '+"".concat(C(e.directives),".")),this.description=e.description,this.extensions=e.extensions&&we(e.extensions),this.astNode=e.astNode,this.extensionASTNodes=e.extensionASTNodes,this._queryType=e.query,this._mutationType=e.mutation,this._subscriptionType=e.subscription,this._directives=null!==(n=e.directives)&&void 0!==n?n:Bt;var t=new Set(e.types);if(null!=e.types)for(var r=0,i=e.types;r<i.length;r++){var a=i[r];t.delete(a),Kt(a,t)}null!=this._queryType&&Kt(this._queryType,t),null!=this._mutationType&&Kt(this._mutationType,t),null!=this._subscriptionType&&Kt(this._subscriptionType,t);for(var o=0,s=this._directives;o<s.length;o++){var u=s[o];if(Ft(u))for(var l=0,p=u.args;l<p.length;l++)Kt(p[l].type,t)}Kt(Et,t),this._typeMap=Object.create(null),this._subTypeMap=Object.create(null),this._implementationsMap=Object.create(null);for(var f=0,d=nt(t);f<d.length;f++){var v=d[f];if(null!=v){var h=v.name;if(h||U(0,"One of the provided types for building the Schema is missing a name."),void 0!==this._typeMap[h])throw new Error('Schema must contain uniquely named types but contains multiple types named "'.concat(h,'".'));if(this._typeMap[h]=v,nn(v))for(var y=0,m=v.getInterfaces();y<m.length;y++){var E=m[y];if(nn(E)){var T=this._implementationsMap[E.name];void 0===T&&(T=this._implementationsMap[E.name]={objects:[],interfaces:[]}),T.interfaces.push(v)}}else if(Ze(v))for(var g=0,N=v.getInterfaces();g<N.length;g++){var I=N[g];if(nn(I)){var b=this._implementationsMap[I.name];void 0===b&&(b=this._implementationsMap[I.name]={objects:[],interfaces:[]}),b.objects.push(v)}}}}}var n,t,r=e.prototype;return r.getQueryType=function(){return this._queryType},r.getMutationType=function(){return this._mutationType},r.getSubscriptionType=function(){return this._subscriptionType},r.getTypeMap=function(){return this._typeMap},r.getType=function(e){return this.getTypeMap()[e]},r.getPossibleTypes=function(e){return rn(e)?e.getTypes():this.getImplementations(e).objects},r.getImplementations=function(e){var n=this._implementationsMap[e.name];return null!=n?n:{objects:[],interfaces:[]}},r.isPossibleType=function(e,n){return this.isSubType(e,n)},r.isSubType=function(e,n){var t=this._subTypeMap[e.name];if(void 0===t){if(t=Object.create(null),rn(e))for(var r=0,i=e.getTypes();r<i.length;r++)t[i[r].name]=!0;else{for(var a=this.getImplementations(e),o=0,c=a.objects;o<c.length;o++)t[c[o].name]=!0;for(var s=0,u=a.interfaces;s<u.length;s++)t[u[s].name]=!0}this._subTypeMap[e.name]=t}return void 0!==t[n.name]},r.getDirectives=function(){return this._directives},r.getDirective=function(e){return Ee(this.getDirectives(),(function(n){return n.name===e}))},r.toConfig=function(){var e;return{description:this.description,query:this.getQueryType(),mutation:this.getMutationType(),subscription:this.getSubscriptionType(),types:Te(this.getTypeMap()),directives:this.getDirectives().slice(),extensions:this.extensions,astNode:this.astNode,extensionASTNodes:null!==(e=this.extensionASTNodes)&&void 0!==e?e:[],assumeValid:void 0!==this.__validationErrors}},n=e,(t=[{key:l,get:function(){return"GraphQLSchema"}}])&&Yt(n.prototype,t),e}();function Kt(e,n){var t=Fn(e);if(!n.has(t))if(n.add(t),rn(t))for(var r=0,i=t.getTypes();r<i.length;r++)Kt(i[r],n);else if(Ze(t)||nn(t)){for(var a=0,o=t.getInterfaces();a<o.length;a++)Kt(o[a],n);for(var c=0,s=Te(t.getFields());c<s.length;c++){var u=s[c];Kt(u.type,n);for(var l=0,p=u.args;l<p.length;l++)Kt(p[l].type,n)}}else if(sn(t))for(var f=0,d=Te(t.getFields());f<d.length;f++)Kt(d[f].type,n);return n}function Xt(e){if(qt(e),e.__validationErrors)return e.__validationErrors;var n=new zt(e);!function(e){var n=e.schema,t=n.getQueryType();if(t){if(!Ze(t)){var r;e.reportError("Query root type must be Object type, it cannot be ".concat(C(t),"."),null!==(r=$t(n,"query"))&&void 0!==r?r:t.astNode)}}else e.reportError("Query root type must be provided.",n.astNode);var i,a=n.getMutationType();a&&!Ze(a)&&e.reportError("Mutation root type must be Object type if provided, it cannot be "+"".concat(C(a),"."),null!==(i=$t(n,"mutation"))&&void 0!==i?i:a.astNode);var o,c=n.getSubscriptionType();c&&!Ze(c)&&e.reportError("Subscription root type must be Object type if provided, it cannot be "+"".concat(C(c),"."),null!==(o=$t(n,"subscription"))&&void 0!==o?o:c.astNode)}(n),function(e){for(var n=0,t=e.schema.getDirectives();n<t.length;n++){var r=t[n];if(Ft(r)){Wt(e,r);for(var i=0,a=r.args;i<a.length;i++){var o,c=a[i];Wt(e,c),vn(c.type)||e.reportError("The type of @".concat(r.name,"(").concat(c.name,":) must be Input Type ")+"but got: ".concat(C(c.type),"."),c.astNode),Yn(c)&&null!=c.deprecationReason&&e.reportError("Required argument @".concat(r.name,"(").concat(c.name,":) cannot be deprecated."),[lr(c.astNode),null===(o=c.astNode)||void 0===o?void 0:o.type])}}else e.reportError("Expected directive but got: ".concat(C(r),"."),null==r?void 0:r.astNode)}}(n),function(e){for(var n=function(e){var n=Object.create(null),t=[],r=Object.create(null);return function i(a){if(!n[a.name]){n[a.name]=!0,r[a.name]=t.length;for(var o=Te(a.getFields()),c=0;c<o.length;c++){var s=o[c];if(fn(s.type)&&sn(s.type.ofType)){var u=s.type.ofType,l=r[u.name];if(t.push(s),void 0===l)i(u);else{var p=t.slice(l),f=p.map((function(e){return e.name})).join(".");e.reportError('Cannot reference Input Object "'.concat(u.name,'" within itself through a series of non-null fields: "').concat(f,'".'),p.map((function(e){return e.astNode})))}t.pop()}}r[a.name]=void 0}}}(e),t=e.schema.getTypeMap(),r=0,i=Te(t);r<i.length;r++){var a=i[r];kn(a)?(kt(a)||Wt(e,a),Ze(a)||nn(a)?(Zt(e,a),er(e,a)):rn(a)?rr(e,a):on(a)?ir(e,a):sn(a)&&(ar(e,a),n(a))):e.reportError("Expected GraphQL named type but got: ".concat(C(a),"."),a.astNode)}}(n);var t=n.getErrors();return e.__validationErrors=t,t}function Ht(e){var n=Xt(e);if(0!==n.length)throw new Error(n.map((function(e){return e.message})).join("\n\n"))}var zt=function(){function e(e){this._errors=[],this.schema=e}var n=e.prototype;return n.reportError=function(e,n){var t=Array.isArray(n)?n.filter(Boolean):n;this.addError(new O(e,t))},n.addError=function(e){this._errors.push(e)},n.getErrors=function(){return this._errors},e}();function $t(e,n){for(var t=cr(e,(function(e){return e.operationTypes})),r=0;r<t.length;r++){var i=t[r];if(i.operation===n)return i.type}}function Wt(e,n){var t=be(n.name);t&&e.addError(ge(t,n.astNode))}function Zt(e,n){var t=Te(n.getFields());0===t.length&&e.reportError("Type ".concat(n.name," must define one or more fields."),or(n));for(var r=0;r<t.length;r++){var i,a=t[r];Wt(e,a),yn(a.type)||e.reportError("The type of ".concat(n.name,".").concat(a.name," must be Output Type ")+"but got: ".concat(C(a.type),"."),null===(i=a.astNode)||void 0===i?void 0:i.type);for(var o=0,c=a.args;o<c.length;o++){var s,u,l=c[o],p=l.name;Wt(e,l),vn(l.type)||e.reportError("The type of ".concat(n.name,".").concat(a.name,"(").concat(p,":) must be Input ")+"Type but got: ".concat(C(l.type),"."),null===(s=l.astNode)||void 0===s?void 0:s.type),Yn(l)&&null!=l.deprecationReason&&e.reportError("Required argument ".concat(n.name,".").concat(a.name,"(").concat(p,":) cannot be deprecated."),[lr(l.astNode),null===(u=l.astNode)||void 0===u?void 0:u.type])}}}function er(e,n){for(var t=Object.create(null),r=0,i=n.getInterfaces();r<i.length;r++){var a=i[r];nn(a)?n!==a?t[a.name]?e.reportError("Type ".concat(n.name," can only implement ").concat(a.name," once."),sr(n,a)):(t[a.name]=!0,tr(e,n,a),nr(e,n,a)):e.reportError("Type ".concat(n.name," cannot implement itself because it would create a circular reference."),sr(n,a)):e.reportError("Type ".concat(C(n)," must only implement Interface types, ")+"it cannot implement ".concat(C(a),"."),sr(n,a))}}function nr(e,n,t){for(var r=n.getFields(),i=0,a=Te(t.getFields());i<a.length;i++){var o=a[i],c=o.name,s=r[c];if(s){var u,l;Zn(e.schema,s.type,o.type)||e.reportError("Interface field ".concat(t.name,".").concat(c," expects type ")+"".concat(C(o.type)," but ").concat(n.name,".").concat(c," ")+"is type ".concat(C(s.type),"."),[null===(u=o.astNode)||void 0===u?void 0:u.type,null===(l=s.astNode)||void 0===l?void 0:l.type]);for(var p=function(r,i){var a,o,u=i[r],l=u.name,p=Ee(s.args,(function(e){return e.name===l}));if(!p)return e.reportError("Interface field argument ".concat(t.name,".").concat(c,"(").concat(l,":) expected but ").concat(n.name,".").concat(c," does not provide it."),[u.astNode,s.astNode]),"continue";Wn(u.type,p.type)||e.reportError("Interface field argument ".concat(t.name,".").concat(c,"(").concat(l,":) ")+"expects type ".concat(C(u.type)," but ")+"".concat(n.name,".").concat(c,"(").concat(l,":) is type ")+"".concat(C(p.type),"."),[null===(a=u.astNode)||void 0===a?void 0:a.type,null===(o=p.astNode)||void 0===o?void 0:o.type])},f=0,d=o.args;f<d.length;f++)p(f,d);for(var v=function(r,i){var a=i[r],s=a.name;!Ee(o.args,(function(e){return e.name===s}))&&Yn(a)&&e.reportError("Object field ".concat(n.name,".").concat(c," includes required argument ").concat(s," that is missing from the Interface field ").concat(t.name,".").concat(c,"."),[a.astNode,o.astNode])},h=0,y=s.args;h<y.length;h++)v(h,y)}else e.reportError("Interface field ".concat(t.name,".").concat(c," expected but ").concat(n.name," does not provide it."),[o.astNode].concat(or(n)))}}function tr(e,n,t){for(var r=n.getInterfaces(),i=0,a=t.getInterfaces();i<a.length;i++){var o=a[i];-1===r.indexOf(o)&&e.reportError(o===n?"Type ".concat(n.name," cannot implement ").concat(t.name," because it would create a circular reference."):"Type ".concat(n.name," must implement ").concat(o.name," because it is implemented by ").concat(t.name,"."),[].concat(sr(t,o),sr(n,t)))}}function rr(e,n){var t=n.getTypes();0===t.length&&e.reportError("Union type ".concat(n.name," must define one or more member types."),or(n));for(var r=Object.create(null),i=0;i<t.length;i++){var a=t[i];r[a.name]?e.reportError("Union type ".concat(n.name," can only include type ").concat(a.name," once."),ur(n,a.name)):(r[a.name]=!0,Ze(a)||e.reportError("Union type ".concat(n.name," can only include Object types, ")+"it cannot include ".concat(C(a),"."),ur(n,String(a))))}}function ir(e,n){var t=n.getValues();0===t.length&&e.reportError("Enum type ".concat(n.name," must define one or more values."),or(n));for(var r=0;r<t.length;r++){var i=t[r],a=i.name;Wt(e,i),"true"!==a&&"false"!==a&&"null"!==a||e.reportError("Enum type ".concat(n.name," cannot include value: ").concat(a,"."),i.astNode)}}function ar(e,n){var t=Te(n.getFields());0===t.length&&e.reportError("Input Object type ".concat(n.name," must define one or more fields."),or(n));for(var r=0;r<t.length;r++){var i,a,o=t[r];Wt(e,o),vn(o.type)||e.reportError("The type of ".concat(n.name,".").concat(o.name," must be Input Type ")+"but got: ".concat(C(o.type),"."),null===(i=o.astNode)||void 0===i?void 0:i.type),$n(o)&&null!=o.deprecationReason&&e.reportError("Required input field ".concat(n.name,".").concat(o.name," cannot be deprecated."),[lr(o.astNode),null===(a=o.astNode)||void 0===a?void 0:a.type])}}function or(e){var n=e.astNode,t=e.extensionASTNodes;return n?t?[n].concat(t):[n]:null!=t?t:[]}function cr(e,n){for(var t=[],r=0,i=or(e);r<i.length;r++){var a,o=i[r];t=t.concat(null!==(a=n(o))&&void 0!==a?a:[])}return t}function sr(e,n){return cr(e,(function(e){return e.interfaces})).filter((function(e){return e.name.value===n.name}))}function ur(e,n){return cr(e,(function(e){return e.types})).filter((function(e){return e.name.value===n}))}function lr(e){var n;return null==e||null===(n=e.directives)||void 0===n?void 0:n.find((function(e){return e.name.value===Ut.name}))}function pr(e,n){var t;return n.kind===A.LIST_TYPE?(t=pr(e,n.type))&&new _n(t):n.kind===A.NON_NULL_TYPE?(t=pr(e,n.type))&&new On(t):n.kind===A.NAMED_TYPE?e.getType(n.name.value):void S(0,"Unexpected type node: "+C(n))}var fr=function(){function e(e,n,t){this._schema=e,this._typeStack=[],this._parentTypeStack=[],this._inputTypeStack=[],this._fieldDefStack=[],this._defaultValueStack=[],this._directive=null,this._argument=null,this._enumValue=null,this._getFieldDef=null!=n?n:dr,t&&(vn(t)&&this._inputTypeStack.push(t),gn(t)&&this._parentTypeStack.push(t),yn(t)&&this._typeStack.push(t))}var n=e.prototype;return n.getType=function(){if(this._typeStack.length>0)return this._typeStack[this._typeStack.length-1]},n.getParentType=function(){if(this._parentTypeStack.length>0)return this._parentTypeStack[this._parentTypeStack.length-1]},n.getInputType=function(){if(this._inputTypeStack.length>0)return this._inputTypeStack[this._inputTypeStack.length-1]},n.getParentInputType=function(){if(this._inputTypeStack.length>1)return this._inputTypeStack[this._inputTypeStack.length-2]},n.getFieldDef=function(){if(this._fieldDefStack.length>0)return this._fieldDefStack[this._fieldDefStack.length-1]},n.getDefaultValue=function(){if(this._defaultValueStack.length>0)return this._defaultValueStack[this._defaultValueStack.length-1]},n.getDirective=function(){return this._directive},n.getArgument=function(){return this._argument},n.getEnumValue=function(){return this._enumValue},n.enter=function(e){var n=this._schema;switch(e.kind){case A.SELECTION_SET:var t=Fn(this.getType());this._parentTypeStack.push(gn(t)?t:void 0);break;case A.FIELD:var r,i,a=this.getParentType();a&&(r=this._getFieldDef(n,a,e))&&(i=r.type),this._fieldDefStack.push(r),this._typeStack.push(yn(i)?i:void 0);break;case A.DIRECTIVE:this._directive=n.getDirective(e.name.value);break;case A.OPERATION_DEFINITION:var o;switch(e.operation){case"query":o=n.getQueryType();break;case"mutation":o=n.getMutationType();break;case"subscription":o=n.getSubscriptionType()}this._typeStack.push(Ze(o)?o:void 0);break;case A.INLINE_FRAGMENT:case A.FRAGMENT_DEFINITION:var c=e.typeCondition,s=c?pr(n,c):Fn(this.getType());this._typeStack.push(yn(s)?s:void 0);break;case A.VARIABLE_DEFINITION:var u=pr(n,e.type);this._inputTypeStack.push(vn(u)?u:void 0);break;case A.ARGUMENT:var l,p,f,d=null!==(l=this.getDirective())&&void 0!==l?l:this.getFieldDef();d&&(p=Ee(d.args,(function(n){return n.name===e.name.value})))&&(f=p.type),this._argument=p,this._defaultValueStack.push(p?p.defaultValue:void 0),this._inputTypeStack.push(vn(f)?f:void 0);break;case A.LIST:var v=Rn(this.getInputType()),h=ln(v)?v.ofType:v;this._defaultValueStack.push(void 0),this._inputTypeStack.push(vn(h)?h:void 0);break;case A.OBJECT_FIELD:var y,m,E=Fn(this.getInputType());sn(E)&&(m=E.getFields()[e.name.value])&&(y=m.type),this._defaultValueStack.push(m?m.defaultValue:void 0),this._inputTypeStack.push(vn(y)?y:void 0);break;case A.ENUM:var T,g=Fn(this.getInputType());on(g)&&(T=g.getValue(e.value)),this._enumValue=T}},n.leave=function(e){switch(e.kind){case A.SELECTION_SET:this._parentTypeStack.pop();break;case A.FIELD:this._fieldDefStack.pop(),this._typeStack.pop();break;case A.DIRECTIVE:this._directive=null;break;case A.OPERATION_DEFINITION:case A.INLINE_FRAGMENT:case A.FRAGMENT_DEFINITION:this._typeStack.pop();break;case A.VARIABLE_DEFINITION:this._inputTypeStack.pop();break;case A.ARGUMENT:this._argument=null,this._defaultValueStack.pop(),this._inputTypeStack.pop();break;case A.LIST:case A.OBJECT_FIELD:this._defaultValueStack.pop(),this._inputTypeStack.pop();break;case A.ENUM:this._enumValue=null}},e}();function dr(e,n,t){var r=t.name.value;return r===wt.name&&e.getQueryType()===n?wt:r===At.name&&e.getQueryType()===n?At:r===St.name&&gn(n)?St:Ze(n)||nn(n)?n.getFields()[r]:void 0}function vr(e,n){return{enter:function(t){e.enter(t);var r=me(n,t.kind,!1);if(r){var i=r.apply(n,arguments);return void 0!==i&&(e.leave(t),L(i)&&e.enter(i)),i}},leave:function(t){var r,i=me(n,t.kind,!0);return i&&(r=i.apply(n,arguments)),e.leave(t),r}}}function hr(e){return yr(e)||gr(e)||Ir(e)}function yr(e){return e.kind===A.OPERATION_DEFINITION||e.kind===A.FRAGMENT_DEFINITION}function mr(e){return e.kind===A.FIELD||e.kind===A.FRAGMENT_SPREAD||e.kind===A.INLINE_FRAGMENT}function Er(e){return e.kind===A.VARIABLE||e.kind===A.INT||e.kind===A.FLOAT||e.kind===A.STRING||e.kind===A.BOOLEAN||e.kind===A.NULL||e.kind===A.ENUM||e.kind===A.LIST||e.kind===A.OBJECT}function Tr(e){return e.kind===A.NAMED_TYPE||e.kind===A.LIST_TYPE||e.kind===A.NON_NULL_TYPE}function gr(e){return e.kind===A.SCHEMA_DEFINITION||Nr(e)||e.kind===A.DIRECTIVE_DEFINITION}function Nr(e){return e.kind===A.SCALAR_TYPE_DEFINITION||e.kind===A.OBJECT_TYPE_DEFINITION||e.kind===A.INTERFACE_TYPE_DEFINITION||e.kind===A.UNION_TYPE_DEFINITION||e.kind===A.ENUM_TYPE_DEFINITION||e.kind===A.INPUT_OBJECT_TYPE_DEFINITION}function Ir(e){return e.kind===A.SCHEMA_EXTENSION||br(e)}function br(e){return e.kind===A.SCALAR_TYPE_EXTENSION||e.kind===A.OBJECT_TYPE_EXTENSION||e.kind===A.INTERFACE_TYPE_EXTENSION||e.kind===A.UNION_TYPE_EXTENSION||e.kind===A.ENUM_TYPE_EXTENSION||e.kind===A.INPUT_OBJECT_TYPE_EXTENSION}function _r(e){return{Document:function(n){for(var t=0,r=n.definitions;t<r.length;t++){var i=r[t];if(!yr(i)){var a=i.kind===A.SCHEMA_DEFINITION||i.kind===A.SCHEMA_EXTENSION?"schema":'"'+i.name.value+'"';e.reportError(new O("The ".concat(a," definition is not executable."),i))}}return!1}}}function Or(e){var n=Object.create(null);return{OperationDefinition:function(t){var r=t.name;return r&&(n[r.value]?e.reportError(new O('There can be only one operation named "'.concat(r.value,'".'),[n[r.value],r])):n[r.value]=r),!1},FragmentDefinition:function(){return!1}}}function Dr(e){var n=0;return{Document:function(e){n=e.definitions.filter((function(e){return e.kind===A.OPERATION_DEFINITION})).length},OperationDefinition:function(t){!t.name&&n>1&&e.reportError(new O("This anonymous operation must be the only defined operation.",t))}}}function wr(e){return{OperationDefinition:function(n){"subscription"===n.operation&&1!==n.selectionSet.selections.length&&e.reportError(new O(n.name?'Subscription "'.concat(n.name.value,'" must select only one top level field.'):"Anonymous Subscription must select only one top level field.",n.selectionSet.selections.slice(1)))}}}function Ar(e){for(var n=e.getSchema(),t=n?n.getTypeMap():Object.create(null),r=Object.create(null),i=0,a=e.getDocument().definitions;i<a.length;i++){var o=a[i];Nr(o)&&(r[o.name.value]=!0)}var c=Object.keys(t).concat(Object.keys(r));return{NamedType:function(n,i,a,o,s){var u,l=n.name.value;if(!t[l]&&!r[l]){var p,f=null!==(p=s[2])&&void 0!==p?p:a,d=null!=f&&(u=f,!Array.isArray(u)&&(gr(u)||Ir(u)));if(d&&function(e){return-1!==Sr.indexOf(e)}(l))return;var v=Le(l,d?Sr.concat(c):c);e.reportError(new O('Unknown type "'.concat(l,'".')+Se(v),n))}}}}var Sr=[].concat(vt,Rt).map((function(e){return e.name}));function Rr(e){return{InlineFragment:function(n){var t=n.typeCondition;if(t){var r=pr(e.getSchema(),t);if(r&&!gn(r)){var i=Ce(t);e.reportError(new O('Fragment cannot condition on non composite type "'.concat(i,'".'),t))}}},FragmentDefinition:function(n){var t=pr(e.getSchema(),n.typeCondition);if(t&&!gn(t)){var r=Ce(n.typeCondition);e.reportError(new O('Fragment "'.concat(n.name.value,'" cannot condition on non composite type "').concat(r,'".'),n.typeCondition))}}}}function kr(e){return{VariableDefinition:function(n){var t=pr(e.getSchema(),n.type);if(t&&!vn(t)){var r=n.variable.name.value,i=Ce(n.type);e.reportError(new O('Variable "$'.concat(r,'" cannot be non-input type "').concat(i,'".'),n.type))}}}}function xr(e){return{Field:function(n){var t=e.getType(),r=n.selectionSet;if(t)if(En(Fn(t))){if(r){var i=n.name.value,a=C(t);e.reportError(new O('Field "'.concat(i,'" must not have a selection since type "').concat(a,'" has no subfields.'),r))}}else if(!r){var o=n.name.value,c=C(t);e.reportError(new O('Field "'.concat(o,'" of type "').concat(c,'" must have a selection of subfields. Did you mean "').concat(o,' { ... }"?'),n))}}}}function Fr(e){return{Field:function(n){var t=e.getParentType();if(t&&!e.getFieldDef()){var r=e.getSchema(),i=n.name.value,a=Se("to use an inline fragment on",function(e,n,t){if(!In(n))return[];for(var r=new Set,i=Object.create(null),a=0,o=e.getPossibleTypes(n);a<o.length;a++){var c=o[a];if(c.getFields()[t]){r.add(c),i[c.name]=1;for(var s=0,u=c.getInterfaces();s<u.length;s++){var l,p=u[s];p.getFields()[t]&&(r.add(p),i[p.name]=(null!==(l=i[p.name])&&void 0!==l?l:0)+1)}}}return nt(r).sort((function(n,t){var r=i[t.name]-i[n.name];return 0!==r?r:nn(n)&&e.isSubType(n,t)?-1:nn(t)&&e.isSubType(t,n)?1:ke(n.name,t.name)})).map((function(e){return e.name}))}(r,t,i));""===a&&(a=Se(function(e,n){return Ze(e)||nn(e)?Le(n,Object.keys(e.getFields())):[]}(t,i))),e.reportError(new O('Cannot query field "'.concat(i,'" on type "').concat(t.name,'".')+a,n))}}}}function Lr(e){var n=Object.create(null);return{OperationDefinition:function(){return!1},FragmentDefinition:function(t){var r=t.name.value;return n[r]?e.reportError(new O('There can be only one fragment named "'.concat(r,'".'),[n[r],t.name])):n[r]=t.name,!1}}}function Vr(e){return{FragmentSpread:function(n){var t=n.name.value;e.getFragment(t)||e.reportError(new O('Unknown fragment "'.concat(t,'".'),n.name))}}}function jr(e){var n=[],t=[];return{OperationDefinition:function(e){return n.push(e),!1},FragmentDefinition:function(e){return t.push(e),!1},Document:{leave:function(){for(var r=Object.create(null),i=0;i<n.length;i++)for(var a=n[i],o=0,c=e.getRecursivelyReferencedFragments(a);o<c.length;o++)r[c[o].name.value]=!0;for(var s=0;s<t.length;s++){var u=t[s],l=u.name.value;!0!==r[l]&&e.reportError(new O('Fragment "'.concat(l,'" is never used.'),u))}}}}}function Cr(e){return{InlineFragment:function(n){var t=e.getType(),r=e.getParentType();if(gn(t)&&gn(r)&&!et(e.getSchema(),t,r)){var i=C(r),a=C(t);e.reportError(new O('Fragment cannot be spread here as objects of type "'.concat(i,'" can never be of type "').concat(a,'".'),n))}},FragmentSpread:function(n){var t=n.name.value,r=function(e,n){var t=e.getFragment(n);if(t){var r=pr(e.getSchema(),t.typeCondition);if(gn(r))return r}}(e,t),i=e.getParentType();if(r&&i&&!et(e.getSchema(),r,i)){var a=C(i),o=C(r);e.reportError(new O('Fragment "'.concat(t,'" cannot be spread here as objects of type "').concat(a,'" can never be of type "').concat(o,'".'),n))}}}}function Pr(e){var n=Object.create(null),t=[],r=Object.create(null);return{OperationDefinition:function(){return!1},FragmentDefinition:function(e){return i(e),!1}};function i(a){if(!n[a.name.value]){var o=a.name.value;n[o]=!0;var c=e.getFragmentSpreads(a.selectionSet);if(0!==c.length){r[o]=t.length;for(var s=0;s<c.length;s++){var u=c[s],l=u.name.value,p=r[l];if(t.push(u),void 0===p){var f=e.getFragment(l);f&&i(f)}else{var d=t.slice(p),v=d.slice(0,-1).map((function(e){return'"'+e.name.value+'"'})).join(", ");e.reportError(new O('Cannot spread fragment "'.concat(l,'" within itself')+(""!==v?" via ".concat(v,"."):"."),d))}t.pop()}r[o]=void 0}}}}function Ur(e){var n=Object.create(null);return{OperationDefinition:function(){n=Object.create(null)},VariableDefinition:function(t){var r=t.variable.name.value;n[r]?e.reportError(new O('There can be only one variable named "$'.concat(r,'".'),[n[r],t.variable.name])):n[r]=t.variable.name}}}function Mr(e){var n=Object.create(null);return{OperationDefinition:{enter:function(){n=Object.create(null)},leave:function(t){for(var r=e.getRecursiveVariableUsages(t),i=0;i<r.length;i++){var a=r[i].node,o=a.name.value;!0!==n[o]&&e.reportError(new O(t.name?'Variable "$'.concat(o,'" is not defined by operation "').concat(t.name.value,'".'):'Variable "$'.concat(o,'" is not defined.'),[a,t]))}}},VariableDefinition:function(e){n[e.variable.name.value]=!0}}}function Br(e){var n=[];return{OperationDefinition:{enter:function(){n=[]},leave:function(t){for(var r=Object.create(null),i=e.getRecursiveVariableUsages(t),a=0;a<i.length;a++)r[i[a].node.name.value]=!0;for(var o=0,c=n;o<c.length;o++){var s=c[o],u=s.variable.name.value;!0!==r[u]&&e.reportError(new O(t.name?'Variable "$'.concat(u,'" is never used in operation "').concat(t.name.value,'".'):'Variable "$'.concat(u,'" is never used.'),s))}}},VariableDefinition:function(e){n.push(e)}}}function Gr(e){for(var n=Object.create(null),t=e.getSchema(),r=t?t.getDirectives():Bt,i=0;i<r.length;i++){var a=r[i];n[a.name]=a.locations}for(var o=e.getDocument().definitions,c=0;c<o.length;c++){var s=o[c];s.kind===A.DIRECTIVE_DEFINITION&&(n[s.name.value]=s.locations.map((function(e){return e.value})))}return{Directive:function(t,r,i,a,o){var c=t.name.value,s=n[c];if(s){var u=function(e){var n=e[e.length-1];switch(!Array.isArray(n)||S(0),n.kind){case A.OPERATION_DEFINITION:return function(e){switch(e){case"query":return Q.QUERY;case"mutation":return Q.MUTATION;case"subscription":return Q.SUBSCRIPTION}S(0,"Unexpected operation: "+C(e))}(n.operation);case A.FIELD:return Q.FIELD;case A.FRAGMENT_SPREAD:return Q.FRAGMENT_SPREAD;case A.INLINE_FRAGMENT:return Q.INLINE_FRAGMENT;case A.FRAGMENT_DEFINITION:return Q.FRAGMENT_DEFINITION;case A.VARIABLE_DEFINITION:return Q.VARIABLE_DEFINITION;case A.SCHEMA_DEFINITION:case A.SCHEMA_EXTENSION:return Q.SCHEMA;case A.SCALAR_TYPE_DEFINITION:case A.SCALAR_TYPE_EXTENSION:return Q.SCALAR;case A.OBJECT_TYPE_DEFINITION:case A.OBJECT_TYPE_EXTENSION:return Q.OBJECT;case A.FIELD_DEFINITION:return Q.FIELD_DEFINITION;case A.INTERFACE_TYPE_DEFINITION:case A.INTERFACE_TYPE_EXTENSION:return Q.INTERFACE;case A.UNION_TYPE_DEFINITION:case A.UNION_TYPE_EXTENSION:return Q.UNION;case A.ENUM_TYPE_DEFINITION:case A.ENUM_TYPE_EXTENSION:return Q.ENUM;case A.ENUM_VALUE_DEFINITION:return Q.ENUM_VALUE;case A.INPUT_OBJECT_TYPE_DEFINITION:case A.INPUT_OBJECT_TYPE_EXTENSION:return Q.INPUT_OBJECT;case A.INPUT_VALUE_DEFINITION:return e[e.length-3].kind===A.INPUT_OBJECT_TYPE_DEFINITION?Q.INPUT_FIELD_DEFINITION:Q.ARGUMENT_DEFINITION}}(o);u&&-1===s.indexOf(u)&&e.reportError(new O('Directive "@'.concat(c,'" may not be used on ').concat(u,"."),t))}else e.reportError(new O('Unknown directive "@'.concat(c,'".'),t))}}}function Yr(e){for(var n=Object.create(null),t=e.getSchema(),r=t?t.getDirectives():Bt,i=0;i<r.length;i++){var a=r[i];n[a.name]=!a.isRepeatable}for(var o=e.getDocument().definitions,c=0;c<o.length;c++){var s=o[c];s.kind===A.DIRECTIVE_DEFINITION&&(n[s.name.value]=!s.repeatable)}var u=Object.create(null),l=Object.create(null);return{enter:function(t){if(null!=t.directives){var r;if(t.kind===A.SCHEMA_DEFINITION||t.kind===A.SCHEMA_EXTENSION)r=u;else if(Nr(t)||br(t)){var i=t.name.value;void 0===(r=l[i])&&(l[i]=r=Object.create(null))}else r=Object.create(null);for(var a=0,o=t.directives;a<o.length;a++){var c=o[a],s=c.name.value;n[s]&&(r[s]?e.reportError(new O('The directive "@'.concat(s,'" can only be used once at this location.'),[r[s],c])):r[s]=c)}}}}}function Qr(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function qr(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Qr(Object(t),!0).forEach((function(n){Jr(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Qr(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function Jr(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function Kr(e){return qr(qr({},Xr(e)),{},{Argument:function(n){var t=e.getArgument(),r=e.getFieldDef(),i=e.getParentType();if(!t&&r&&i){var a=n.name.value,o=Le(a,r.args.map((function(e){return e.name})));e.reportError(new O('Unknown argument "'.concat(a,'" on field "').concat(i.name,".").concat(r.name,'".')+Se(o),n))}}})}function Xr(e){for(var n=Object.create(null),t=e.getSchema(),r=t?t.getDirectives():Bt,i=0;i<r.length;i++){var a=r[i];n[a.name]=a.args.map((function(e){return e.name}))}for(var o=e.getDocument().definitions,c=0;c<o.length;c++){var s=o[c];if(s.kind===A.DIRECTIVE_DEFINITION){var u,l=null!==(u=s.arguments)&&void 0!==u?u:[];n[s.name.value]=l.map((function(e){return e.name.value}))}}return{Directive:function(t){var r=t.name.value,i=n[r];if(t.arguments&&i)for(var a=0,o=t.arguments;a<o.length;a++){var c=o[a],s=c.name.value;if(-1===i.indexOf(s)){var u=Le(s,i);e.reportError(new O('Unknown argument "'.concat(s,'" on directive "@').concat(r,'".')+Se(u),c))}}return!1}}}function Hr(e){var n=Object.create(null);return{Field:function(){n=Object.create(null)},Directive:function(){n=Object.create(null)},Argument:function(t){var r=t.name.value;return n[r]?e.reportError(new O('There can be only one argument named "'.concat(r,'".'),[n[r],t.name])):n[r]=t.name,!1}}}function zr(e){return{ListValue:function(n){if(!ln(Rn(e.getParentInputType())))return $r(e,n),!1},ObjectValue:function(n){var t=Fn(e.getInputType());if(!sn(t))return $r(e,n),!1;for(var r=Oe(n.fields,(function(e){return e.name.value})),i=0,a=Te(t.getFields());i<a.length;i++){var o=a[i];if(!r[o.name]&&$n(o)){var c=C(o.type);e.reportError(new O('Field "'.concat(t.name,".").concat(o.name,'" of required type "').concat(c,'" was not provided.'),n))}}},ObjectField:function(n){var t=Fn(e.getParentInputType());if(!e.getInputType()&&sn(t)){var r=Le(n.name.value,Object.keys(t.getFields()));e.reportError(new O('Field "'.concat(n.name.value,'" is not defined by type "').concat(t.name,'".')+Se(r),n))}},NullValue:function(n){var t=e.getInputType();fn(t)&&e.reportError(new O('Expected value of type "'.concat(C(t),'", found ').concat(Ce(n),"."),n))},EnumValue:function(n){return $r(e,n)},IntValue:function(n){return $r(e,n)},FloatValue:function(n){return $r(e,n)},StringValue:function(n){return $r(e,n)},BooleanValue:function(n){return $r(e,n)}}}function $r(e,n){var t=e.getInputType();if(t){var r=Fn(t);if(En(r))try{if(void 0===r.parseLiteral(n,void 0)){var i=C(t);e.reportError(new O('Expected value of type "'.concat(i,'", found ').concat(Ce(n),"."),n))}}catch(r){var a=C(t);r instanceof O?e.reportError(r):e.reportError(new O('Expected value of type "'.concat(a,'", found ').concat(Ce(n),"; ")+r.message,n,void 0,void 0,void 0,r))}else{var o=C(t);e.reportError(new O('Expected value of type "'.concat(o,'", found ').concat(Ce(n),"."),n))}}}function Wr(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Zr(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Wr(Object(t),!0).forEach((function(n){ei(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Wr(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function ei(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function ni(e){return Zr(Zr({},ti(e)),{},{Field:{leave:function(n){var t,r=e.getFieldDef();if(!r)return!1;for(var i=Oe(null!==(t=n.arguments)&&void 0!==t?t:[],(function(e){return e.name.value})),a=0,o=r.args;a<o.length;a++){var c=o[a];if(!i[c.name]&&Yn(c)){var s=C(c.type);e.reportError(new O('Field "'.concat(r.name,'" argument "').concat(c.name,'" of type "').concat(s,'" is required, but it was not provided.'),n))}}}}})}function ti(e){for(var n=Object.create(null),t=e.getSchema(),r=t?t.getDirectives():Bt,i=0;i<r.length;i++){var a=r[i];n[a.name]=Oe(a.args.filter(Yn),(function(e){return e.name}))}for(var o=e.getDocument().definitions,c=0;c<o.length;c++){var s=o[c];if(s.kind===A.DIRECTIVE_DEFINITION){var u,l=null!==(u=s.arguments)&&void 0!==u?u:[];n[s.name.value]=Oe(l.filter(ri),(function(e){return e.name.value}))}}return{Directive:{leave:function(t){var r=t.name.value,i=n[r];if(i)for(var a,o=Oe(null!==(a=t.arguments)&&void 0!==a?a:[],(function(e){return e.name.value})),c=0,s=Object.keys(i);c<s.length;c++){var u=s[c];if(!o[u]){var l=i[u].type,p=He(l)?C(l):Ce(l);e.reportError(new O('Directive "@'.concat(r,'" argument "').concat(u,'" of type "').concat(p,'" is required, but it was not provided.'),t))}}}}}}function ri(e){return e.type.kind===A.NON_NULL_TYPE&&null==e.defaultValue}function ii(e){var n=Object.create(null);return{OperationDefinition:{enter:function(){n=Object.create(null)},leave:function(t){for(var r=e.getRecursiveVariableUsages(t),i=0;i<r.length;i++){var a=r[i],o=a.node,c=a.type,s=a.defaultValue,u=o.name.value,l=n[u];if(l&&c){var p=e.getSchema(),f=pr(p,l.type);if(f&&!ai(p,f,l.defaultValue,c,s)){var d=C(f),v=C(c);e.reportError(new O('Variable "$'.concat(u,'" of type "').concat(d,'" used in position expecting type "').concat(v,'".'),[l,o]))}}}}},VariableDefinition:function(e){n[e.variable.name.value]=e}}}function ai(e,n,t,r,i){return fn(r)&&!fn(n)?(null!=t&&t.kind!==A.NULL||void 0!==i)&&Zn(e,n,r.ofType):Zn(e,n,r)}function oi(e){return Array.isArray(e)?e.map((function(e){var n=e[0],t=e[1];return'subfields "'.concat(n,'" conflict because ')+oi(t)})).join(" and "):e}function ci(e){var n=new mi,t=new Map;return{SelectionSet:function(r){for(var i=function(e,n,t,r,i){var a=[],o=di(e,n,r,i),c=o[0],s=o[1];if(function(e,n,t,r,i){for(var a=0,o=_e(i);a<o.length;a++){var c=o[a],s=c[0],u=c[1];if(u.length>1)for(var l=0;l<u.length;l++)for(var p=l+1;p<u.length;p++){var f=pi(e,t,r,!1,s,u[l],u[p]);f&&n.push(f)}}}(e,a,n,t,c),0!==s.length)for(var u=0;u<s.length;u++){si(e,a,n,t,!1,c,s[u]);for(var l=u+1;l<s.length;l++)ui(e,a,n,t,!1,s[u],s[l])}return a}(e,t,n,e.getParentType(),r),a=0;a<i.length;a++){var o=i[a],c=o[0],s=c[0],u=c[1],l=o[1],p=o[2],f=oi(u);e.reportError(new O('Fields "'.concat(s,'" conflict because ').concat(f,". Use different aliases on the fields to fetch both if this was intentional."),l.concat(p)))}}}}function si(e,n,t,r,i,a,o){var c=e.getFragment(o);if(c){var s=vi(e,t,c),u=s[0],l=s[1];if(a!==u){li(e,n,t,r,i,a,u);for(var p=0;p<l.length;p++)si(e,n,t,r,i,a,l[p])}}}function ui(e,n,t,r,i,a,o){if(a!==o&&!r.has(a,o,i)){r.add(a,o,i);var c=e.getFragment(a),s=e.getFragment(o);if(c&&s){var u=vi(e,t,c),l=u[0],p=u[1],f=vi(e,t,s),d=f[0],v=f[1];li(e,n,t,r,i,l,d);for(var h=0;h<v.length;h++)ui(e,n,t,r,i,a,v[h]);for(var y=0;y<p.length;y++)ui(e,n,t,r,i,p[y],o)}}}function li(e,n,t,r,i,a,o){for(var c=0,s=Object.keys(a);c<s.length;c++){var u=s[c],l=o[u];if(l)for(var p=a[u],f=0;f<p.length;f++)for(var d=0;d<l.length;d++){var v=pi(e,t,r,i,u,p[f],l[d]);v&&n.push(v)}}}function pi(e,n,t,r,i,a,o){var c,s,u=a[0],l=a[1],p=a[2],f=o[0],d=o[1],v=o[2],h=r||u!==f&&Ze(u)&&Ze(f);if(!h){var y,m,E=l.name.value,T=d.name.value;if(E!==T)return[[i,'"'.concat(E,'" and "').concat(T,'" are different fields')],[l],[d]];if(c=null!==(y=l.arguments)&&void 0!==y?y:[],s=null!==(m=d.arguments)&&void 0!==m?m:[],c.length!==s.length||!c.every((function(e){var n,t,r=Ee(s,(function(n){return n.name.value===e.name.value}));return!!r&&(n=e.value,t=r.value,Ce(n)===Ce(t))})))return[[i,"they have differing arguments"],[l],[d]]}var g=null==p?void 0:p.type,N=null==v?void 0:v.type;if(g&&N&&fi(g,N))return[[i,'they return conflicting types "'.concat(C(g),'" and "').concat(C(N),'"')],[l],[d]];var I=l.selectionSet,b=d.selectionSet;return I&&b?function(e,n,t,r){if(e.length>0)return[[n,e.map((function(e){return e[0]}))],e.reduce((function(e,n){var t=n[1];return e.concat(t)}),[t]),e.reduce((function(e,n){var t=n[2];return e.concat(t)}),[r])]}(function(e,n,t,r,i,a,o,c){var s=[],u=di(e,n,i,a),l=u[0],p=u[1],f=di(e,n,o,c),d=f[0],v=f[1];if(li(e,s,n,t,r,l,d),0!==v.length)for(var h=0;h<v.length;h++)si(e,s,n,t,r,l,v[h]);if(0!==p.length)for(var y=0;y<p.length;y++)si(e,s,n,t,r,d,p[y]);for(var m=0;m<p.length;m++)for(var E=0;E<v.length;E++)ui(e,s,n,t,r,p[m],v[E]);return s}(e,n,t,h,Fn(g),I,Fn(N),b),i,l,d):void 0}function fi(e,n){return ln(e)?!ln(n)||fi(e.ofType,n.ofType):!!ln(n)||(fn(e)?!fn(n)||fi(e.ofType,n.ofType):!!fn(n)||!(!En(e)&&!En(n))&&e!==n)}function di(e,n,t,r){var i=n.get(r);if(!i){var a=Object.create(null),o=Object.create(null);hi(e,t,r,a,o),i=[a,Object.keys(o)],n.set(r,i)}return i}function vi(e,n,t){var r=n.get(t.selectionSet);if(r)return r;var i=pr(e.getSchema(),t.typeCondition);return di(e,n,i,t.selectionSet)}function hi(e,n,t,r,i){for(var a=0,o=t.selections;a<o.length;a++){var c=o[a];switch(c.kind){case A.FIELD:var s=c.name.value,u=void 0;(Ze(n)||nn(n))&&(u=n.getFields()[s]);var l=c.alias?c.alias.value:s;r[l]||(r[l]=[]),r[l].push([n,c,u]);break;case A.FRAGMENT_SPREAD:i[c.name.value]=!0;break;case A.INLINE_FRAGMENT:var p=c.typeCondition,f=p?pr(e.getSchema(),p):n;hi(e,f,c.selectionSet,r,i)}}}var yi,mi=function(){function e(){this._data=Object.create(null)}var n=e.prototype;return n.has=function(e,n,t){var r=this._data[e],i=r&&r[n];return void 0!==i&&(!1!==t||!1===i)},n.add=function(e,n,t){this._pairSetAdd(e,n,t),this._pairSetAdd(n,e,t)},n._pairSetAdd=function(e,n,t){var r=this._data[e];r||(r=Object.create(null),this._data[e]=r),r[n]=t},e}();function Ei(e){var n=[],t=Object.create(null);return{ObjectValue:{enter:function(){n.push(t),t=Object.create(null)},leave:function(){t=n.pop()}},ObjectField:function(n){var r=n.name.value;t[r]?e.reportError(new O('There can be only one input field named "'.concat(r,'".'),[t[r],n.name])):t[r]=n.name}}}function Ti(e){var n,t,r,i=e.getSchema(),a=null!==(n=null!==(t=null!==(r=null==i?void 0:i.astNode)&&void 0!==r?r:null==i?void 0:i.getQueryType())&&void 0!==t?t:null==i?void 0:i.getMutationType())&&void 0!==n?n:null==i?void 0:i.getSubscriptionType(),o=0;return{SchemaDefinition:function(n){a?e.reportError(new O("Cannot define a new schema within a schema extension.",n)):(o>0&&e.reportError(new O("Must provide only one schema definition.",n)),++o)}}}function gi(e){var n=e.getSchema(),t=Object.create(null),r=n?{query:n.getQueryType(),mutation:n.getMutationType(),subscription:n.getSubscriptionType()}:{};return{SchemaDefinition:i,SchemaExtension:i};function i(n){for(var i,a=null!==(i=n.operationTypes)&&void 0!==i?i:[],o=0;o<a.length;o++){var c=a[o],s=c.operation,u=t[s];r[s]?e.reportError(new O("Type for ".concat(s," already defined in the schema. It cannot be redefined."),c)):u?e.reportError(new O("There can be only one ".concat(s," type in schema."),[u,c])):t[s]=c}return!1}}function Ni(e){var n=Object.create(null),t=e.getSchema();return{ScalarTypeDefinition:r,ObjectTypeDefinition:r,InterfaceTypeDefinition:r,UnionTypeDefinition:r,EnumTypeDefinition:r,InputObjectTypeDefinition:r};function r(r){var i=r.name.value;if(null==t||!t.getType(i))return n[i]?e.reportError(new O('There can be only one type named "'.concat(i,'".'),[n[i],r.name])):n[i]=r.name,!1;e.reportError(new O('Type "'.concat(i,'" already exists in the schema. It cannot also be defined in this type definition.'),r.name))}}function Ii(e){var n=e.getSchema(),t=n?n.getTypeMap():Object.create(null),r=Object.create(null);return{EnumTypeDefinition:i,EnumTypeExtension:i};function i(n){var i,a=n.name.value;r[a]||(r[a]=Object.create(null));for(var o=null!==(i=n.values)&&void 0!==i?i:[],c=r[a],s=0;s<o.length;s++){var u=o[s],l=u.name.value,p=t[a];on(p)&&p.getValue(l)?e.reportError(new O('Enum value "'.concat(a,".").concat(l,'" already exists in the schema. It cannot also be defined in this type extension.'),u.name)):c[l]?e.reportError(new O('Enum value "'.concat(a,".").concat(l,'" can only be defined once.'),[c[l],u.name])):c[l]=u.name}return!1}}function bi(e){var n=e.getSchema(),t=n?n.getTypeMap():Object.create(null),r=Object.create(null);return{InputObjectTypeDefinition:i,InputObjectTypeExtension:i,InterfaceTypeDefinition:i,InterfaceTypeExtension:i,ObjectTypeDefinition:i,ObjectTypeExtension:i};function i(n){var i,a=n.name.value;r[a]||(r[a]=Object.create(null));for(var o=null!==(i=n.fields)&&void 0!==i?i:[],c=r[a],s=0;s<o.length;s++){var u=o[s],l=u.name.value;_i(t[a],l)?e.reportError(new O('Field "'.concat(a,".").concat(l,'" already exists in the schema. It cannot also be defined in this type extension.'),u.name)):c[l]?e.reportError(new O('Field "'.concat(a,".").concat(l,'" can only be defined once.'),[c[l],u.name])):c[l]=u.name}return!1}}function _i(e,n){return!!(Ze(e)||nn(e)||sn(e))&&null!=e.getFields()[n]}function Oi(e){var n=Object.create(null),t=e.getSchema();return{DirectiveDefinition:function(r){var i=r.name.value;if(null==t||!t.getDirective(i))return n[i]?e.reportError(new O('There can be only one directive named "@'.concat(i,'".'),[n[i],r.name])):n[i]=r.name,!1;e.reportError(new O('Directive "@'.concat(i,'" already exists in the schema. It cannot be redefined.'),r.name))}}}function Di(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function wi(e){for(var n=e.getSchema(),t=Object.create(null),r=0,i=e.getDocument().definitions;r<i.length;r++){var a=i[r];Nr(a)&&(t[a.name.value]=a)}return{ScalarTypeExtension:o,ObjectTypeExtension:o,InterfaceTypeExtension:o,UnionTypeExtension:o,EnumTypeExtension:o,InputObjectTypeExtension:o};function o(r){var i,a,o=r.name.value,c=t[o],s=null==n?void 0:n.getType(o);if(c?i=Ai[c.kind]:s&&(i=$e(a=s)?A.SCALAR_TYPE_EXTENSION:Ze(a)?A.OBJECT_TYPE_EXTENSION:nn(a)?A.INTERFACE_TYPE_EXTENSION:rn(a)?A.UNION_TYPE_EXTENSION:on(a)?A.ENUM_TYPE_EXTENSION:sn(a)?A.INPUT_OBJECT_TYPE_EXTENSION:void S(0,"Unexpected type: "+C(a))),i){if(i!==r.kind){var u=function(e){switch(e){case A.SCALAR_TYPE_EXTENSION:return"scalar";case A.OBJECT_TYPE_EXTENSION:return"object";case A.INTERFACE_TYPE_EXTENSION:return"interface";case A.UNION_TYPE_EXTENSION:return"union";case A.ENUM_TYPE_EXTENSION:return"enum";case A.INPUT_OBJECT_TYPE_EXTENSION:return"input object"}S(0,"Unexpected kind: "+C(e))}(r.kind);e.reportError(new O("Cannot extend non-".concat(u,' type "').concat(o,'".'),c?[c,r]:r))}}else{var l=Object.keys(t);n&&(l=l.concat(Object.keys(n.getTypeMap())));var p=Le(o,l);e.reportError(new O('Cannot extend type "'.concat(o,'" because it is not defined.')+Se(p),r.name))}}}var Ai=(Di(yi={},A.SCALAR_TYPE_DEFINITION,A.SCALAR_TYPE_EXTENSION),Di(yi,A.OBJECT_TYPE_DEFINITION,A.OBJECT_TYPE_EXTENSION),Di(yi,A.INTERFACE_TYPE_DEFINITION,A.INTERFACE_TYPE_EXTENSION),Di(yi,A.UNION_TYPE_DEFINITION,A.UNION_TYPE_EXTENSION),Di(yi,A.ENUM_TYPE_DEFINITION,A.ENUM_TYPE_EXTENSION),Di(yi,A.INPUT_OBJECT_TYPE_DEFINITION,A.INPUT_OBJECT_TYPE_EXTENSION),yi),Si=Object.freeze([_r,Or,Dr,wr,Ar,Rr,kr,xr,Fr,Lr,Vr,jr,Cr,Pr,Ur,Mr,Br,Gr,Yr,Kr,Hr,zr,ni,ii,ci,Ei]),Ri=Object.freeze([Ti,gi,Ni,Ii,bi,Oi,Ar,Gr,Yr,wi,Xr,Hr,Ei,ti]);function ki(e,n){e.prototype=Object.create(n.prototype),e.prototype.constructor=e,e.__proto__=n}var xi=function(){function e(e,n){this._ast=e,this._fragments=void 0,this._fragmentSpreads=new Map,this._recursivelyReferencedFragments=new Map,this._onError=n}var n=e.prototype;return n.reportError=function(e){this._onError(e)},n.getDocument=function(){return this._ast},n.getFragment=function(e){var n=this._fragments;return n||(this._fragments=n=this.getDocument().definitions.reduce((function(e,n){return n.kind===A.FRAGMENT_DEFINITION&&(e[n.name.value]=n),e}),Object.create(null))),n[e]},n.getFragmentSpreads=function(e){var n=this._fragmentSpreads.get(e);if(!n){n=[];for(var t=[e];0!==t.length;)for(var r=0,i=t.pop().selections;r<i.length;r++){var a=i[r];a.kind===A.FRAGMENT_SPREAD?n.push(a):a.selectionSet&&t.push(a.selectionSet)}this._fragmentSpreads.set(e,n)}return n},n.getRecursivelyReferencedFragments=function(e){var n=this._recursivelyReferencedFragments.get(e);if(!n){n=[];for(var t=Object.create(null),r=[e.selectionSet];0!==r.length;)for(var i=r.pop(),a=0,o=this.getFragmentSpreads(i);a<o.length;a++){var c=o[a].name.value;if(!0!==t[c]){t[c]=!0;var s=this.getFragment(c);s&&(n.push(s),r.push(s.selectionSet))}}this._recursivelyReferencedFragments.set(e,n)}return n},e}(),Fi=function(e){function n(n,t,r){var i;return(i=e.call(this,n,r)||this)._schema=t,i}return ki(n,e),n.prototype.getSchema=function(){return this._schema},n}(xi),Li=function(e){function n(n,t,r,i){var a;return(a=e.call(this,t,i)||this)._schema=n,a._typeInfo=r,a._variableUsages=new Map,a._recursiveVariableUsages=new Map,a}ki(n,e);var t=n.prototype;return t.getSchema=function(){return this._schema},t.getVariableUsages=function(e){var n=this._variableUsages.get(e);if(!n){var t=[],r=new fr(this._schema);he(e,vr(r,{VariableDefinition:function(){return!1},Variable:function(e){t.push({node:e,type:r.getInputType(),defaultValue:r.getDefaultValue()})}})),n=t,this._variableUsages.set(e,n)}return n},t.getRecursiveVariableUsages=function(e){var n=this._recursiveVariableUsages.get(e);if(!n){n=this.getVariableUsages(e);for(var t=0,r=this.getRecursivelyReferencedFragments(e);t<r.length;t++){var i=r[t];n=n.concat(this.getVariableUsages(i))}this._recursiveVariableUsages.set(e,n)}return n},t.getType=function(){return this._typeInfo.getType()},t.getParentType=function(){return this._typeInfo.getParentType()},t.getInputType=function(){return this._typeInfo.getInputType()},t.getParentInputType=function(){return this._typeInfo.getParentInputType()},t.getFieldDef=function(){return this._typeInfo.getFieldDef()},t.getDirective=function(){return this._typeInfo.getDirective()},t.getArgument=function(){return this._typeInfo.getArgument()},t.getEnumValue=function(){return this._typeInfo.getEnumValue()},n}(xi);function Vi(e,n){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:Si,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:new fr(e),i=arguments.length>4&&void 0!==arguments[4]?arguments[4]:{maxErrors:void 0};n||U(0,"Must provide document."),Ht(e);var a=Object.freeze({}),o=[],c=new Li(e,n,r,(function(e){if(null!=i.maxErrors&&o.length>=i.maxErrors)throw o.push(new O("Too many validation errors, error limit reached. Validation aborted.")),a;o.push(e)})),s=ye(t.map((function(e){return e(c)})));try{he(n,vr(r,s))}catch(e){if(e!==a)throw e}return o}function ji(e,n){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:Ri,r=[],i=new Fi(e,n,(function(e){r.push(e)})),a=t.map((function(e){return e(i)}));return he(e,ye(a)),r}function Ci(e,n,t){return{prev:e,key:n,typename:t}}function Pi(e){for(var n=[],t=e;t;)n.push(t.key),t=t.prev;return n.reverse()}function Ui(e,n){if("query"===n.operation){var t=e.getQueryType();if(!t)throw new O("Schema does not define the required query root type.",n);return t}if("mutation"===n.operation){var r=e.getMutationType();if(!r)throw new O("Schema is not configured for mutations.",n);return r}if("subscription"===n.operation){var i=e.getSubscriptionType();if(!i)throw new O("Schema is not configured for subscriptions.",n);return i}throw new O("Can only have query, mutation and subscription operations.",n)}function Mi(e){return e.map((function(e){return"number"==typeof e?"["+e.toString()+"]":"."+e})).join("")}function Bi(e,n,t){if(e){if(e.kind===A.VARIABLE){var r=e.name.value;if(null==t||void 0===t[r])return;var i=t[r];if(null===i&&fn(n))return;return i}if(fn(n)){if(e.kind===A.NULL)return;return Bi(e,n.ofType,t)}if(e.kind===A.NULL)return null;if(ln(n)){var a=n.ofType;if(e.kind===A.LIST){for(var o=[],c=0,s=e.values;c<s.length;c++){var u=s[c];if(Gi(u,t)){if(fn(a))return;o.push(null)}else{var l=Bi(u,a,t);if(void 0===l)return;o.push(l)}}return o}var p=Bi(e,a,t);if(void 0===p)return;return[p]}if(sn(n)){if(e.kind!==A.OBJECT)return;for(var f=Object.create(null),d=Oe(e.fields,(function(e){return e.name.value})),v=0,h=Te(n.getFields());v<h.length;v++){var y=h[v],m=d[y.name];if(m&&!Gi(m.value,t)){var E=Bi(m.value,y.type,t);if(void 0===E)return;f[y.name]=E}else if(void 0!==y.defaultValue)f[y.name]=y.defaultValue;else if(fn(y.type))return}return f}if(En(n)){var T;try{T=n.parseLiteral(e,t)}catch(e){return}if(void 0===T)return;return T}S(0,"Unexpected input type: "+C(n))}}function Gi(e,n){return e.kind===A.VARIABLE&&(null==n||void 0===n[e.name.value])}function Yi(e,n){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:Qi;return qi(e,n,t)}function Qi(e,n,t){var r="Invalid value "+C(n);throw e.length>0&&(r+=' at "value'.concat(Mi(e),'"')),t.message=r+": "+t.message,t}function qi(e,n,t,r){if(fn(n))return null!=e?qi(e,n.ofType,t,r):void t(Pi(r),e,new O('Expected non-nullable type "'.concat(C(n),'" not to be null.')));if(null==e)return null;if(ln(n)){var i=n.ofType,a=it(e,(function(e,n){var a=Ci(r,n,void 0);return qi(e,i,t,a)}));return null!=a?a:[qi(e,i,t,r)]}if(sn(n)){if(!c(e))return void t(Pi(r),e,new O('Expected type "'.concat(n.name,'" to be an object.')));for(var o={},s=n.getFields(),u=0,l=Te(s);u<l.length;u++){var p=l[u],f=e[p.name];if(void 0!==f)o[p.name]=qi(f,p.type,t,Ci(r,p.name,n.name));else if(void 0!==p.defaultValue)o[p.name]=p.defaultValue;else if(fn(p.type)){var d=C(p.type);t(Pi(r),e,new O('Field "'.concat(p.name,'" of required type "').concat(d,'" was not provided.')))}}for(var v=0,h=Object.keys(e);v<h.length;v++){var y=h[v];if(!s[y]){var m=Le(y,Object.keys(n.getFields()));t(Pi(r),e,new O('Field "'.concat(y,'" is not defined by type "').concat(n.name,'".')+Se(m)))}}return o}if(En(n)){var E;try{E=n.parseValue(e)}catch(i){return void t(Pi(r),e,i instanceof O?i:new O('Expected type "'.concat(n.name,'". ')+i.message,void 0,void 0,void 0,void 0,i))}return void 0===E&&t(Pi(r),e,new O('Expected type "'.concat(n.name,'".'))),E}S(0,"Unexpected input type: "+C(n))}function Ji(e,n,t){for(var r,i={},a=Oe(null!==(r=n.arguments)&&void 0!==r?r:[],(function(e){return e.name.value})),o=0,c=e.args;o<c.length;o++){var s=c[o],u=s.name,l=s.type,p=a[u];if(p){var f=p.value,d=f.kind===A.NULL;if(f.kind===A.VARIABLE){var v=f.name.value;if(null==t||!Xi(t,v)){if(void 0!==s.defaultValue)i[u]=s.defaultValue;else if(fn(l))throw new O('Argument "'.concat(u,'" of required type "').concat(C(l),'" ')+'was provided the variable "$'.concat(v,'" which was not provided a runtime value.'),f);continue}d=null==t[v]}if(d&&fn(l))throw new O('Argument "'.concat(u,'" of non-null type "').concat(C(l),'" ')+"must not be null.",f);var h=Bi(f,l,t);if(void 0===h)throw new O('Argument "'.concat(u,'" has invalid value ').concat(Ce(f),"."),f);i[u]=h}else if(void 0!==s.defaultValue)i[u]=s.defaultValue;else if(fn(l))throw new O('Argument "'.concat(u,'" of required type "').concat(C(l),'" ')+"was not provided.",n)}return i}function Ki(e,n,t){var r=n.directives&&Ee(n.directives,(function(n){return n.name.value===e.name}));if(r)return Ji(e,r,t)}function Xi(e,n){return Object.prototype.hasOwnProperty.call(e,n)}function Hi(e,n,t,r,i,a,o,c){return $i(1===arguments.length?e:{schema:e,document:n,rootValue:t,contextValue:r,variableValues:i,operationName:a,fieldResolver:o,typeResolver:c})}function zi(e){var n=$i(e);if(a(n))throw new Error("GraphQL execution failed to complete synchronously.");return n}function $i(e){var n=e.schema,t=e.document,r=e.rootValue,i=e.contextValue,o=e.variableValues,c=e.operationName,s=e.fieldResolver,u=e.typeResolver;Zi(n,t,o);var l=ea(n,t,r,i,o,c,s,u);if(Array.isArray(l))return{errors:l};var p=function(e,n,t){var r=Ui(e.schema,n),i=ta(e,r,n.selectionSet,Object.create(null),Object.create(null)),o=void 0;try{var c="mutation"===n.operation?function(e,n,t,r,i){return o=Object.keys(i),c=function(r,o){var c=i[o],s=Ci(undefined,o,n.name),u=aa(e,n,t,c,s);return void 0===u?r:a(u)?u.then((function(e){return r[o]=e,r})):(r[o]=u,r)},s=Object.create(null),o.reduce((function(e,n){return a(e)?e.then((function(e){return c(e,n)})):c(e,n)}),s);var o,c,s}(e,r,t,0,i):na(e,r,t,o,i);return a(c)?c.then(void 0,(function(n){return e.errors.push(n),Promise.resolve(null)})):c}catch(n){return e.errors.push(n),null}}(l,l.operation,r);return Wi(l,p)}function Wi(e,n){return a(n)?n.then((function(n){return Wi(e,n)})):0===e.errors.length?{data:n}:{errors:e.errors,data:n}}function Zi(e,n,t){n||U(0,"Must provide document."),Ht(e),null==t||c(t)||U(0,"Variables must be provided as an Object where each property is a variable value. Perhaps look to see if an unparsed JSON string was provided.")}function ea(e,n,t,r,i,a,o,c){for(var s,u,l,p=Object.create(null),f=0,d=n.definitions;f<d.length;f++){var v=d[f];switch(v.kind){case A.OPERATION_DEFINITION:if(null==a){if(void 0!==l)return[new O("Must provide operation name if query contains multiple operations.")];l=v}else(null===(s=v.name)||void 0===s?void 0:s.value)===a&&(l=v);break;case A.FRAGMENT_DEFINITION:p[v.name.value]=v}}if(!l)return null!=a?[new O('Unknown operation named "'.concat(a,'".'))]:[new O("Must provide an operation.")];var h=function(e,n,t,r){var i=[],a=null==r?void 0:r.maxErrors;try{var o=function(e,n,t,r){for(var i={},a=function(a){var o=n[a],c=o.variable.name.value,s=pr(e,o.type);if(!vn(s)){var u=Ce(o.type);return r(new O('Variable "$'.concat(c,'" expected value of type "').concat(u,'" which cannot be used as an input type.'),o.type)),"continue"}if(!Xi(t,c)){if(o.defaultValue)i[c]=Bi(o.defaultValue,s);else if(fn(s)){var l=C(s);r(new O('Variable "$'.concat(c,'" of required type "').concat(l,'" was not provided.'),o))}return"continue"}var p=t[c];if(null===p&&fn(s)){var f=C(s);return r(new O('Variable "$'.concat(c,'" of non-null type "').concat(f,'" must not be null.'),o)),"continue"}i[c]=Yi(p,s,(function(e,n,t){var i='Variable "$'.concat(c,'" got invalid value ')+C(n);e.length>0&&(i+=' at "'.concat(c).concat(Mi(e),'"')),r(new O(i+"; "+t.message,o,void 0,void 0,void 0,t.originalError))}))},o=0;o<n.length;o++)a(o);return i}(e,n,t,(function(e){if(null!=a&&i.length>=a)throw new O("Too many errors processing variables, error limit reached. Execution aborted.");i.push(e)}));if(0===i.length)return{coerced:o}}catch(e){i.push(e)}return{errors:i}}(e,null!==(u=l.variableDefinitions)&&void 0!==u?u:[],null!=i?i:{},{maxErrors:50});return h.errors?h.errors:{schema:e,fragments:p,rootValue:t,contextValue:r,operation:l,variableValues:h.coerced,fieldResolver:null!=o?o:ma,typeResolver:null!=c?c:ya,errors:[]}}function na(e,n,t,r,i){for(var o,c,s,u=Object.create(null),l=!1,p=0,f=Object.keys(i);p<f.length;p++){var d=f[p],v=aa(e,n,t,i[d],Ci(r,d,n.name));void 0!==v&&(u[d]=v,a(v)&&(l=!0))}return l?(o=u,s=(c=Object.keys(o)).map((function(e){return o[e]})),Promise.all(s).then((function(e){return e.reduce((function(e,n,t){return e[c[t]]=n,e}),Object.create(null))}))):u}function ta(e,n,t,r,i){for(var a=0,o=t.selections;a<o.length;a++){var c=o[a];switch(c.kind){case A.FIELD:if(!ra(e,c))continue;var s=(p=c).alias?p.alias.value:p.name.value;r[s]||(r[s]=[]),r[s].push(c);break;case A.INLINE_FRAGMENT:if(!ra(e,c)||!ia(e,c,n))continue;ta(e,n,c.selectionSet,r,i);break;case A.FRAGMENT_SPREAD:var u=c.name.value;if(i[u]||!ra(e,c))continue;i[u]=!0;var l=e.fragments[u];if(!l||!ia(e,l,n))continue;ta(e,n,l.selectionSet,r,i)}}var p;return r}function ra(e,n){var t=Ki(Ct,n,e.variableValues);if(!0===(null==t?void 0:t.if))return!1;var r=Ki(jt,n,e.variableValues);return!1!==(null==r?void 0:r.if)}function ia(e,n,t){var r=n.typeCondition;if(!r)return!0;var i=pr(e.schema,r);return i===t||!!In(i)&&e.schema.isSubType(i,t)}function aa(e,n,t,r,i){var o,c=r[0].name.value,s=Ea(e.schema,n,c);if(s){var u=s.type,l=null!==(o=s.resolve)&&void 0!==o?o:e.fieldResolver,p=oa(e,s,r,n,i);try{var f,d=l(t,Ji(s,r[0],e.variableValues),e.contextValue,p);return f=a(d)?d.then((function(n){return sa(e,u,r,p,i,n)})):sa(e,u,r,p,i,d),a(f)?f.then(void 0,(function(n){return ca(ge(n,r,Pi(i)),u,e)})):f}catch(n){return ca(ge(n,r,Pi(i)),u,e)}}}function oa(e,n,t,r,i){return{fieldName:n.name,fieldNodes:t,returnType:n.type,parentType:r,path:i,schema:e.schema,fragments:e.fragments,rootValue:e.rootValue,operation:e.operation,variableValues:e.variableValues}}function ca(e,n,t){if(fn(n))throw e;return t.errors.push(e),null}function sa(e,n,t,r,i,o){if(o instanceof Error)throw o;if(fn(n)){var c=sa(e,n.ofType,t,r,i,o);if(null===c)throw new Error("Cannot return null for non-nullable field ".concat(r.parentType.name,".").concat(r.fieldName,"."));return c}return null==o?null:ln(n)?function(e,n,t,r,i,o){var c=n.ofType,s=!1,u=it(o,(function(n,o){var u=Ci(i,o,void 0);try{var l;return l=a(n)?n.then((function(n){return sa(e,c,t,r,u,n)})):sa(e,c,t,r,u,n),a(l)?(s=!0,l.then(void 0,(function(n){return ca(ge(n,t,Pi(u)),c,e)}))):l}catch(n){return ca(ge(n,t,Pi(u)),c,e)}}));if(null==u)throw new O('Expected Iterable, but did not find one for field "'.concat(r.parentType.name,".").concat(r.fieldName,'".'));return s?Promise.all(u):u}(e,n,t,r,i,o):En(n)?function(e,n){var t=e.serialize(n);if(void 0===t)throw new Error('Expected a value of type "'.concat(C(e),'" but ')+"received: ".concat(C(n)));return t}(n,o):In(n)?function(e,n,t,r,i,o){var c,s=null!==(c=n.resolveType)&&void 0!==c?c:e.typeResolver,u=e.contextValue,l=s(o,u,r,n);return a(l)?l.then((function(a){return la(e,ua(a,e,n,t,r,o),t,r,i,o)})):la(e,ua(l,e,n,t,r,o),t,r,i,o)}(e,n,t,r,i,o):Ze(n)?la(e,n,t,r,i,o):void S(0,"Cannot complete value of unexpected output type: "+C(n))}function ua(e,n,t,r,i,a){if(null==e)throw new O('Abstract type "'.concat(t.name,'" must resolve to an Object type at runtime for field "').concat(i.parentType.name,".").concat(i.fieldName,'". Either the "').concat(t.name,'" type should provide a "resolveType" function or each possible type should provide an "isTypeOf" function.'),r);var o=kn(e)?e.name:e;if("string"!=typeof o)throw new O('Abstract type "'.concat(t.name,'" must resolve to an Object type at runtime for field "').concat(i.parentType.name,".").concat(i.fieldName,'" with ')+"value ".concat(C(a),', received "').concat(C(e),'".'));var c=n.schema.getType(o);if(null==c)throw new O('Abstract type "'.concat(t.name,'" was resolve to a type "').concat(o,'" that does not exist inside schema.'),r);if(!Ze(c))throw new O('Abstract type "'.concat(t.name,'" was resolve to a non-object type "').concat(o,'".'),r);if(!n.schema.isSubType(t,c))throw new O('Runtime Object type "'.concat(c.name,'" is not a possible type for "').concat(t.name,'".'),r);return c}function la(e,n,t,r,i,o){if(n.isTypeOf){var c=n.isTypeOf(o,e.contextValue,r);if(a(c))return c.then((function(r){if(!r)throw pa(n,o,t);return fa(e,n,t,i,o)}));if(!c)throw pa(n,o,t)}return fa(e,n,t,i,o)}function pa(e,n,t){return new O('Expected value of type "'.concat(e.name,'" but got: ').concat(C(n),"."),t)}function fa(e,n,t,r,i){return na(e,n,i,r,ha(e,n,t))}var da,va,ha=(da=function(e,n,t){for(var r=Object.create(null),i=Object.create(null),a=0;a<t.length;a++){var o=t[a];o.selectionSet&&(r=ta(e,n,o.selectionSet,r,i))}return r},function(e,n,t){va||(va=new WeakMap);var r,i=va.get(e);if(i){if(r=i.get(n)){var a=r.get(t);if(void 0!==a)return a}}else i=new WeakMap,va.set(e,i);r||(r=new WeakMap,i.set(n,r));var o=da(e,n,t);return r.set(t,o),o}),ya=function(e,n,t,r){if(c(e)&&"string"==typeof e.__typename)return e.__typename;for(var i=t.schema.getPossibleTypes(r),o=[],s=0;s<i.length;s++){var u=i[s];if(u.isTypeOf){var l=u.isTypeOf(e,n,t);if(a(l))o[s]=l;else if(l)return u.name}}return o.length?Promise.all(o).then((function(e){for(var n=0;n<e.length;n++)if(e[n])return i[n].name})):void 0},ma=function(e,n,t,r){if(c(e)||"function"==typeof e){var i=e[r.fieldName];return"function"==typeof i?e[r.fieldName](n,t,r):i}};function Ea(e,n,t){return t===wt.name&&e.getQueryType()===n?wt:t===At.name&&e.getQueryType()===n?At:t===St.name?St:n.getFields()[t]}function Ta(e,n,t,r,i,a,o,c){var s=arguments;return new Promise((function(u){return u(1===s.length?Na(e):Na({schema:e,source:n,rootValue:t,contextValue:r,variableValues:i,operationName:a,fieldResolver:o,typeResolver:c}))}))}function ga(e,n,t,r,i,o,c,s){var u=Na(1===arguments.length?e:{schema:e,source:n,rootValue:t,contextValue:r,variableValues:i,operationName:o,fieldResolver:c,typeResolver:s});if(a(u))throw new Error("GraphQL execution failed to complete synchronously.");return u}function Na(e){var n,t=e.schema,r=e.source,i=e.rootValue,a=e.contextValue,o=e.variableValues,c=e.operationName,s=e.fieldResolver,u=e.typeResolver,l=Xt(t);if(l.length>0)return{errors:l};try{n=ce(r)}catch(e){return{errors:[e]}}var p=Vi(t,n);return p.length>0?{errors:p}:Hi({schema:t,document:n,rootValue:i,contextValue:a,variableValues:o,operationName:c,fieldResolver:s,typeResolver:u})}function Ia(e){return"function"==typeof(null==e?void 0:e[u])}function ba(e,n){return new Promise((function(t){return t(n(e))}))}function _a(e){return{value:e,done:!1}}function Oa(e,n,t,r,i,a,o,c){return wa(1===arguments.length?e:{schema:e,document:n,rootValue:t,contextValue:r,variableValues:i,operationName:a,fieldResolver:o,subscribeFieldResolver:c})}function Da(e){if(e instanceof O)return{errors:[e]};throw e}function wa(e){var n=e.schema,t=e.document,r=e.rootValue,i=e.contextValue,a=e.variableValues,o=e.operationName,c=e.fieldResolver,s=e.subscribeFieldResolver,l=Aa(n,t,r,i,a,o,s),p=function(e){return Hi({schema:n,document:t,rootValue:e,contextValue:i,variableValues:a,operationName:o,fieldResolver:c})};return l.then((function(e){return Ia(e)?function(e,n,t){var r,i,a,o,c,s,l=e[u].call(e);function p(e){return e.done?e:ba(e.value,n).then(_a,i)}if("function"==typeof l.return&&(r=l.return,i=function(e){var n=function(){return Promise.reject(e)};return r.call(l).then(n,n)}),t){var f=t;a=function(e){return ba(e,f).then(_a,i)}}return s=function(){return this},(c=u)in(o={next:function(){return l.next().then(p,a)},return:function(){return r?r.call(l).then(p,a):Promise.resolve({value:void 0,done:!0})},throw:function(e){return"function"==typeof l.throw?l.throw(e).then(p,a):Promise.reject(e).catch(i)}})?Object.defineProperty(o,c,{value:s,enumerable:!0,configurable:!0,writable:!0}):o[c]=s,o}(e,p,Da):e}))}function Aa(e,n,t,r,i,a,o){return Zi(e,n,i),new Promise((function(c){var s=ea(e,n,t,r,i,a,o);c(Array.isArray(s)?{errors:s}:function(e){var n=e.schema,t=e.operation,r=e.variableValues,i=e.rootValue,a=Ui(n,t),o=ta(e,a,t.selectionSet,Object.create(null),Object.create(null)),c=Object.keys(o)[0],s=o[c],u=s[0].name.value,l=Ea(n,a,u);if(!l)throw new O('The subscription field "'.concat(u,'" is not defined.'),s);var p=Ci(void 0,c,a.name),f=oa(e,l,s,a,p);return new Promise((function(n){var t,a=Ji(l,s[0],r),o=e.contextValue;n((null!==(t=l.subscribe)&&void 0!==t?t:e.fieldResolver)(i,a,o,f))})).then((function(e){if(e instanceof Error)throw ge(e,s,Pi(p));if(!Ia(e))throw new Error("Subscription field must return Async Iterable. "+"Received: ".concat(C(e),"."));return e}),(function(e){throw ge(e,s,Pi(p))}))}(s))})).catch(Da)}function Sa(e){return{Field:function(n){var t=e.getFieldDef(),r=null==t?void 0:t.deprecationReason;if(t&&null!=r){var i=e.getParentType();null!=i||S(0),e.reportError(new O("The field ".concat(i.name,".").concat(t.name," is deprecated. ").concat(r),n))}},Argument:function(n){var t=e.getArgument(),r=null==t?void 0:t.deprecationReason;if(t&&null!=r){var i=e.getDirective();if(null!=i)e.reportError(new O('Directive "@'.concat(i.name,'" argument "').concat(t.name,'" is deprecated. ').concat(r),n));else{var a=e.getParentType(),o=e.getFieldDef();null!=a&&null!=o||S(0),e.reportError(new O('Field "'.concat(a.name,".").concat(o.name,'" argument "').concat(t.name,'" is deprecated. ').concat(r),n))}}},ObjectField:function(n){var t=Fn(e.getParentInputType());if(sn(t)){var r=t.getFields()[n.name.value],i=null==r?void 0:r.deprecationReason;null!=i&&e.reportError(new O("The input field ".concat(t.name,".").concat(r.name," is deprecated. ").concat(i),n))}},EnumValue:function(n){var t=e.getEnumValue(),r=null==t?void 0:t.deprecationReason;if(t&&null!=r){var i=Fn(e.getInputType());null!=i||S(0),e.reportError(new O('The enum value "'.concat(i.name,".").concat(t.name,'" is deprecated. ').concat(r),n))}}}}function Ra(e){return{Field:function(n){var t=Fn(e.getType());t&&kt(t)&&e.reportError(new O('GraphQL introspection has been disabled, but the requested query contained the field "'.concat(n.name.value,'".'),n))}}}function ka(e){var n;e||U(0,"Received null or undefined error.");var t=null!==(n=e.message)&&void 0!==n?n:"An unknown error occurred.",r=e.locations,i=e.path,a=e.extensions;return a?{message:t,locations:r,path:i,extensions:a}:{message:t,locations:r,path:i}}function xa(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Fa(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function La(e){var n=function(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?xa(Object(t),!0).forEach((function(n){Fa(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):xa(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}({descriptions:!0,specifiedByUrl:!1,directiveIsRepeatable:!1,schemaDescription:!1,inputValueDeprecation:!1},e),t=n.descriptions?"description":"",r=n.specifiedByUrl?"specifiedByUrl":"",i=n.directiveIsRepeatable?"isRepeatable":"",a=n.schemaDescription?t:"";function o(e){return n.inputValueDeprecation?e:""}return"\n    query IntrospectionQuery {\n      __schema {\n        ".concat(a,"\n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          ").concat(t,"\n          ").concat(i,"\n          locations\n          args").concat(o("(includeDeprecated: true)")," {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      ").concat(t,"\n      ").concat(r,"\n      fields(includeDeprecated: true) {\n        name\n        ").concat(t,"\n        args").concat(o("(includeDeprecated: true)")," {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields").concat(o("(includeDeprecated: true)")," {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        ").concat(t,"\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      ").concat(t,"\n      type { ...TypeRef }\n      defaultValue\n      ").concat(o("isDeprecated"),"\n      ").concat(o("deprecationReason"),"\n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ")}function Va(e,n){for(var t=null,r=0,i=e.definitions;r<i.length;r++){var a,o=i[r];if(o.kind===A.OPERATION_DEFINITION)if(null==n){if(t)return null;t=o}else if((null===(a=o.name)||void 0===a?void 0:a.value)===n)return o}return t}function ja(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Ca(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function Pa(e,n){var t=zi({schema:e,document:ce(La(function(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?ja(Object(t),!0).forEach((function(n){Ca(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ja(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}({specifiedByUrl:!0,directiveIsRepeatable:!0,schemaDescription:!0,inputValueDeprecation:!0},n)))});return!t.errors&&t.data||S(0),t.data}function Ua(e,n){c(e)&&c(e.__schema)||U(0,'Invalid or incomplete introspection result. Ensure that you are passing "data" property of introspection response and no "errors" was returned alongside: '.concat(C(e),"."));for(var t=e.__schema,r=Ae(t.types,(function(e){return e.name}),(function(e){return function(e){if(null!=e&&null!=e.name&&null!=e.kind)switch(e.kind){case Ot.SCALAR:return new jn({name:(r=e).name,description:r.description,specifiedByUrl:r.specifiedByUrl});case Ot.OBJECT:return new Cn({name:(t=e).name,description:t.description,interfaces:function(){return y(t)},fields:function(){return m(t)}});case Ot.INTERFACE:return new Qn({name:(n=e).name,description:n.description,interfaces:function(){return y(n)},fields:function(){return m(n)}});case Ot.UNION:return function(e){if(!e.possibleTypes){var n=C(e);throw new Error("Introspection result missing possibleTypes: ".concat(n,"."))}return new qn({name:e.name,description:e.description,types:function(){return e.possibleTypes.map(v)}})}(e);case Ot.ENUM:return function(e){if(!e.enumValues){var n=C(e);throw new Error("Introspection result missing enumValues: ".concat(n,"."))}return new Kn({name:e.name,description:e.description,values:Ae(e.enumValues,(function(e){return e.name}),(function(e){return{description:e.description,deprecationReason:e.deprecationReason}}))})}(e);case Ot.INPUT_OBJECT:return function(e){if(!e.inputFields){var n=C(e);throw new Error("Introspection result missing inputFields: ".concat(n,"."))}return new Hn({name:e.name,description:e.description,fields:function(){return T(e.inputFields)}})}(e)}var n,t,r,i=C(e);throw new Error("Invalid or incomplete introspection result. Ensure that a full introspection query is used in order to build a client schema: ".concat(i,"."))}(e)})),i=0,a=[].concat(vt,Rt);i<a.length;i++){var o=a[i];r[o.name]&&(r[o.name]=o)}var s=t.queryType?v(t.queryType):null,u=t.mutationType?v(t.mutationType):null,l=t.subscriptionType?v(t.subscriptionType):null,p=t.directives?t.directives.map((function(e){if(!e.args){var n=C(e);throw new Error("Introspection result missing directive args: ".concat(n,"."))}if(!e.locations){var t=C(e);throw new Error("Introspection result missing directive locations: ".concat(t,"."))}return new Vt({name:e.name,description:e.description,isRepeatable:e.isRepeatable,locations:e.locations.slice(),args:T(e.args)})})):[];return new Jt({description:t.description,query:s,mutation:u,subscription:l,types:Te(r),directives:p,assumeValid:null==n?void 0:n.assumeValid});function f(e){if(e.kind===Ot.LIST){var n=e.ofType;if(!n)throw new Error("Decorated type deeper than introspection query.");return new _n(f(n))}if(e.kind===Ot.NON_NULL){var t=e.ofType;if(!t)throw new Error("Decorated type deeper than introspection query.");return new On(Sn(f(t)))}return d(e)}function d(e){var n=e.name;if(!n)throw new Error("Unknown type reference: ".concat(C(e),"."));var t=r[n];if(!t)throw new Error("Invalid or incomplete schema, unknown type: ".concat(n,". Ensure that a full introspection query is used in order to build a client schema."));return t}function v(e){return en(d(e))}function h(e){return tn(d(e))}function y(e){if(null===e.interfaces&&e.kind===Ot.INTERFACE)return[];if(!e.interfaces){var n=C(e);throw new Error("Introspection result missing interfaces: ".concat(n,"."))}return e.interfaces.map(h)}function m(e){if(!e.fields)throw new Error("Introspection result missing fields: ".concat(C(e),"."));return Ae(e.fields,(function(e){return e.name}),E)}function E(e){var n=f(e.type);if(!yn(n)){var t=C(n);throw new Error("Introspection must provide output type for fields, but received: ".concat(t,"."))}if(!e.args){var r=C(e);throw new Error("Introspection result missing field args: ".concat(r,"."))}return{description:e.description,deprecationReason:e.deprecationReason,type:n,args:T(e.args)}}function T(e){return Ae(e,(function(e){return e.name}),g)}function g(e){var n=f(e.type);if(!vn(n)){var t=C(n);throw new Error("Introspection must provide input type for arguments, but received: ".concat(t,"."))}var r=null!=e.defaultValue?Bi(se(e.defaultValue),n):void 0;return{description:e.description,type:n,defaultValue:r,deprecationReason:e.deprecationReason}}}function Ma(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Ba(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Ma(Object(t),!0).forEach((function(n){Ga(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Ma(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function Ga(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function Ya(e,n,t){qt(e),null!=n&&n.kind===A.DOCUMENT||U(0,"Must provide valid Document AST."),!0!==(null==t?void 0:t.assumeValid)&&!0!==(null==t?void 0:t.assumeValidSDL)&&function(e,n){var t=ji(e,n);if(0!==t.length)throw new Error(t.map((function(e){return e.message})).join("\n\n"))}(n,e);var r=e.toConfig(),i=Qa(r,n,t);return r===i?e:new Jt(i)}function Qa(e,n,t){for(var r,i,a,o,c,s=[],u=Object.create(null),l=[],p=[],f=0,d=n.definitions;f<d.length;f++){var v=d[f];if(v.kind===A.SCHEMA_DEFINITION)c=v;else if(v.kind===A.SCHEMA_EXTENSION)p.push(v);else if(Nr(v))s.push(v);else if(br(v)){var h=v.name.value,y=u[h];u[h]=y?y.concat([v]):[v]}else v.kind===A.DIRECTIVE_DEFINITION&&l.push(v)}if(0===Object.keys(u).length&&0===s.length&&0===l.length&&0===p.length&&null==c)return e;for(var m=Object.create(null),E=0,T=e.types;E<T.length;E++){var g=T[E];m[g.name]=kt(N=g)||ht(N)?N:$e(N)?function(e){for(var n,t=e.toConfig(),r=null!==(n=u[t.name])&&void 0!==n?n:[],i=t.specifiedByUrl,a=0;a<r.length;a++){var o;i=null!==(o=Ka(r[a]))&&void 0!==o?o:i}return new jn(Ba(Ba({},t),{},{specifiedByUrl:i,extensionASTNodes:t.extensionASTNodes.concat(r)}))}(N):Ze(N)?function(e){var n,t=e.toConfig(),r=null!==(n=u[t.name])&&void 0!==n?n:[];return new Cn(Ba(Ba({},t),{},{interfaces:function(){return[].concat(e.getInterfaces().map(R),B(r))},fields:function(){return Ba(Ba({},De(t.fields,k)),j(r))},extensionASTNodes:t.extensionASTNodes.concat(r)}))}(N):nn(N)?function(e){var n,t=e.toConfig(),r=null!==(n=u[t.name])&&void 0!==n?n:[];return new Qn(Ba(Ba({},t),{},{interfaces:function(){return[].concat(e.getInterfaces().map(R),B(r))},fields:function(){return Ba(Ba({},De(t.fields,k)),j(r))},extensionASTNodes:t.extensionASTNodes.concat(r)}))}(N):rn(N)?function(e){var n,t=e.toConfig(),r=null!==(n=u[t.name])&&void 0!==n?n:[];return new qn(Ba(Ba({},t),{},{types:function(){return[].concat(e.getTypes().map(R),G(r))},extensionASTNodes:t.extensionASTNodes.concat(r)}))}(N):on(N)?function(e){var n,t=e.toConfig(),r=null!==(n=u[e.name])&&void 0!==n?n:[];return new Kn(Ba(Ba({},t),{},{values:Ba(Ba({},t.values),M(r)),extensionASTNodes:t.extensionASTNodes.concat(r)}))}(N):sn(N)?function(e){var n,t=e.toConfig(),r=null!==(n=u[t.name])&&void 0!==n?n:[];return new Hn(Ba(Ba({},t),{},{fields:function(){return Ba(Ba({},De(t.fields,(function(e){return Ba(Ba({},e),{},{type:w(e.type)})}))),U(r))},extensionASTNodes:t.extensionASTNodes.concat(r)}))}(N):void S(0,"Unexpected type: "+C(N))}for(var N,I=0;I<s.length;I++){var b,_=s[I],O=_.name.value;m[O]=null!==(b=qa[O])&&void 0!==b?b:Y(_)}var D=Ba(Ba({query:e.query&&R(e.query),mutation:e.mutation&&R(e.mutation),subscription:e.subscription&&R(e.subscription)},c&&F([c])),F(p));return Ba(Ba({description:null===(r=c)||void 0===r||null===(i=r.description)||void 0===i?void 0:i.value},D),{},{types:Te(m),directives:[].concat(e.directives.map((function(e){var n=e.toConfig();return new Vt(Ba(Ba({},n),{},{args:De(n.args,x)}))})),l.map((function(e){var n=e.locations.map((function(e){return e.value}));return new Vt({name:e.name.value,description:Xa(e,t),locations:n,isRepeatable:e.repeatable,args:P(e.arguments),astNode:e})}))),extensions:void 0,astNode:null!==(a=c)&&void 0!==a?a:e.astNode,extensionASTNodes:e.extensionASTNodes.concat(p),assumeValid:null!==(o=null==t?void 0:t.assumeValid)&&void 0!==o&&o});function w(e){return ln(e)?new _n(w(e.ofType)):fn(e)?new On(w(e.ofType)):R(e)}function R(e){return m[e.name]}function k(e){return Ba(Ba({},e),{},{type:w(e.type),args:De(e.args,x)})}function x(e){return Ba(Ba({},e),{},{type:w(e.type)})}function F(e){for(var n={},t=0;t<e.length;t++)for(var r,i=null!==(r=e[t].operationTypes)&&void 0!==r?r:[],a=0;a<i.length;a++){var o=i[a];n[o.operation]=L(o.type)}return n}function L(e){var n,t=e.name.value,r=null!==(n=qa[t])&&void 0!==n?n:m[t];if(void 0===r)throw new Error('Unknown type: "'.concat(t,'".'));return r}function V(e){return e.kind===A.LIST_TYPE?new _n(V(e.type)):e.kind===A.NON_NULL_TYPE?new On(V(e.type)):L(e)}function j(e){for(var n=Object.create(null),r=0;r<e.length;r++)for(var i,a=null!==(i=e[r].fields)&&void 0!==i?i:[],o=0;o<a.length;o++){var c=a[o];n[c.name.value]={type:V(c.type),description:Xa(c,t),args:P(c.arguments),deprecationReason:Ja(c),astNode:c}}return n}function P(e){for(var n=null!=e?e:[],r=Object.create(null),i=0;i<n.length;i++){var a=n[i],o=V(a.type);r[a.name.value]={type:o,description:Xa(a,t),defaultValue:Bi(a.defaultValue,o),deprecationReason:Ja(a),astNode:a}}return r}function U(e){for(var n=Object.create(null),r=0;r<e.length;r++)for(var i,a=null!==(i=e[r].fields)&&void 0!==i?i:[],o=0;o<a.length;o++){var c=a[o],s=V(c.type);n[c.name.value]={type:s,description:Xa(c,t),defaultValue:Bi(c.defaultValue,s),deprecationReason:Ja(c),astNode:c}}return n}function M(e){for(var n=Object.create(null),r=0;r<e.length;r++)for(var i,a=null!==(i=e[r].values)&&void 0!==i?i:[],o=0;o<a.length;o++){var c=a[o];n[c.name.value]={description:Xa(c,t),deprecationReason:Ja(c),astNode:c}}return n}function B(e){for(var n=[],t=0;t<e.length;t++)for(var r,i=null!==(r=e[t].interfaces)&&void 0!==r?r:[],a=0;a<i.length;a++){var o=i[a];n.push(L(o))}return n}function G(e){for(var n=[],t=0;t<e.length;t++)for(var r,i=null!==(r=e[t].types)&&void 0!==r?r:[],a=0;a<i.length;a++){var o=i[a];n.push(L(o))}return n}function Y(e){var n,r=e.name.value,i=Xa(e,t),a=null!==(n=u[r])&&void 0!==n?n:[];switch(e.kind){case A.OBJECT_TYPE_DEFINITION:var o=a,c=[e].concat(o);return new Cn({name:r,description:i,interfaces:function(){return B(c)},fields:function(){return j(c)},astNode:e,extensionASTNodes:o});case A.INTERFACE_TYPE_DEFINITION:var s=a,l=[e].concat(s);return new Qn({name:r,description:i,interfaces:function(){return B(l)},fields:function(){return j(l)},astNode:e,extensionASTNodes:s});case A.ENUM_TYPE_DEFINITION:var p=a,f=[e].concat(p);return new Kn({name:r,description:i,values:M(f),astNode:e,extensionASTNodes:p});case A.UNION_TYPE_DEFINITION:var d=a,v=[e].concat(d);return new qn({name:r,description:i,types:function(){return G(v)},astNode:e,extensionASTNodes:d});case A.SCALAR_TYPE_DEFINITION:var h=a;return new jn({name:r,description:i,specifiedByUrl:Ka(e),astNode:e,extensionASTNodes:h});case A.INPUT_OBJECT_TYPE_DEFINITION:var y=a,m=[e].concat(y);return new Hn({name:r,description:i,fields:function(){return U(m)},astNode:e,extensionASTNodes:y})}S(0,"Unexpected type definition node: "+C(e))}}var qa=Oe(vt.concat(Rt),(function(e){return e.name}));function Ja(e){var n=Ki(Ut,e);return null==n?void 0:n.reason}function Ka(e){var n=Ki(Mt,e);return null==n?void 0:n.url}function Xa(e,n){if(e.description)return e.description.value;if(!0===(null==n?void 0:n.commentDescriptions)){var t=function(e){var n=e.loc;if(n){for(var t=[],r=n.startToken.prev;null!=r&&r.kind===V.COMMENT&&r.next&&r.prev&&r.line+1===r.next.line&&r.line!==r.prev.line;){var i=String(r.value);t.push(i),r=r.prev}return t.length>0?t.reverse().join("\n"):void 0}}(e);if(void 0!==t)return q("\n"+t)}}function Ha(e,n){null!=e&&e.kind===A.DOCUMENT||U(0,"Must provide valid Document AST."),!0!==(null==n?void 0:n.assumeValid)&&!0!==(null==n?void 0:n.assumeValidSDL)&&function(e){var n=ji(e);if(0!==n.length)throw new Error(n.map((function(e){return e.message})).join("\n\n"))}(e);var t=Qa({description:void 0,types:[],directives:[],extensions:void 0,extensionASTNodes:[],assumeValid:!1},e,n);if(null==t.astNode)for(var r=0,i=t.types;r<i.length;r++){var a=i[r];switch(a.name){case"Query":t.query=a;break;case"Mutation":t.mutation=a;break;case"Subscription":t.subscription=a}}for(var o=t.directives,c=function(e){var n=Bt[e];o.every((function(e){return e.name!==n.name}))&&o.push(n)},s=0;s<Bt.length;s++)c(s);return new Jt(t)}function za(e,n){return Ha(ce(e,{noLocation:null==n?void 0:n.noLocation,allowLegacySDLEmptyFields:null==n?void 0:n.allowLegacySDLEmptyFields,allowLegacySDLImplementsInterfaces:null==n?void 0:n.allowLegacySDLImplementsInterfaces,experimentalFragmentVariables:null==n?void 0:n.experimentalFragmentVariables}),{commentDescriptions:null==n?void 0:n.commentDescriptions,assumeValidSDL:null==n?void 0:n.assumeValidSDL,assumeValid:null==n?void 0:n.assumeValid})}function $a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Wa(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?$a(Object(t),!0).forEach((function(n){Za(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):$a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function Za(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function eo(e){var n=e.toConfig(),t=Ae(to(n.types),(function(e){return e.name}),(function(e){if($e(e)||kt(e))return e;if(Ze(e)){var n=e.toConfig();return new Cn(Wa(Wa({},n),{},{interfaces:function(){return s(n.interfaces)},fields:function(){return c(n.fields)}}))}if(nn(e)){var t=e.toConfig();return new Qn(Wa(Wa({},t),{},{interfaces:function(){return s(t.interfaces)},fields:function(){return c(t.fields)}}))}if(rn(e)){var i=e.toConfig();return new qn(Wa(Wa({},i),{},{types:function(){return s(i.types)}}))}if(on(e)){var a=e.toConfig();return new Kn(Wa(Wa({},a),{},{values:no(a.values)}))}if(sn(e)){var o=e.toConfig();return new Hn(Wa(Wa({},o),{},{fields:function(){return no(o.fields,(function(e){return Wa(Wa({},e),{},{type:r(e.type)})}))}}))}S(0,"Unexpected type: "+C(e))}));return new Jt(Wa(Wa({},n),{},{types:Te(t),directives:to(n.directives).map((function(e){var n=e.toConfig();return new Vt(Wa(Wa({},n),{},{locations:ro(n.locations,(function(e){return e})),args:o(n.args)}))})),query:a(n.query),mutation:a(n.mutation),subscription:a(n.subscription)}));function r(e){return ln(e)?new _n(r(e.ofType)):fn(e)?new On(r(e.ofType)):i(e)}function i(e){return t[e.name]}function a(e){return e&&i(e)}function o(e){return no(e,(function(e){return Wa(Wa({},e),{},{type:r(e.type)})}))}function c(e){return no(e,(function(e){return Wa(Wa({},e),{},{type:r(e.type),args:o(e.args)})}))}function s(e){return to(e).map(i)}}function no(e,n){for(var t=Object.create(null),r=ro(Object.keys(e),(function(e){return e})),i=0;i<r.length;i++){var a=r[i],o=e[a];t[a]=n?n(o):o}return t}function to(e){return ro(e,(function(e){return e.name}))}function ro(e,n){return e.slice().sort((function(e,t){return ke(n(e),n(t))}))}function io(e,n){return co(e,(function(e){return!Gt(e)}),oo,n)}function ao(e,n){return co(e,Gt,kt,n)}function oo(e){return!ht(e)&&!kt(e)}function co(e,n,t,r){var i=e.getDirectives().filter(n),a=Te(e.getTypeMap()).filter(t);return[so(e)].concat(i.map((function(e){return function(e,n){return mo(n,e)+"directive @"+e.name+vo(n,e.args)+(e.isRepeatable?" repeatable":"")+" on "+e.locations.join(" | ")}(e,r)})),a.map((function(e){return uo(e,r)}))).filter(Boolean).join("\n\n")+"\n"}function so(e){if(null!=e.description||!function(e){var n=e.getQueryType();if(n&&"Query"!==n.name)return!1;var t=e.getMutationType();if(t&&"Mutation"!==t.name)return!1;var r=e.getSubscriptionType();return!r||"Subscription"===r.name}(e)){var n=[],t=e.getQueryType();t&&n.push("  query: ".concat(t.name));var r=e.getMutationType();r&&n.push("  mutation: ".concat(r.name));var i=e.getSubscriptionType();return i&&n.push("  subscription: ".concat(i.name)),mo({},e)+"schema {\n".concat(n.join("\n"),"\n}")}}function uo(e,n){return $e(e)?function(e,n){return mo(n,e)+"scalar ".concat(e.name)+function(e){if(null==e.specifiedByUrl)return"";var n=yt(e.specifiedByUrl,pt);return n||S(0,"Unexpected null value returned from `astFromValue` for specifiedByUrl")," @specifiedBy(url: "+Ce(n)+")"}(e)}(e,n):Ze(e)?function(e,n){return mo(n,e)+"type ".concat(e.name)+lo(e)+po(n,e)}(e,n):nn(e)?function(e,n){return mo(n,e)+"interface ".concat(e.name)+lo(e)+po(n,e)}(e,n):rn(e)?function(e,n){var t=e.getTypes(),r=t.length?" = "+t.join(" | "):"";return mo(n,e)+"union "+e.name+r}(e,n):on(e)?function(e,n){var t=e.getValues().map((function(e,t){return mo(n,e,"  ",!t)+"  "+e.name+yo(e.deprecationReason)}));return mo(n,e)+"enum ".concat(e.name)+fo(t)}(e,n):sn(e)?function(e,n){var t=Te(e.getFields()).map((function(e,t){return mo(n,e,"  ",!t)+"  "+ho(e)}));return mo(n,e)+"input ".concat(e.name)+fo(t)}(e,n):void S(0,"Unexpected type: "+C(e))}function lo(e){var n=e.getInterfaces();return n.length?" implements "+n.map((function(e){return e.name})).join(" & "):""}function po(e,n){return fo(Te(n.getFields()).map((function(n,t){return mo(e,n,"  ",!t)+"  "+n.name+vo(e,n.args,"  ")+": "+String(n.type)+yo(n.deprecationReason)})))}function fo(e){return 0!==e.length?" {\n"+e.join("\n")+"\n}":""}function vo(e,n){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"";return 0===n.length?"":n.every((function(e){return!e.description}))?"("+n.map(ho).join(", ")+")":"(\n"+n.map((function(n,r){return mo(e,n,"  "+t,!r)+"  "+t+ho(n)})).join("\n")+"\n"+t+")"}function ho(e){var n=yt(e.defaultValue,e.type),t=e.name+": "+String(e.type);return n&&(t+=" = ".concat(Ce(n))),t+yo(e.deprecationReason)}function yo(e){if(null==e)return"";var n=yt(e,pt);return n&&e!==Pt?" @deprecated(reason: "+Ce(n)+")":" @deprecated"}function mo(e,n){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"",r=!(arguments.length>3&&void 0!==arguments[3])||arguments[3],i=n.description;if(null==i)return"";if(!0===(null==e?void 0:e.commentDescriptions))return Eo(i,t,r);var a=i.length>70,o=X(i,"",a),c=t&&!r?"\n"+t:t;return c+o.replace(/\n/g,"\n"+t)+"\n"}function Eo(e,n,t){return(n&&!t?"\n":"")+e.split("\n").map((function(e){return n+(""!==e?"# "+e:"#")})).join("\n")+"\n"}function To(e){for(var n=[],t=0;t<e.length;t++){var r=e[t];n=n.concat(r.definitions)}return{kind:"Document",definitions:n}}function go(e){for(var n=[],t=Object.create(null),r=0,i=e.definitions;r<i.length;r++){var a=i[r];switch(a.kind){case A.OPERATION_DEFINITION:n.push(a);break;case A.FRAGMENT_DEFINITION:t[a.name.value]=Io(a.selectionSet)}}for(var o=Object.create(null),c=function(r){for(var i=n[r],a=new Set,c=0,s=Io(i.selectionSet);c<s.length;c++){var u=s[c];No(a,t,u)}var l=i.name?i.name.value:"";o[l]={kind:A.DOCUMENT,definitions:e.definitions.filter((function(e){return e===i||e.kind===A.FRAGMENT_DEFINITION&&a.has(e.name.value)}))}},s=0;s<n.length;s++)c(s);return o}function No(e,n,t){if(!e.has(t)){e.add(t);var r=n[t];if(void 0!==r)for(var i=0;i<r.length;i++)No(e,n,r[i])}}function Io(e){var n=[];return he(e,{FragmentSpread:function(e){n.push(e.name.value)}}),n}function bo(e){for(var n=Y(e)?e:new G(e),t=n.body,r=new H(n),i="",a=!1;r.advance().kind!==V.EOF;){var o=r.token,c=o.kind,s=!z(o.kind);a&&(s||o.kind===V.SPREAD)&&(i+=" ");var u=t.slice(o.start,o.end);c===V.BLOCK_STRING?i+=_o(u):i+=u,a=s}return i}function _o(e){var n=q(e.slice(3,-3));K(n)>0&&(n="\n"+n);var t=n[n.length-1];return('"'===t&&'\\"""'!==n.slice(-4)||"\\"===t)&&(n+="\n"),'"""'+n+'"""'}function Oo(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function Do(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?Oo(Object(t),!0).forEach((function(n){wo(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):Oo(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function wo(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}var Ao=Object.freeze({TYPE_REMOVED:"TYPE_REMOVED",TYPE_CHANGED_KIND:"TYPE_CHANGED_KIND",TYPE_REMOVED_FROM_UNION:"TYPE_REMOVED_FROM_UNION",VALUE_REMOVED_FROM_ENUM:"VALUE_REMOVED_FROM_ENUM",REQUIRED_INPUT_FIELD_ADDED:"REQUIRED_INPUT_FIELD_ADDED",IMPLEMENTED_INTERFACE_REMOVED:"IMPLEMENTED_INTERFACE_REMOVED",FIELD_REMOVED:"FIELD_REMOVED",FIELD_CHANGED_KIND:"FIELD_CHANGED_KIND",REQUIRED_ARG_ADDED:"REQUIRED_ARG_ADDED",ARG_REMOVED:"ARG_REMOVED",ARG_CHANGED_KIND:"ARG_CHANGED_KIND",DIRECTIVE_REMOVED:"DIRECTIVE_REMOVED",DIRECTIVE_ARG_REMOVED:"DIRECTIVE_ARG_REMOVED",REQUIRED_DIRECTIVE_ARG_ADDED:"REQUIRED_DIRECTIVE_ARG_ADDED",DIRECTIVE_REPEATABLE_REMOVED:"DIRECTIVE_REPEATABLE_REMOVED",DIRECTIVE_LOCATION_REMOVED:"DIRECTIVE_LOCATION_REMOVED"}),So=Object.freeze({VALUE_ADDED_TO_ENUM:"VALUE_ADDED_TO_ENUM",TYPE_ADDED_TO_UNION:"TYPE_ADDED_TO_UNION",OPTIONAL_INPUT_FIELD_ADDED:"OPTIONAL_INPUT_FIELD_ADDED",OPTIONAL_ARG_ADDED:"OPTIONAL_ARG_ADDED",IMPLEMENTED_INTERFACE_ADDED:"IMPLEMENTED_INTERFACE_ADDED",ARG_DEFAULT_VALUE_CHANGE:"ARG_DEFAULT_VALUE_CHANGE"});function Ro(e,n){return xo(e,n).filter((function(e){return e.type in Ao}))}function ko(e,n){return xo(e,n).filter((function(e){return e.type in So}))}function xo(e,n){return[].concat(function(e,n){for(var t=[],r=Yo(Te(e.getTypeMap()),Te(n.getTypeMap())),i=0,a=r.removed;i<a.length;i++){var o=a[i];t.push({type:Ao.TYPE_REMOVED,description:ht(o)?"Standard scalar ".concat(o.name," was removed because it is not referenced anymore."):"".concat(o.name," was removed.")})}for(var c=0,s=r.persisted;c<s.length;c++){var u=s[c],l=u[0],p=u[1];on(l)&&on(p)?t.push.apply(t,Vo(l,p)):rn(l)&&rn(p)?t.push.apply(t,Lo(l,p)):sn(l)&&sn(p)?t.push.apply(t,Fo(l,p)):Ze(l)&&Ze(p)||nn(l)&&nn(p)?t.push.apply(t,Co(l,p).concat(jo(l,p))):l.constructor!==p.constructor&&t.push({type:Ao.TYPE_CHANGED_KIND,description:"".concat(l.name," changed from ")+"".concat(Bo(l)," to ").concat(Bo(p),".")})}return t}(e,n),function(e,n){for(var t=[],r=Yo(e.getDirectives(),n.getDirectives()),i=0,a=r.removed;i<a.length;i++){var o=a[i];t.push({type:Ao.DIRECTIVE_REMOVED,description:"".concat(o.name," was removed.")})}for(var c=0,s=r.persisted;c<s.length;c++){for(var u=s[c],l=u[0],p=u[1],f=Yo(l.args,p.args),d=0,v=f.added;d<v.length;d++){var h=v[d];Yn(h)&&t.push({type:Ao.REQUIRED_DIRECTIVE_ARG_ADDED,description:"A required arg ".concat(h.name," on directive ").concat(l.name," was added.")})}for(var y=0,m=f.removed;y<m.length;y++){var E=m[y];t.push({type:Ao.DIRECTIVE_ARG_REMOVED,description:"".concat(E.name," was removed from ").concat(l.name,".")})}l.isRepeatable&&!p.isRepeatable&&t.push({type:Ao.DIRECTIVE_REPEATABLE_REMOVED,description:"Repeatable flag was removed from ".concat(l.name,".")});for(var T=0,g=l.locations;T<g.length;T++){var N=g[T];-1===p.locations.indexOf(N)&&t.push({type:Ao.DIRECTIVE_LOCATION_REMOVED,description:"".concat(N," was removed from ").concat(l.name,".")})}}return t}(e,n))}function Fo(e,n){for(var t=[],r=Yo(Te(e.getFields()),Te(n.getFields())),i=0,a=r.added;i<a.length;i++){var o=a[i];$n(o)?t.push({type:Ao.REQUIRED_INPUT_FIELD_ADDED,description:"A required field ".concat(o.name," on input type ").concat(e.name," was added.")}):t.push({type:So.OPTIONAL_INPUT_FIELD_ADDED,description:"An optional field ".concat(o.name," on input type ").concat(e.name," was added.")})}for(var c=0,s=r.removed;c<s.length;c++){var u=s[c];t.push({type:Ao.FIELD_REMOVED,description:"".concat(e.name,".").concat(u.name," was removed.")})}for(var l=0,p=r.persisted;l<p.length;l++){var f=p[l],d=f[0],v=f[1];Mo(d.type,v.type)||t.push({type:Ao.FIELD_CHANGED_KIND,description:"".concat(e.name,".").concat(d.name," changed type from ")+"".concat(String(d.type)," to ").concat(String(v.type),".")})}return t}function Lo(e,n){for(var t=[],r=Yo(e.getTypes(),n.getTypes()),i=0,a=r.added;i<a.length;i++){var o=a[i];t.push({type:So.TYPE_ADDED_TO_UNION,description:"".concat(o.name," was added to union type ").concat(e.name,".")})}for(var c=0,s=r.removed;c<s.length;c++){var u=s[c];t.push({type:Ao.TYPE_REMOVED_FROM_UNION,description:"".concat(u.name," was removed from union type ").concat(e.name,".")})}return t}function Vo(e,n){for(var t=[],r=Yo(e.getValues(),n.getValues()),i=0,a=r.added;i<a.length;i++){var o=a[i];t.push({type:So.VALUE_ADDED_TO_ENUM,description:"".concat(o.name," was added to enum type ").concat(e.name,".")})}for(var c=0,s=r.removed;c<s.length;c++){var u=s[c];t.push({type:Ao.VALUE_REMOVED_FROM_ENUM,description:"".concat(u.name," was removed from enum type ").concat(e.name,".")})}return t}function jo(e,n){for(var t=[],r=Yo(e.getInterfaces(),n.getInterfaces()),i=0,a=r.added;i<a.length;i++){var o=a[i];t.push({type:So.IMPLEMENTED_INTERFACE_ADDED,description:"".concat(o.name," added to interfaces implemented by ").concat(e.name,".")})}for(var c=0,s=r.removed;c<s.length;c++){var u=s[c];t.push({type:Ao.IMPLEMENTED_INTERFACE_REMOVED,description:"".concat(e.name," no longer implements interface ").concat(u.name,".")})}return t}function Co(e,n){for(var t=[],r=Yo(Te(e.getFields()),Te(n.getFields())),i=0,a=r.removed;i<a.length;i++){var o=a[i];t.push({type:Ao.FIELD_REMOVED,description:"".concat(e.name,".").concat(o.name," was removed.")})}for(var c=0,s=r.persisted;c<s.length;c++){var u=s[c],l=u[0],p=u[1];t.push.apply(t,Po(e,l,p)),Uo(l.type,p.type)||t.push({type:Ao.FIELD_CHANGED_KIND,description:"".concat(e.name,".").concat(l.name," changed type from ")+"".concat(String(l.type)," to ").concat(String(p.type),".")})}return t}function Po(e,n,t){for(var r=[],i=Yo(n.args,t.args),a=0,o=i.removed;a<o.length;a++){var c=o[a];r.push({type:Ao.ARG_REMOVED,description:"".concat(e.name,".").concat(n.name," arg ").concat(c.name," was removed.")})}for(var s=0,u=i.persisted;s<u.length;s++){var l=u[s],p=l[0],f=l[1];if(Mo(p.type,f.type)){if(void 0!==p.defaultValue)if(void 0===f.defaultValue)r.push({type:So.ARG_DEFAULT_VALUE_CHANGE,description:"".concat(e.name,".").concat(n.name," arg ").concat(p.name," defaultValue was removed.")});else{var d=Go(p.defaultValue,p.type),v=Go(f.defaultValue,f.type);d!==v&&r.push({type:So.ARG_DEFAULT_VALUE_CHANGE,description:"".concat(e.name,".").concat(n.name," arg ").concat(p.name," has changed defaultValue from ").concat(d," to ").concat(v,".")})}}else r.push({type:Ao.ARG_CHANGED_KIND,description:"".concat(e.name,".").concat(n.name," arg ").concat(p.name," has changed type from ")+"".concat(String(p.type)," to ").concat(String(f.type),".")})}for(var h=0,y=i.added;h<y.length;h++){var m=y[h];Yn(m)?r.push({type:Ao.REQUIRED_ARG_ADDED,description:"A required arg ".concat(m.name," on ").concat(e.name,".").concat(n.name," was added.")}):r.push({type:So.OPTIONAL_ARG_ADDED,description:"An optional arg ".concat(m.name," on ").concat(e.name,".").concat(n.name," was added.")})}return r}function Uo(e,n){return ln(e)?ln(n)&&Uo(e.ofType,n.ofType)||fn(n)&&Uo(e,n.ofType):fn(e)?fn(n)&&Uo(e.ofType,n.ofType):kn(n)&&e.name===n.name||fn(n)&&Uo(e,n.ofType)}function Mo(e,n){return ln(e)?ln(n)&&Mo(e.ofType,n.ofType):fn(e)?fn(n)&&Mo(e.ofType,n.ofType)||!fn(n)&&Mo(e.ofType,n):kn(n)&&e.name===n.name}function Bo(e){return $e(e)?"a Scalar type":Ze(e)?"an Object type":nn(e)?"an Interface type":rn(e)?"a Union type":on(e)?"an Enum type":sn(e)?"an Input type":void S(0,"Unexpected type: "+C(e))}function Go(e,n){var t=yt(e,n);return null!=t||S(0),Ce(he(t,{ObjectValue:function(e){var n=[].concat(e.fields);return n.sort((function(e,n){return ke(e.name.value,n.name.value)})),Do(Do({},e),{},{fields:n})}}))}function Yo(e,n){for(var t=[],r=[],i=[],a=Oe(e,(function(e){return e.name})),o=Oe(n,(function(e){return e.name})),c=0;c<e.length;c++){var s=e[c],u=o[s.name];void 0===u?r.push(s):i.push([s,u])}for(var l=0;l<n.length;l++){var p=n[l];void 0===a[p.name]&&t.push(p)}return{added:t,persisted:i,removed:r}}function Qo(e,n){return Vi(e,n,[Sa])}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,