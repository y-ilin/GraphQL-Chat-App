(self.webpackChunkwp5_starter_react=self.webpackChunkwp5_starter_react||[]).push([[471],{1072:(e,t,n)=>{"use strict";n.d(t,{A:()=>i});var r=n(3564),o=n(3835),i=function(e){function t(t){var n=e.call(this)||this;return t instanceof o.SubscriptionClient?n.subscriptionClient=t:n.subscriptionClient=new o.SubscriptionClient(t.uri,t.options,t.webSocketImpl),n}return(0,r.ZT)(t,e),t.prototype.request=function(e){return this.subscriptionClient.request(e)},t}(n(6706).i)},6156:(e,t,n)=>{"use strict";function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}n.d(t,{Z:()=>r})},3391:(e,t,n)=>{"use strict";function r(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function o(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var n=[],r=!0,o=!1,i=void 0;try{for(var a,c=e[Symbol.iterator]();!(r=(a=c.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==c.return||c.return()}finally{if(o)throw i}}return n}}(e,t)||function(e,t){if(e){if("string"==typeof e)return r(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?r(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}n.d(t,{Z:()=>o})},2465:(e,t,n)=>{"use strict";function r(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}n.d(t,{Z:()=>r})},2471:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>O});var r,o,i=n(6156),a=n(3391),c=n(2465),u=n(2950),l=n.n(u),s=n(5264),p=n(1072),f=n(6620);function d(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function b(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?d(Object(n),!0).forEach((function(t){(0,i.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):d(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var m=new p.A({uri:"ws://localhost:4000/",options:{reconnect:!0,playground:"/playground"}}),g=new s.ApolloClient({link:m,uri:"/graphql",cache:new s.InMemoryCache}),y=(0,s.gql)(r||(r=(0,c.Z)(["\n  subscription getMessages {\n    messages {\n      id\n      content\n      user\n    }\n  }\n"]))),h=(0,s.gql)(o||(o=(0,c.Z)(["\n  mutation postMessage($user: String!, $content: String!) {\n    postMessage(user: $user, content: $content)\n  }\n"]))),v=function(e){var t=e.user,n=(0,s.useSubscription)(y).data;return n?l().createElement(l().Fragment,null,n.messages.map((function(e){e.id;var n=e.user,r=e.content;return l().createElement("div",{style:{display:"flex",justifyContent:t===n?"flex-end":"flex-start",paddingBottom:"1em"}},t!==n&&l().createElement("div",{style:{height:50,width:50,marginRight:"0.5em",border:"2px solid #e5e6ea",borderRadius:25,textAlign:"center",fontSize:"18pt",paddingTop:5}},n.slice(0,2).toUpperCase()),l().createElement("div",{style:{background:t===n?"#58bf56":"#e5e6ea",color:t===n?"white":"black",padding:"1em",borderRadius:"1em",maxWidth:"60%"}},r))}))):l().createElement("div",null,"Nothing")},w=function(){var e=(0,u.useState)({user:"Jack",content:""}),t=(0,a.Z)(e,2),n=t[0],r=t[1],o=(0,s.useMutation)(h),i=(0,a.Z)(o,1)[0],c=function(){n.content.length>0&&i({variables:n}),r(b(b({},n),{},{content:""}))};return l().createElement(f.Container,{"data-testid":"chat-app"},l().createElement(v,{user:n.user}),l().createElement(f.Row,null,l().createElement(f.Col,{xs:2,style:{padding:0}},l().createElement(f.FormInput,{label:"User",value:n.user,onChange:function(e){return r(b(b({},n),{},{user:e.target.value}))}})),l().createElement(f.Col,{xs:8},l().createElement(f.FormInput,{"data-testid":"message-input",label:"User",value:n.content,onChange:function(e){return r(b(b({},n),{},{content:e.target.value}))},onKeyUp:function(e){13===e.keyCode&&c()}})),l().createElement(f.Col,{xs:2,style:{padding:0}},l().createElement(f.Button,{onClick:function(){return c()}},"Send"))))};const O=function(){return l().createElement(s.ApolloProvider,{client:g},l().createElement(w,null))}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,