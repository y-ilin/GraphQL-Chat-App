(self.webpackChunkwp5_starter_react=self.webpackChunkwp5_starter_react||[]).push([[829],{4862:(e,t,r)=>{"use strict";r.d(t,{R:()=>o});var i=r(2667),n=r(9770),o=function(){function e(){this.getFragmentDoc=(0,i.re)(n.Yk)}return e.prototype.recordOptimisticTransaction=function(e,t){this.performTransaction(e,t)},e.prototype.transformDocument=function(e){return e},e.prototype.identify=function(e){},e.prototype.gc=function(){return[]},e.prototype.modify=function(e){return!1},e.prototype.transformForLink=function(e){return e},e.prototype.readQuery=function(e,t){return void 0===t&&(t=!!e.optimistic),this.read({rootId:e.id||"ROOT_QUERY",query:e.query,variables:e.variables,returnPartialData:e.returnPartialData,optimistic:t})},e.prototype.readFragment=function(e,t){return void 0===t&&(t=!!e.optimistic),this.read({query:this.getFragmentDoc(e.fragment,e.fragmentName),variables:e.variables,rootId:e.id,returnPartialData:e.returnPartialData,optimistic:t})},e.prototype.writeQuery=function(e){return this.write({dataId:e.id||"ROOT_QUERY",result:e.data,query:e.query,variables:e.variables,broadcast:e.broadcast})},e.prototype.writeFragment=function(e){return this.write({dataId:e.id,result:e.data,variables:e.variables,query:this.getFragmentDoc(e.fragment,e.fragmentName),broadcast:e.broadcast})},e}()},4038:(e,t,r)=>{"use strict";var i;r.d(t,{C:()=>i}),i||(i={})},2802:(e,t,r)=>{"use strict";r.d(t,{y:()=>i});var i=function(e,t,r,i,n){this.message=e,this.path=t,this.query=r,this.clientOnly=i,this.variables=n}},8776:(e,t,r)=>{"use strict";r.d(t,{RI:()=>s,$O:()=>a,E_:()=>u,RC:()=>c,j:()=>l,ig:()=>p});var i=r(386),n=r(6376),o=r(7742),s=Object.prototype.hasOwnProperty,a=/^[_a-z][_0-9a-z]*/i;function u(e){var t=e.match(a);return t?t[0]:e}function c(e,t,r){return!(!t||"object"!=typeof t)&&(Array.isArray(t)?t.every((function(t){return c(e,t,r)})):e.selections.every((function(e){if((0,i.My)(e)&&(0,n.LZ)(e,r)){var o=(0,i.u2)(e);return s.call(t,o)&&(!e.selectionSet||c(e.selectionSet,t[o],r))}return!0})))}function l(e){return null!==e&&"object"==typeof e&&!(0,i.Yk)(e)&&!Array.isArray(e)}function p(){return new o.w0}},8806:(e,t,r)=>{"use strict";r.d(t,{h:()=>T});var i=r(3564),n=r(2667),o=r(4862),s=r(2802),a=r(386),u=r(1234),c=r(7591),l=r(4604),p=r(9770),h=r(6376),f=r(7742),d=r(2152),v=r(1578),y=r(8776),b=Object.create(null),m=function(){return b},g=Object.create(null),O=function(){function e(e,t){var r=this;this.policies=e,this.group=t,this.data=Object.create(null),this.rootIds=Object.create(null),this.refs=Object.create(null),this.getFieldValue=function(e,t){return(0,a.Yk)(e)?r.get(e.__ref,t):e&&e[t]},this.canRead=function(e){return(0,a.Yk)(e)?r.has(e.__ref):"object"==typeof e},this.toReference=function(e,t){if("string"==typeof e)return(0,a.kQ)(e);if((0,a.Yk)(e))return e;var i=r.policies.identify(e)[0];if(i){var n=(0,a.kQ)(i);return t&&r.merge(i,e),n}}}return e.prototype.toObject=function(){return(0,i.pi)({},this.data)},e.prototype.has=function(e){return void 0!==this.lookup(e,!0)},e.prototype.get=function(e,t){if(this.group.depend(e,t),y.RI.call(this.data,e)){var r=this.data[e];if(r&&y.RI.call(r,t))return r[t]}return"__typename"===t&&y.RI.call(this.policies.rootTypenamesById,e)?this.policies.rootTypenamesById[e]:this instanceof k?this.parent.get(e,t):void 0},e.prototype.lookup=function(e,t){return t&&this.group.depend(e,"__exists"),y.RI.call(this.data,e)?this.data[e]:this instanceof k?this.parent.lookup(e,t):this.policies.rootTypenamesById[e]?Object.create(null):void 0},e.prototype.merge=function(e,t){var r=this,i=this.lookup(e),n=new f.w0(E).merge(i,t);if(this.data[e]=n,n!==i&&(delete this.refs[e],this.group.caching)){var o=Object.create(null);i||(o.__exists=1),Object.keys(t).forEach((function(e){if(!i||i[e]!==n[e]){o[e]=1;var t=(0,y.E_)(e);t===e||r.policies.hasKeyArgs(n.__typename,t)||(o[t]=1),void 0!==n[e]||r instanceof k||delete n[e]}})),Object.keys(o).forEach((function(t){return r.group.dirty(e,t)}))}},e.prototype.modify=function(e,t){var r=this,n=this.lookup(e);if(n){var o=Object.create(null),s=!1,u=!0,c={DELETE:b,INVALIDATE:g,isReference:a.Yk,toReference:this.toReference,canRead:this.canRead,readField:function(t,i){return r.policies.readField("string"==typeof t?{fieldName:t,from:i||(0,a.kQ)(e)}:t,{store:r})}};if(Object.keys(n).forEach((function(a){var l=(0,y.E_)(a),p=n[a];if(void 0!==p){var h="function"==typeof t?t:t[a]||t[l];if(h){var f=h===m?b:h(p,(0,i.pi)((0,i.pi)({},c),{fieldName:l,storeFieldName:a,storage:r.getStorage(e,a)}));f===g?r.group.dirty(e,a):(f===b&&(f=void 0),f!==p&&(o[a]=f,s=!0,p=f))}void 0!==p&&(u=!1)}})),s)return this.merge(e,o),u&&(this instanceof k?this.data[e]=void 0:delete this.data[e],this.group.dirty(e,"__exists")),!0}return!1},e.prototype.delete=function(e,t,r){var i,n=this.lookup(e);if(n){var o=this.getFieldValue(n,"__typename"),s=t&&r?this.policies.getStoreFieldName({typename:o,fieldName:t,args:r}):t;return this.modify(e,s?((i={})[s]=m,i):m)}return!1},e.prototype.evict=function(e){var t=!1;return e.id&&(y.RI.call(this.data,e.id)&&(t=this.delete(e.id,e.fieldName,e.args)),this instanceof k&&(t=this.parent.evict(e)||t),(e.fieldName||t)&&this.group.dirty(e.id,e.fieldName||"__exists")),t},e.prototype.clear=function(){this.replace(null)},e.prototype.extract=function(){var e=this,t=this.toObject(),r=[];return this.getRootIdSet().forEach((function(t){y.RI.call(e.policies.rootTypenamesById,t)||r.push(t)})),r.length&&(t.__META={extraRootIds:r.sort()}),t},e.prototype.replace=function(e){var t=this;if(Object.keys(this.data).forEach((function(r){e&&y.RI.call(e,r)||t.delete(r)})),e){var r=e.__META,n=(0,i._T)(e,["__META"]);Object.keys(n).forEach((function(e){t.merge(e,n[e])})),r&&r.extraRootIds.forEach(this.retain,this)}},e.prototype.retain=function(e){return this.rootIds[e]=(this.rootIds[e]||0)+1},e.prototype.release=function(e){if(this.rootIds[e]>0){var t=--this.rootIds[e];return t||delete this.rootIds[e],t}return 0},e.prototype.getRootIdSet=function(e){return void 0===e&&(e=new Set),Object.keys(this.rootIds).forEach(e.add,e),this instanceof k?this.parent.getRootIdSet(e):Object.keys(this.policies.rootTypenamesById).forEach(e.add,e),e},e.prototype.gc=function(){var e=this,t=this.getRootIdSet(),r=this.toObject();t.forEach((function(i){y.RI.call(r,i)&&(Object.keys(e.findChildRefIds(i)).forEach(t.add,t),delete r[i])}));var i=Object.keys(r);if(i.length){for(var n=this;n instanceof k;)n=n.parent;i.forEach((function(e){return n.delete(e)}))}return i},e.prototype.findChildRefIds=function(e){if(!y.RI.call(this.refs,e)){var t=this.refs[e]=Object.create(null),r=new Set([this.data[e]]),i=function(e){return null!==e&&"object"==typeof e};r.forEach((function(e){(0,a.Yk)(e)?t[e.__ref]=!0:i(e)&&Object.values(e).filter(i).forEach(r.add,r)}))}return this.refs[e]},e.prototype.makeCacheKey=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.group.keyMaker.lookupArray(e)},e}(),w=function(){function e(e){this.caching=e,this.d=null,this.keyMaker=new n.Gl(v.m),this.d=e?(0,n.dP)():null}return e.prototype.depend=function(e,t){if(this.d){this.d(S(e,t));var r=(0,y.E_)(t);r!==t&&this.d(S(e,r))}},e.prototype.dirty=function(e,t){this.d&&this.d.dirty(S(e,t))},e}();function S(e,t){return t+"#"+e}!function(e){var t=function(e){function t(t){var r=t.policies,i=t.resultCaching,o=void 0===i||i,s=t.seed,a=e.call(this,r,new w(o))||this;return a.storageTrie=new n.Gl(v.m),a.sharedLayerGroup=new w(o),s&&a.replace(s),a}return(0,i.ZT)(t,e),t.prototype.addLayer=function(e,t){return new k(e,this,t,this.sharedLayerGroup)},t.prototype.removeLayer=function(){return this},t.prototype.getStorage=function(){return this.storageTrie.lookupArray(arguments)},t}(e);e.Root=t}(O||(O={}));var k=function(e){function t(t,r,i,n){var o=e.call(this,r.policies,n)||this;return o.id=t,o.parent=r,o.replay=i,o.group=n,i(o),o}return(0,i.ZT)(t,e),t.prototype.addLayer=function(e,r){return new t(e,this,r,this.group)},t.prototype.removeLayer=function(e){var t=this,r=this.parent.removeLayer(e);return e===this.id?(this.group.caching&&Object.keys(this.data).forEach((function(e){t.data[e]!==r.lookup(e)&&t.delete(e)})),r):r===this.parent?this:r.addLayer(this.id,this.replay)},t.prototype.toObject=function(){return(0,i.pi)((0,i.pi)({},this.parent.toObject()),this.data)},t.prototype.findChildRefIds=function(t){var r=this.parent.findChildRefIds(t);return y.RI.call(this.data,t)?(0,i.pi)((0,i.pi)({},r),e.prototype.findChildRefIds.call(this,t)):r},t.prototype.getStorage=function(){for(var e=this.parent;e.parent;)e=e.parent;return e.getStorage.apply(e,arguments)},t}(O);function E(e,t,r){var i=e[r],n=t[r];return(0,d.D)(i,n)?i:n}function R(e){return!!(e instanceof O&&e.group.caching)}function x(e,t){return new s.y(e.message,t.path.slice(),t.query,t.clientOnly,t.variables)}var Q=function(){function e(e){var t=this;this.config=e,this.executeSelectionSet=(0,n.re)((function(e){return t.execSelectionSetImpl(e)}),{keyArgs:function(e){return[e.selectionSet,e.objectOrReference,e.context]},makeCacheKey:function(e,t,r){if(R(r.store))return r.store.makeCacheKey(e,(0,a.Yk)(t)?t.__ref:t,r.varString)}}),this.knownResults=new WeakMap,this.executeSubSelectedArray=(0,n.re)((function(e){return t.execSubSelectedArrayImpl(e)}),{makeCacheKey:function(e){var t=e.field,r=e.array,i=e.context;if(R(i.store))return i.store.makeCacheKey(t,r,i.varString)}}),this.config=(0,i.pi)({addTypename:!0},e)}return e.prototype.diffQueryAgainstStore=function(e){var t=e.store,r=e.query,n=e.rootId,o=void 0===n?"ROOT_QUERY":n,s=e.variables,u=e.returnPartialData,c=void 0===u||u,h=this.config.cache.policies;s=(0,i.pi)((0,i.pi)({},(0,l.O4)((0,l.iW)(r))),s);var f=this.executeSelectionSet({selectionSet:(0,l.p$)(r).selectionSet,objectOrReference:(0,a.kQ)(o),context:{store:t,query:r,policies:h,variables:s,varString:JSON.stringify(s),fragmentMap:(0,p.F)((0,l.kU)(r)),path:[],clientOnly:!1}}),d=f.missing&&f.missing.length>0;if(d&&!c)throw f.missing[0];return{result:f.result,missing:f.missing,complete:!d}},e.prototype.isFresh=function(e,t,r,i){if(R(i.store)&&this.knownResults.get(e)===r){var n=this.executeSelectionSet.peek(r,t,i);if(n&&e===n.result)return!0}return!1},e.prototype.execSelectionSetImpl=function(e){var t=this,r=e.selectionSet,i=e.objectOrReference,n=e.context;if((0,a.Yk)(i)&&!n.policies.rootTypenamesById[i.__ref]&&!n.store.has(i.__ref))return{result:{},missing:[x(new c.ej(4),n)]};var o=n.variables,s=n.policies,l=n.store,d=[],v={result:null},y=l.getFieldValue(i,"__typename");function b(){return v.missing||(v.missing=[])}function m(e){var t;return e.missing&&(t=b()).push.apply(t,e.missing),e.result}this.config.addTypename&&"string"==typeof y&&!s.rootIdsByTypename[y]&&d.push({__typename:y});var g=new Set(r.selections);return g.forEach((function(e){var r;if((0,h.LZ)(e,o))if((0,a.My)(e)){var l=s.readField({fieldName:e.name.value,field:e,variables:n.variables,from:i},n),f=(0,a.u2)(e);n.path.push(f);var v=n.clientOnly;n.clientOnly=v||!(!e.directives||!e.directives.some((function(e){return"client"===e.name.value}))),void 0===l?u.Gw.added(e)||b().push(x(new c.ej(5),n)):Array.isArray(l)?l=m(t.executeSubSelectedArray({field:e,array:l,context:n})):e.selectionSet&&null!=l&&(l=m(t.executeSelectionSet({selectionSet:e.selectionSet,objectOrReference:l,context:n}))),void 0!==l&&d.push(((r={})[f]=l,r)),n.clientOnly=v,(0,c.kG)(n.path.pop()===f)}else{var O=(0,p.hi)(e,n.fragmentMap);O&&s.fragmentMatches(O,y)&&O.selectionSet.selections.forEach(g.add,g)}})),v.result=(0,f.bw)(d),this.knownResults.set(v.result,r),v},e.prototype.execSubSelectedArrayImpl=function(e){var t,r=this,i=e.field,n=e.array,o=e.context;function s(e,r){return e.missing&&(t=t||[]).push.apply(t,e.missing),(0,c.kG)(o.path.pop()===r),e.result}return i.selectionSet&&(n=n.filter(o.store.canRead)),{result:n=n.map((function(e,t){return null===e?null:(o.path.push(t),Array.isArray(e)?s(r.executeSubSelectedArray({field:i,array:e,context:o}),t):i.selectionSet?s(r.executeSelectionSet({selectionSet:i.selectionSet,objectOrReference:e,context:o}),t):((0,c.kG)(o.path.pop()===t),e))})),missing:t}},e}(),M=function(){function e(e,t){this.cache=e,this.reader=t}return e.prototype.writeToStore=function(e){var t=e.query,r=e.result,n=e.dataId,o=e.store,s=e.variables,u=(0,l.$H)(t),h=(0,y.ig)();s=(0,i.pi)((0,i.pi)({},(0,l.O4)(u)),s);var f=this.processSelectionSet({result:r||Object.create(null),dataId:n,selectionSet:u.selectionSet,mergeTree:{map:new Map},context:{store:o,written:Object.create(null),merge:function(e,t){return h.merge(e,t)},variables:s,varString:JSON.stringify(s),fragmentMap:(0,p.F)((0,l.kU)(t))}});if(!(0,a.Yk)(f))throw new c.ej(7);return o.retain(f.__ref),f},e.prototype.processSelectionSet=function(e){var t=this,r=e.dataId,i=e.result,n=e.selectionSet,o=e.context,s=e.mergeTree,u=this.cache.policies,l=u.identify(i,n,o.fragmentMap),f=l[0],d=l[1];if("string"==typeof(r=r||f)){var v=o.written[r]||(o.written[r]=[]),y=(0,a.kQ)(r);if(v.indexOf(n)>=0)return y;if(v.push(n),this.reader&&this.reader.isFresh(i,y,n,o))return y}var b=Object.create(null);d&&(b=o.merge(b,d));var m=r&&u.rootTypenamesById[r]||(0,a.qw)(i,n,o.fragmentMap)||r&&o.store.get(r,"__typename");"string"==typeof m&&(b.__typename=m);var g=new Set(n.selections);if(g.forEach((function(e){var r;if((0,h.LZ)(e,o.variables))if((0,a.My)(e)){var n=(0,a.u2)(e),l=i[n];if(void 0!==l){var f=u.getStoreFieldName({typename:m,fieldName:e.name.value,field:e,variables:o.variables}),d=I(s,f),v=t.processFieldValue(l,e,o,d),y=e.selectionSet&&o.store.getFieldValue(v,"__typename")||void 0,O=u.getMergeFunction(m,e.name.value,y);O?d.info={field:e,typename:m,merge:O}:F(s,f),b=o.merge(b,((r={})[f]=v,r))}else if(u.usingPossibleTypes&&!(0,h.FS)(["defer","client"],e))throw new c.ej(8)}else{var w=(0,p.hi)(e,o.fragmentMap);w&&u.fragmentMatches(w,m,i,o.variables)&&w.selectionSet.selections.forEach(g.add,g)}})),"string"==typeof r){var O=(0,a.kQ)(r);return s.map.size&&(b=this.applyMerges(s,O,b,o)),o.store.merge(r,b),O}return b},e.prototype.processFieldValue=function(e,t,r,i){var n=this;return t.selectionSet&&null!==e?Array.isArray(e)?e.map((function(e,o){var s=n.processFieldValue(e,t,r,I(i,o));return F(i,o),s})):this.processSelectionSet({result:e,selectionSet:t.selectionSet,context:r,mergeTree:i}):e},e.prototype.applyMerges=function(e,t,r,n,o){var s,u=this;if(e.map.size&&!(0,a.Yk)(r)){var l,p=Array.isArray(r)||!(0,a.Yk)(t)&&!(0,y.j)(t)?void 0:t,h=r;p&&!o&&(o=[(0,a.Yk)(p)?p.__ref:p]);var f=function(e,t){return Array.isArray(e)?"number"==typeof t?e[t]:void 0:n.store.getFieldValue(e,String(t))};e.map.forEach((function(e,t){o&&o.push(t);var r=f(p,t),i=f(h,t),s=u.applyMerges(e,r,i,n,o);s!==i&&(l=l||new Map).set(t,s),o&&(0,c.kG)(o.pop()===t)})),l&&(r=Array.isArray(h)?h.slice(0):(0,i.pi)({},h),l.forEach((function(e,t){r[t]=e})))}return e.info?this.cache.policies.runMergeFunction(t,r,e.info,n,o&&(s=n.store).getStorage.apply(s,o)):r},e}(),C=[];function I(e,t){var r=e.map;return r.has(t)||r.set(t,C.pop()||{map:new Map}),r.get(t)}function F(e,t){var r=e.map,i=r.get(t);!i||i.info||i.map.size||(C.push(i),r.delete(t))}new Set;var P=r(3974),q=r(926),D={dataIdFromObject:q.u,addTypename:!0,resultCaching:!0,typePolicies:{}},T=function(e){function t(t){void 0===t&&(t={});var r=e.call(this)||this;return r.watches=new Set,r.typenameDocumentCache=new Map,r.makeVar=P.QS,r.txCount=0,r.maybeBroadcastWatch=(0,n.re)((function(e,t){return r.broadcastWatch.call(r,e,!!t)}),{makeCacheKey:function(e){var t=e.optimistic?r.optimisticData:r.data;if(R(t)){var i=e.optimistic,n=e.rootId,o=e.variables;return t.makeCacheKey(e.query,e.callback,JSON.stringify({optimistic:i,rootId:n,variables:o}))}}}),r.watchDep=(0,n.dP)(),r.config=(0,i.pi)((0,i.pi)({},D),t),r.addTypename=!!r.config.addTypename,r.policies=new q.r({cache:r,dataIdFromObject:r.config.dataIdFromObject,possibleTypes:r.config.possibleTypes,typePolicies:r.config.typePolicies}),r.data=new O.Root({policies:r.policies,resultCaching:r.config.resultCaching}),r.optimisticData=r.data,r.storeWriter=new M(r,r.storeReader=new Q({cache:r,addTypename:r.addTypename})),r}return(0,i.ZT)(t,e),t.prototype.restore=function(e){return e&&this.data.replace(e),this},t.prototype.extract=function(e){return void 0===e&&(e=!1),(e?this.optimisticData:this.data).extract()},t.prototype.read=function(e){var t=e.returnPartialData,r=void 0!==t&&t;try{return this.storeReader.diffQueryAgainstStore({store:e.optimistic?this.optimisticData:this.data,query:e.query,variables:e.variables,rootId:e.rootId,config:this.config,returnPartialData:r}).result||null}catch(e){if(e instanceof s.y)return null;throw e}},t.prototype.write=function(e){try{return++this.txCount,this.storeWriter.writeToStore({store:this.data,query:e.query,result:e.result,dataId:e.dataId,variables:e.variables})}finally{--this.txCount||!1===e.broadcast||this.broadcastWatches()}},t.prototype.modify=function(e){if(y.RI.call(e,"id")&&!e.id)return!1;var t=e.optimistic?this.optimisticData:this.data;try{return++this.txCount,t.modify(e.id||"ROOT_QUERY",e.fields)}finally{--this.txCount||!1===e.broadcast||this.broadcastWatches()}},t.prototype.diff=function(e){return this.storeReader.diffQueryAgainstStore({store:e.optimistic?this.optimisticData:this.data,rootId:e.id||"ROOT_QUERY",query:e.query,variables:e.variables,returnPartialData:e.returnPartialData,config:this.config})},t.prototype.watch=function(e){var t=this;return this.watches.size||(0,P._v)(this),this.watches.add(e),e.immediate&&this.maybeBroadcastWatch(e),function(){t.watches.delete(e)&&!t.watches.size&&(0,P.li)(t),t.watchDep.dirty(e),t.maybeBroadcastWatch.forget(e)}},t.prototype.gc=function(){return this.optimisticData.gc()},t.prototype.retain=function(e,t){return(t?this.optimisticData:this.data).retain(e)},t.prototype.release=function(e,t){return(t?this.optimisticData:this.data).release(e)},t.prototype.identify=function(e){return(0,a.Yk)(e)?e.__ref:this.policies.identify(e)[0]},t.prototype.evict=function(e){if(!e.id){if(y.RI.call(e,"id"))return!1;e=(0,i.pi)((0,i.pi)({},e),{id:"ROOT_QUERY"})}try{return++this.txCount,this.optimisticData.evict(e)}finally{--this.txCount||!1===e.broadcast||this.broadcastWatches()}},t.prototype.reset=function(){return this.data.clear(),this.optimisticData=this.data,this.broadcastWatches(),Promise.resolve()},t.prototype.removeOptimistic=function(e){var t=this.optimisticData.removeLayer(e);t!==this.optimisticData&&(this.optimisticData=t,this.broadcastWatches())},t.prototype.performTransaction=function(e,t){var r=this,i=function(t){var i=r,n=i.data,o=i.optimisticData;++r.txCount,t&&(r.data=r.optimisticData=t);try{e(r)}finally{--r.txCount,r.data=n,r.optimisticData=o}},n=!1;"string"==typeof t?(this.optimisticData=this.optimisticData.addLayer(t,i),n=!0):null===t?i(this.data):i(),this.broadcastWatches(n)},t.prototype.transformDocument=function(e){if(this.addTypename){var t=this.typenameDocumentCache.get(e);return t||(t=(0,u.Gw)(e),this.typenameDocumentCache.set(e,t),this.typenameDocumentCache.set(t,t)),t}return e},t.prototype.broadcastWatches=function(e){var t=this;this.txCount||this.watches.forEach((function(r){return t.maybeBroadcastWatch(r,e)}))},t.prototype.broadcastWatch=function(e,t){this.watchDep.dirty(e),this.watchDep(e);var r=this.diff({query:e.query,variables:e.variables,optimistic:e.optimistic});e.optimistic&&t&&(r.fromOptimisticTransaction=!0),e.callback(r)},t}(o.R)},926:(e,t,r)=>{"use strict";r.d(t,{u:()=>f,r:()=>m});var i=r(3564),n=r(2667),o=r(7591),s=r(386),a=r(7954),u=r(1578),c=r(9770),l=r(8776),p=r(3974);function h(e){return void 0!==e.args?e.args:e.field?(0,s.NC)(e.field,e.variables):null}var f=function(e,t){var r=e.__typename,i=e.id,n=e._id;if("string"==typeof r&&(t&&(t.keyObject=void 0!==i?{id:i}:void 0!==n?{_id:n}:void 0),void 0===i&&(i=n),void 0!==i))return r+":"+("number"==typeof i||"string"==typeof i?i:JSON.stringify(i))},d=function(){},v=function(e,t){return t.fieldName},y=function(e,t,r){return(0,r.mergeObjects)(e,t)},b=function(e,t){return t},m=function(){function e(e){this.config=e,this.typePolicies=Object.create(null),this.toBeAdded=Object.create(null),this.supertypeMap=new Map,this.fuzzySubtypes=new Map,this.rootIdsByTypename=Object.create(null),this.rootTypenamesById=Object.create(null),this.usingPossibleTypes=!1,this.config=(0,i.pi)({dataIdFromObject:f},e),this.cache=this.config.cache,this.setRootTypename("Query"),this.setRootTypename("Mutation"),this.setRootTypename("Subscription"),e.possibleTypes&&this.addPossibleTypes(e.possibleTypes),e.typePolicies&&this.addTypePolicies(e.typePolicies)}return e.prototype.identify=function(e,t,r){var i=t&&r?(0,s.qw)(e,t,r):e.__typename;if(i===this.rootTypenamesById.ROOT_QUERY)return["ROOT_QUERY"];for(var n,o={typename:i,selectionSet:t,fragmentMap:r},a=i&&this.getTypePolicy(i),u=a&&a.keyFn||this.config.dataIdFromObject;u;){var c=u(e,o);if(!Array.isArray(c)){n=c;break}u=S(c)}return n=n?String(n):void 0,o.keyObject?[n,o.keyObject]:[n]},e.prototype.addTypePolicies=function(e){var t=this;Object.keys(e).forEach((function(r){var n=e[r],o=n.queryType,s=n.mutationType,a=n.subscriptionType,u=(0,i._T)(n,["queryType","mutationType","subscriptionType"]);o&&t.setRootTypename("Query",r),s&&t.setRootTypename("Mutation",r),a&&t.setRootTypename("Subscription",r),l.RI.call(t.toBeAdded,r)?t.toBeAdded[r].push(u):t.toBeAdded[r]=[u]}))},e.prototype.updateTypePolicy=function(e,t){var r=this,i=this.getTypePolicy(e),n=t.keyFields,o=t.fields;function s(e,t){e.merge="function"==typeof t?t:!0===t?y:!1===t?b:e.merge}s(i,t.merge),i.keyFn=!1===n?d:Array.isArray(n)?S(n):"function"==typeof n?n:i.keyFn,o&&Object.keys(o).forEach((function(t){var i=r.getFieldPolicy(e,t,!0),n=o[t];if("function"==typeof n)i.read=n;else{var a=n.keyArgs,u=n.read,c=n.merge;i.keyFn=!1===a?v:Array.isArray(a)?w(a):"function"==typeof a?a:i.keyFn,"function"==typeof u&&(i.read=u),s(i,c)}i.read&&i.merge&&(i.keyFn=i.keyFn||v)}))},e.prototype.setRootTypename=function(e,t){void 0===t&&(t=e);var r="ROOT_"+e.toUpperCase(),i=this.rootTypenamesById[r];t!==i&&((0,o.kG)(!i||i===e,1),i&&delete this.rootIdsByTypename[i],this.rootIdsByTypename[t]=r,this.rootTypenamesById[r]=t)},e.prototype.addPossibleTypes=function(e){var t=this;this.usingPossibleTypes=!0,Object.keys(e).forEach((function(r){t.getSupertypeSet(r,!0),e[r].forEach((function(e){t.getSupertypeSet(e,!0).add(r);var i=e.match(l.$O);i&&i[0]===e||t.fuzzySubtypes.set(e,new RegExp(e))}))}))},e.prototype.getTypePolicy=function(e){var t=this;if(!l.RI.call(this.typePolicies,e)){var r=this.typePolicies[e]=Object.create(null);r.fields=Object.create(null);var n=this.supertypeMap.get(e);n&&n.size&&n.forEach((function(e){var n=t.getTypePolicy(e),o=n.fields,s=(0,i._T)(n,["fields"]);Object.assign(r,s),Object.assign(r.fields,o)}))}var o=this.toBeAdded[e];return o&&o.length&&this.updateTypePolicy(e,a.o.apply(void 0,o.splice(0))),this.typePolicies[e]},e.prototype.getFieldPolicy=function(e,t,r){if(e){var i=this.getTypePolicy(e).fields;return i[t]||r&&(i[t]=Object.create(null))}},e.prototype.getSupertypeSet=function(e,t){var r=this.supertypeMap.get(e);return!r&&t&&this.supertypeMap.set(e,r=new Set),r},e.prototype.fragmentMatches=function(e,t,r,i){var n=this;if(!e.typeCondition)return!0;if(!t)return!1;var o=e.typeCondition.name.value;if(t===o)return!0;if(this.usingPossibleTypes&&this.supertypeMap.has(o))for(var s=this.getSupertypeSet(t,!0),a=[s],u=function(e){var t=n.getSupertypeSet(e,!1);t&&t.size&&a.indexOf(t)<0&&a.push(t)},c=!(!r||!this.fuzzySubtypes.size),p=0;p<a.length;++p){var h=a[p];if(h.has(o))return s.has(o)||s.add(o),!0;h.forEach(u),c&&p===a.length-1&&(0,l.RC)(e.selectionSet,r,i)&&(c=!1,this.fuzzySubtypes.forEach((function(e,r){var i=t.match(e);i&&i[0]===t&&u(r)})))}return!1},e.prototype.hasKeyArgs=function(e,t){var r=this.getFieldPolicy(e,t,!1);return!(!r||!r.keyFn)},e.prototype.getStoreFieldName=function(e){var t,r=e.typename,i=e.fieldName,n=this.getFieldPolicy(r,i,!1),o=n&&n.keyFn;if(o&&r)for(var a={typename:r,fieldName:i,field:e.field||null,variables:e.variables},u=h(e);o;){var c=o(u,a);if(!Array.isArray(c)){t=c||i;break}o=w(c)}return void 0===t&&(t=e.field?(0,s.vf)(e.field,e.variables):(0,s.PT)(i,h(e))),!1===t?i:i===(0,l.E_)(t)?t:i+":"+t},e.prototype.readField=function(e,t){var r=e.from;if(r&&(e.field||e.fieldName)){if(void 0===e.typename){var i=t.store.getFieldValue(r,"__typename");i&&(e.typename=i)}var n=this.getStoreFieldName(e),o=(0,l.E_)(n),a=t.store.getFieldValue(r,n),u=this.getFieldPolicy(e.typename,o,!1),c=u&&u.read;if(c){var h=g(this,r,e,t,t.store.getStorage((0,s.Yk)(r)?r.__ref:r,n));return p.ab.withValue(this.cache,c,[a,h])}return a}},e.prototype.getMergeFunction=function(e,t,r){var i=this.getFieldPolicy(e,t,!1),n=i&&i.merge;return!n&&r&&(n=(i=this.getTypePolicy(r))&&i.merge),n},e.prototype.runMergeFunction=function(e,t,r,i,n){var o=r.field,s=r.typename,a=r.merge;return a===y?O(i.store.getFieldValue)(e,t):a===b?t:a(e,t,g(this,void 0,{typename:s,fieldName:o.name.value,field:o,variables:i.variables},i,n||Object.create(null)))},e}();function g(e,t,r,n,o){var a=e.getStoreFieldName(r),u=(0,l.E_)(a),c=r.variables||n.variables,p=n.store,f=p.getFieldValue,d=p.toReference,v=p.canRead;return{args:h(r),field:r.field||null,fieldName:u,storeFieldName:a,variables:c,isReference:s.Yk,toReference:d,storage:o,cache:e.cache,canRead:v,readField:function(r,o){var s="string"==typeof r?{fieldName:r,from:o}:(0,i.pi)({},r);return void 0===s.from&&(s.from=t),void 0===s.variables&&(s.variables=c),e.readField(s,n)},mergeObjects:O(f)}}function O(e){return function(t,r){if(Array.isArray(t)||Array.isArray(r))throw new o.ej(2);if(t&&"object"==typeof t&&r&&"object"==typeof r){var n=e(t,"__typename"),s=e(r,"__typename");return n&&s&&n!==s||!(0,l.j)(t)||!(0,l.j)(r)?r:(0,i.pi)((0,i.pi)({},t),r)}return r}}function w(e){return function(t,r){return t?r.fieldName+":"+JSON.stringify(E(t,e,!1)):r.fieldName}}function S(e){var t=new n.Gl(u.m);return function(r,i){var n;if(i.selectionSet&&i.fragmentMap){var o=t.lookupArray([i.selectionSet,i.fragmentMap]);n=o.aliasMap||(o.aliasMap=k(i.selectionSet,i.fragmentMap))}var s=i.keyObject=E(r,e,!0,n);return i.typename+":"+JSON.stringify(s)}}function k(e,t){var r=Object.create(null),i=new Set([e]);return i.forEach((function(e){e.selections.forEach((function(e){if((0,s.My)(e)){if(e.alias){var n=e.alias.value,o=e.name.value;o!==n&&((r.aliases||(r.aliases=Object.create(null)))[o]=n)}e.selectionSet&&((r.subsets||(r.subsets=Object.create(null)))[e.name.value]=k(e.selectionSet,t))}else{var a=(0,c.hi)(e,t);a&&i.add(a.selectionSet)}}))})),r}function E(e,t,r,i){var n,s=Object.create(null);return t.forEach((function(t){if(Array.isArray(t)){if("string"==typeof n){var a=i&&i.subsets,u=a&&a[n];s[n]=E(e[n],t,r,u)}}else{var c=i&&i.aliases,p=c&&c[t]||t;l.RI.call(e,p)?s[n=t]=e[p]:((0,o.kG)(!r,3),n=void 0)}})),s}},3974:(e,t,r)=>{"use strict";r.d(t,{ab:()=>n,li:()=>a,_v:()=>u,QS:()=>c});var i=r(2667),n=new(r(8751).g7),o=new WeakMap;function s(e){var t=o.get(e);return t||o.set(e,t={vars:new Set,dep:(0,i.dP)()}),t}function a(e){s(e).vars.forEach((function(t){return t.forgetCache(e)}))}function u(e){s(e).vars.forEach((function(t){return t.attachCache(e)}))}function c(e){var t=new Set,r=new Set,i=function(a){if(arguments.length>0){if(e!==a){e=a,t.forEach((function(e){s(e).dep.dirty(i),l(e)}));var u=Array.from(r);r.clear(),u.forEach((function(t){return t(e)}))}}else{var c=n.getValue();c&&(o(c),s(c).dep(i))}return e};i.onNextChange=function(e){return r.add(e),function(){r.delete(e)}};var o=i.attachCache=function(e){return t.add(e),s(e).vars.add(i),i};return i.forgetCache=function(e){return t.delete(e)},i}function l(e){e.broadcastWatches&&e.broadcastWatches()}},5367:()=>{},2723:(e,t,r)=>{"use strict";r.d(t,{f:()=>V,J:()=>L});var i=r(3564),n=r(7591),o=r(6706),s=r(2550),a=r(7954),u=r(4255),c=r(2152),l=r(1578);function p(e){return e.errors&&e.errors.length>0||!1}var h=r(4517),f=r(4604),d=r(1234),v=r(6376),y=r(9329),b=r.n(y),m=r(3190),g=r(1813);function O(e){return e&&"function"==typeof e.then}var w=function(e){function t(t){var r=e.call(this,(function(e){return r.addObserver(e),function(){return r.removeObserver(e)}}))||this;return r.observers=new Set,r.addCount=0,r.promise=new Promise((function(e,t){r.resolve=e,r.reject=t})),r.handlers={next:function(e){null!==r.sub&&(r.latest=["next",e],(0,m.p)(r.observers,"next",e))},error:function(e){var t=r.sub;null!==t&&(t&&Promise.resolve().then((function(){return t.unsubscribe()})),r.sub=null,r.latest=["error",e],r.reject(e),(0,m.p)(r.observers,"error",e))},complete:function(){if(null!==r.sub){var e=r.sources.shift();e?O(e)?e.then((function(e){return r.sub=e.subscribe(r.handlers)})):r.sub=e.subscribe(r.handlers):(r.sub=null,r.latest&&"next"===r.latest[0]?r.resolve(r.latest[1]):r.resolve(),(0,m.p)(r.observers,"complete"))}}},r.cancel=function(e){r.reject(e),r.sources=[],r.handlers.complete()},r.promise.catch((function(e){})),"function"==typeof t&&(t=[new(b())(t)]),O(t)?t.then((function(e){return r.start(e)}),r.handlers.error):r.start(t),r}return(0,i.ZT)(t,e),t.prototype.start=function(e){void 0===this.sub&&(this.sources=Array.from(e),this.handlers.complete())},t.prototype.deliverLastMessage=function(e){if(this.latest){var t=this.latest[0],r=e[t];r&&r.call(e,this.latest[1]),null===this.sub&&"next"===t&&e.complete&&e.complete()}},t.prototype.addObserver=function(e){this.observers.has(e)||(this.deliverLastMessage(e),this.observers.add(e),++this.addCount)},t.prototype.removeObserver=function(e,t){this.observers.delete(e)&&--this.addCount<1&&!t&&this.handlers.error(new Error("Observable cancelled prematurely"))},t.prototype.cleanup=function(e){var t=this,r=!1,i=function(){r||(r=!0,t.observers.delete(n),e())},n={next:i,error:i,complete:i},o=this.addCount;this.addObserver(n),this.addCount=o},t}(b());function S(e,t,r){return new(b())((function(i){var n=i.next,o=i.error,s=i.complete,a=0,u=!1,c={then:function(e){return new Promise((function(t){return t(e())}))}};function l(e,t){return e?function(t){++a;var r=function(){return e(t)};c=c.then(r,r).then((function(e){--a,n&&n.call(i,e),u&&p.complete()}),(function(e){throw--a,e})).catch((function(e){o&&o.call(i,e)}))}:function(e){return t&&t.call(i,e)}}var p={next:l(t,n),error:l(r,o),complete:function(){u=!0,a||s&&s.call(i)}},h=e.subscribe(p);return function(){return h.unsubscribe()}}))}(0,g.D)(w);var k=r(1498),E=r(586),R=r(5942),x=r(8410),Q=r(7742),M=r(9770),C=r(386),I=r(3974),F=function(){function e(e){var t=e.cache,r=e.client,i=e.resolvers,n=e.fragmentMatcher;this.cache=t,r&&(this.client=r),i&&this.addResolvers(i),n&&this.setFragmentMatcher(n)}return e.prototype.addResolvers=function(e){var t=this;this.resolvers=this.resolvers||{},Array.isArray(e)?e.forEach((function(e){t.resolvers=(0,Q.Ee)(t.resolvers,e)})):this.resolvers=(0,Q.Ee)(this.resolvers,e)},e.prototype.setResolvers=function(e){this.resolvers={},this.addResolvers(e)},e.prototype.getResolvers=function(){return this.resolvers||{}},e.prototype.runResolvers=function(e){var t=e.document,r=e.remoteResult,n=e.context,o=e.variables,s=e.onlyRunForcedResolvers,a=void 0!==s&&s;return(0,i.mG)(this,void 0,void 0,(function(){return(0,i.Jh)(this,(function(e){return t?[2,this.resolveDocument(t,r.data,n,o,this.fragmentMatcher,a).then((function(e){return(0,i.pi)((0,i.pi)({},r),{data:e.result})}))]:[2,r]}))}))},e.prototype.setFragmentMatcher=function(e){this.fragmentMatcher=e},e.prototype.getFragmentMatcher=function(){return this.fragmentMatcher},e.prototype.clientQuery=function(e){return(0,v.FS)(["client"],e)&&this.resolvers?e:null},e.prototype.serverQuery=function(e){return(0,d.ob)(e)},e.prototype.prepareContext=function(e){var t=this.cache;return(0,i.pi)((0,i.pi)({},e),{cache:t,getCacheKey:function(e){return t.identify(e)}})},e.prototype.addExportedVariables=function(e,t,r){return void 0===t&&(t={}),void 0===r&&(r={}),(0,i.mG)(this,void 0,void 0,(function(){return(0,i.Jh)(this,(function(n){return e?[2,this.resolveDocument(e,this.buildRootValueFromCache(e,t)||{},this.prepareContext(r),t).then((function(e){return(0,i.pi)((0,i.pi)({},t),e.exportedVariables)}))]:[2,(0,i.pi)({},t)]}))}))},e.prototype.shouldForceResolvers=function(e){var t=!1;return(0,x.visit)(e,{Directive:{enter:function(e){if("client"===e.name.value&&e.arguments&&(t=e.arguments.some((function(e){return"always"===e.name.value&&"BooleanValue"===e.value.kind&&!0===e.value.value}))))return x.BREAK}}}),t},e.prototype.buildRootValueFromCache=function(e,t){return this.cache.diff({query:(0,d.aL)(e),variables:t,returnPartialData:!0,optimistic:!1}).result},e.prototype.resolveDocument=function(e,t,r,n,o,s){return void 0===r&&(r={}),void 0===n&&(n={}),void 0===o&&(o=function(){return!0}),void 0===s&&(s=!1),(0,i.mG)(this,void 0,void 0,(function(){var a,u,c,l,p,h,d,v,y;return(0,i.Jh)(this,(function(b){return a=(0,f.p$)(e),u=(0,f.kU)(e),c=(0,M.F)(u),l=a.operation,p=l?l.charAt(0).toUpperCase()+l.slice(1):"Query",d=(h=this).cache,v=h.client,y={fragmentMap:c,context:(0,i.pi)((0,i.pi)({},r),{cache:d,client:v}),variables:n,fragmentMatcher:o,defaultOperationType:p,exportedVariables:{},onlyRunForcedResolvers:s},[2,this.resolveSelectionSet(a.selectionSet,t,y).then((function(e){return{result:e,exportedVariables:y.exportedVariables}}))]}))}))},e.prototype.resolveSelectionSet=function(e,t,r){return(0,i.mG)(this,void 0,void 0,(function(){var o,s,a,u,c,l=this;return(0,i.Jh)(this,(function(p){return o=r.fragmentMap,s=r.context,a=r.variables,u=[t],c=function(e){return(0,i.mG)(l,void 0,void 0,(function(){var c,l;return(0,i.Jh)(this,(function(i){return(0,v.LZ)(e,a)?(0,C.My)(e)?[2,this.resolveField(e,t,r).then((function(t){var r;void 0!==t&&u.push(((r={})[(0,C.u2)(e)]=t,r))}))]:((0,C.Ao)(e)?c=e:(c=o[e.name.value],(0,n.kG)(c,11)),c&&c.typeCondition&&(l=c.typeCondition.name.value,r.fragmentMatcher(t,l,s))?[2,this.resolveSelectionSet(c.selectionSet,t,r).then((function(e){u.push(e)}))]:[2]):[2]}))}))},[2,Promise.all(e.selections.map(c)).then((function(){return(0,Q.bw)(u)}))]}))}))},e.prototype.resolveField=function(e,t,r){return(0,i.mG)(this,void 0,void 0,(function(){var n,o,s,a,u,c,l,p,h,f=this;return(0,i.Jh)(this,(function(i){return n=r.variables,o=e.name.value,s=(0,C.u2)(e),a=o!==s,u=t[s]||t[o],c=Promise.resolve(u),r.onlyRunForcedResolvers&&!this.shouldForceResolvers(e)||(l=t.__typename||r.defaultOperationType,(p=this.resolvers&&this.resolvers[l])&&(h=p[a?o:s])&&(c=Promise.resolve(I.ab.withValue(this.cache,h,[t,(0,C.NC)(e,n),r.context,{field:e,fragmentMap:r.fragmentMap}])))),[2,c.then((function(t){return void 0===t&&(t=u),e.directives&&e.directives.forEach((function(e){"export"===e.name.value&&e.arguments&&e.arguments.forEach((function(e){"as"===e.name.value&&"StringValue"===e.value.kind&&(r.exportedVariables[e.value.value]=t)}))})),e.selectionSet?null==t?t:Array.isArray(t)?f.resolveSubSelectedArray(e,t,r):e.selectionSet?f.resolveSelectionSet(e.selectionSet,t,r):void 0:t}))]}))}))},e.prototype.resolveSubSelectedArray=function(e,t,r){var i=this;return Promise.all(t.map((function(t){return null===t?null:Array.isArray(t)?i.resolveSubSelectedArray(e,t,r):e.selectionSet?i.resolveSelectionSet(e.selectionSet,t,r):void 0})))},e}(),P=new(l.m?WeakMap:Map);function q(e,t){var r=e[t];"function"==typeof r&&(e[t]=function(){return P.set(e,(P.get(e)+1)%1e15),r.apply(this,arguments)})}function D(e){e.notifyTimeout&&(clearTimeout(e.notifyTimeout),e.notifyTimeout=void 0)}var T=function(){function e(e){this.cache=e,this.listeners=new Set,this.document=null,this.lastRequestId=1,this.subscriptions=new Set,this.stopped=!1,this.dirty=!1,this.diff=null,this.observableQuery=null,P.has(e)||(P.set(e,0),q(e,"evict"),q(e,"modify"),q(e,"reset"))}return e.prototype.init=function(e){var t=e.networkStatus||R.I.loading;return this.variables&&this.networkStatus!==R.I.loading&&!(0,c.D)(this.variables,e.variables)&&(t=R.I.setVariables),(0,c.D)(e.variables,this.variables)||(this.diff=null),Object.assign(this,{document:e.document,variables:e.variables,networkError:null,graphQLErrors:this.graphQLErrors||[],networkStatus:t}),e.observableQuery&&this.setObservableQuery(e.observableQuery),e.lastRequestId&&(this.lastRequestId=e.lastRequestId),this},e.prototype.reset=function(){D(this),this.diff=null,this.dirty=!1},e.prototype.getDiff=function(e){return void 0===e&&(e=this.variables),this.diff&&(0,c.D)(e,this.variables)?this.diff:(this.updateWatch(this.variables=e),this.diff=this.cache.diff({query:this.document,variables:e,returnPartialData:!0,optimistic:!0}))},e.prototype.setDiff=function(e){var t=this,r=this.diff;this.diff=e,this.dirty||(e&&e.result)===(r&&r.result)||(this.dirty=!0,this.notifyTimeout||(this.notifyTimeout=setTimeout((function(){return t.notify()}),0)))},e.prototype.setObservableQuery=function(e){var t=this;e!==this.observableQuery&&(this.oqListener&&this.listeners.delete(this.oqListener),this.observableQuery=e,e?(e.queryInfo=this,this.listeners.add(this.oqListener=function(){t.getDiff().fromOptimisticTransaction?e.observe():e.reobserve()})):delete this.oqListener)},e.prototype.notify=function(){var e=this;D(this),this.shouldNotify()&&this.listeners.forEach((function(t){return t(e)})),this.dirty=!1},e.prototype.shouldNotify=function(){if(!this.dirty||!this.listeners.size)return!1;if((0,R.O)(this.networkStatus)&&this.observableQuery){var e=this.observableQuery.options.fetchPolicy;if("cache-only"!==e&&"cache-and-network"!==e)return!1}return!0},e.prototype.stop=function(){if(!this.stopped){this.stopped=!0,this.reset(),this.cancel(),delete this.cancel,this.subscriptions.forEach((function(e){return e.unsubscribe()}));var e=this.observableQuery;e&&e.stopPolling()}},e.prototype.cancel=function(){},e.prototype.updateWatch=function(e){var t=this;void 0===e&&(e=this.variables);var r=this.observableQuery;r&&"no-cache"===r.options.fetchPolicy||this.lastWatch&&this.lastWatch.query===this.document&&(0,c.D)(e,this.lastWatch.variables)||(this.cancel(),this.cancel=this.cache.watch(this.lastWatch={query:this.document,variables:e,optimistic:!0,callback:function(e){return t.setDiff(e)}}))},e.prototype.shouldWrite=function(e,t){var r=this.lastWrite;return!(r&&r.dmCount===P.get(this.cache)&&(0,c.D)(t,r.variables)&&(0,c.D)(e.data,r.result.data))},e.prototype.markResult=function(e,t,r){var i=this;this.graphQLErrors=(0,h.O)(e.errors)?e.errors:[],this.reset(),"no-cache"===t.fetchPolicy?this.diff={result:e.data,complete:!0}:!this.stopped&&r&&(j(e,t.errorPolicy)?this.cache.performTransaction((function(r){if(i.shouldWrite(e,t.variables))r.writeQuery({query:i.document,data:e.data,variables:t.variables}),i.lastWrite={result:e,variables:t.variables,dmCount:P.get(i.cache)};else if(i.diff&&i.diff.complete)return void(e.data=i.diff.result);var n=r.diff({query:i.document,variables:t.variables,returnPartialData:!0,optimistic:!0});i.stopped||i.updateWatch(t.variables),i.diff=n,n.complete&&(e.data=n.result)})):this.lastWrite=void 0)},e.prototype.markReady=function(){return this.networkError=null,this.networkStatus=R.I.ready},e.prototype.markError=function(e){return this.networkStatus=R.I.error,this.lastWrite=void 0,this.reset(),e.graphQLErrors&&(this.graphQLErrors=e.graphQLErrors),e.networkError&&(this.networkError=e.networkError),e},e}();function j(e,t){void 0===t&&(t="none");var r="ignore"===t||"all"===t,i=!p(e);return!i&&r&&e.data&&(i=!0),i}var A=Object.prototype.hasOwnProperty,_=function(){function e(e){var t=e.cache,r=e.link,i=e.queryDeduplication,n=void 0!==i&&i,o=e.onBroadcast,s=e.ssrMode,a=void 0!==s&&s,u=e.clientAwareness,c=void 0===u?{}:u,p=e.localState,h=e.assumeImmutableResults;this.clientAwareness={},this.queries=new Map,this.fetchCancelFns=new Map,this.transformCache=new(l.m?WeakMap:Map),this.queryIdCounter=1,this.requestIdCounter=1,this.mutationIdCounter=1,this.inFlightLinkObservables=new Map,this.cache=t,this.link=r,this.queryDeduplication=n,this.clientAwareness=c,this.localState=p||new F({cache:t}),this.ssrMode=a,this.assumeImmutableResults=!!h,(this.onBroadcast=o)&&(this.mutationStore=Object.create(null))}return e.prototype.stop=function(){var e=this;this.queries.forEach((function(t,r){e.stopQueryNoBroadcast(r)})),this.cancelPendingFetches(new n.ej(12))},e.prototype.cancelPendingFetches=function(e){this.fetchCancelFns.forEach((function(t){return t(e)})),this.fetchCancelFns.clear()},e.prototype.mutate=function(e){var t=e.mutation,r=e.variables,o=e.optimisticResponse,s=e.updateQueries,a=e.refetchQueries,u=void 0===a?[]:a,c=e.awaitRefetchQueries,l=void 0!==c&&c,f=e.update,d=e.errorPolicy,v=void 0===d?"none":d,y=e.fetchPolicy,b=e.context,m=void 0===b?{}:b;return(0,i.mG)(this,void 0,void 0,(function(){var e,a,c;return(0,i.Jh)(this,(function(d){switch(d.label){case 0:return(0,n.kG)(t,13),(0,n.kG)(!y||"no-cache"===y,14),e=this.generateMutationId(),t=this.transform(t).document,r=this.getVariables(t,r),this.transform(t).hasClientExports?[4,this.localState.addExportedVariables(t,r,m)]:[3,2];case 1:r=d.sent(),d.label=2;case 2:return a=this.mutationStore&&(this.mutationStore[e]={mutation:t,variables:r,loading:!0,error:null}),o&&this.markMutationOptimistic(o,{mutationId:e,document:t,variables:r,errorPolicy:v,updateQueries:s,update:f}),this.broadcastQueries(),c=this,[2,new Promise((function(n,d){var b,g;c.getObservableFromLink(t,(0,i.pi)((0,i.pi)({},m),{optimisticResponse:o}),r,!1).subscribe({next:function(i){if(p(i)&&"none"===v)g=new k.c({graphQLErrors:i.errors});else{if(a&&(a.loading=!1,a.error=null),"no-cache"!==y)try{c.markMutationResult({mutationId:e,result:i,document:t,variables:r,errorPolicy:v,updateQueries:s,update:f})}catch(e){return void(g=new k.c({networkError:e}))}b=i}},error:function(t){a&&(a.loading=!1,a.error=t),o&&c.cache.removeOptimistic(e),c.broadcastQueries(),d(new k.c({networkError:t}))},complete:function(){if(g&&a&&(a.loading=!1,a.error=g),o&&c.cache.removeOptimistic(e),c.broadcastQueries(),g)d(g);else{"function"==typeof u&&(u=u(b));var t=[];(0,h.O)(u)&&u.forEach((function(e){if("string"==typeof e)c.queries.forEach((function(r){var i=r.observableQuery;i&&i.hasObservers()&&i.queryName===e&&t.push(i.refetch())}));else{var r={query:e.query,variables:e.variables,fetchPolicy:"network-only"};e.context&&(r.context=e.context),t.push(c.query(r))}})),Promise.all(l?t:[]).then((function(){"ignore"===v&&b&&p(b)&&delete b.errors,n(b)}),d)}}})}))]}}))}))},e.prototype.markMutationResult=function(e,t){var r=this;if(void 0===t&&(t=this.cache),j(e.result,e.errorPolicy)){var i=[{result:e.result.data,dataId:"ROOT_MUTATION",query:e.document,variables:e.variables}],n=e.updateQueries;n&&this.queries.forEach((function(o,s){var a=o.observableQuery,u=a&&a.queryName;if(u&&A.call(n,u)){var c=n[u],l=r.queries.get(s),p=l.document,h=l.variables,d=t.diff({query:p,variables:h,returnPartialData:!0,optimistic:!1}),v=d.result;if(d.complete&&v){var y=c(v,{mutationResult:e.result,queryName:p&&(0,f.rY)(p)||void 0,queryVariables:h});y&&i.push({result:y,dataId:"ROOT_QUERY",query:p,variables:h})}}})),t.performTransaction((function(t){i.forEach((function(e){return t.write(e)}));var r=e.update;r&&r(t,e.result)}),null)}},e.prototype.markMutationOptimistic=function(e,t){var r=this,n="function"==typeof e?e(t.variables):e;return this.cache.recordOptimisticTransaction((function(e){try{r.markMutationResult((0,i.pi)((0,i.pi)({},t),{result:{data:n}}),e)}catch(e){}}),t.mutationId)},e.prototype.fetchQuery=function(e,t,r){return this.fetchQueryObservable(e,t,r).promise},e.prototype.getQueryStore=function(){var e=Object.create(null);return this.queries.forEach((function(t,r){e[r]={variables:t.variables,networkStatus:t.networkStatus,networkError:t.networkError,graphQLErrors:t.graphQLErrors}})),e},e.prototype.resetErrors=function(e){var t=this.queries.get(e);t&&(t.networkError=void 0,t.graphQLErrors=[])},e.prototype.transform=function(e){var t=this.transformCache;if(!t.has(e)){var r=this.cache.transformDocument(e),i=(0,d.Fo)(this.cache.transformForLink(r)),n=this.localState.clientQuery(r),o=i&&this.localState.serverQuery(i),s={document:r,hasClientExports:(0,v.mj)(r),hasForcedResolvers:this.localState.shouldForceResolvers(r),clientQuery:n,serverQuery:o,defaultVars:(0,f.O4)((0,f.$H)(r))},a=function(e){e&&!t.has(e)&&t.set(e,s)};a(e),a(r),a(n),a(o)}return t.get(e)},e.prototype.getVariables=function(e,t){return(0,i.pi)((0,i.pi)({},this.transform(e).defaultVars),t)},e.prototype.watchQuery=function(e){void 0===(e=(0,i.pi)((0,i.pi)({},e),{variables:this.getVariables(e.query,e.variables)})).notifyOnNetworkStatusChange&&(e.notifyOnNetworkStatusChange=!1);var t=new T(this.cache),r=new E.u({queryManager:this,queryInfo:t,options:e});return this.queries.set(r.queryId,t),t.init({document:e.query,observableQuery:r,variables:e.variables}),r},e.prototype.query=function(e){var t=this;(0,n.kG)(e.query,15),(0,n.kG)("Document"===e.query.kind,16),(0,n.kG)(!e.returnPartialData,17),(0,n.kG)(!e.pollInterval,18);var r=this.generateQueryId();return this.fetchQuery(r,e).finally((function(){return t.stopQuery(r)}))},e.prototype.generateQueryId=function(){return String(this.queryIdCounter++)},e.prototype.generateRequestId=function(){return this.requestIdCounter++},e.prototype.generateMutationId=function(){return String(this.mutationIdCounter++)},e.prototype.stopQueryInStore=function(e){this.stopQueryInStoreNoBroadcast(e),this.broadcastQueries()},e.prototype.stopQueryInStoreNoBroadcast=function(e){var t=this.queries.get(e);t&&t.stop()},e.prototype.clearStore=function(){return this.cancelPendingFetches(new n.ej(19)),this.queries.forEach((function(e){e.observableQuery?e.networkStatus=R.I.loading:e.stop()})),this.mutationStore&&(this.mutationStore=Object.create(null)),this.cache.reset()},e.prototype.resetStore=function(){var e=this;return this.clearStore().then((function(){return e.reFetchObservableQueries()}))},e.prototype.reFetchObservableQueries=function(e){var t=this;void 0===e&&(e=!1);var r=[];return this.queries.forEach((function(i,n){var o=i.observableQuery;if(o&&o.hasObservers()){var s=o.options.fetchPolicy;o.resetLastResults(),"cache-only"===s||!e&&"standby"===s||r.push(o.refetch()),t.getQuery(n).setDiff(null)}})),this.broadcastQueries(),Promise.all(r)},e.prototype.setObservableQuery=function(e){this.getQuery(e.queryId).setObservableQuery(e)},e.prototype.startGraphQLSubscription=function(e){var t=this,r=e.query,i=e.fetchPolicy,n=e.errorPolicy,o=e.variables,s=e.context,a=void 0===s?{}:s;r=this.transform(r).document,o=this.getVariables(r,o);var u=function(e){return t.getObservableFromLink(r,a,e,!1).map((function(o){if("no-cache"!==i&&(j(o,n)&&t.cache.write({query:r,result:o.data,dataId:"ROOT_SUBSCRIPTION",variables:e}),t.broadcastQueries()),p(o))throw new k.c({graphQLErrors:o.errors});return o}))};if(this.transform(r).hasClientExports){var c=this.localState.addExportedVariables(r,o,a).then(u);return new(b())((function(e){var t=null;return c.then((function(r){return t=r.subscribe(e)}),e.error),function(){return t&&t.unsubscribe()}}))}return u(o)},e.prototype.stopQuery=function(e){this.stopQueryNoBroadcast(e),this.broadcastQueries()},e.prototype.stopQueryNoBroadcast=function(e){this.stopQueryInStoreNoBroadcast(e),this.removeQuery(e)},e.prototype.removeQuery=function(e){this.fetchCancelFns.delete(e),this.getQuery(e).stop(),this.queries.delete(e)},e.prototype.broadcastQueries=function(){this.onBroadcast&&this.onBroadcast(),this.queries.forEach((function(e){return e.notify()}))},e.prototype.getLocalState=function(){return this.localState},e.prototype.getObservableFromLink=function(e,t,r,n){var o,a,u=this;void 0===n&&(n=null!==(o=null==t?void 0:t.queryDeduplication)&&void 0!==o?o:this.queryDeduplication);var c=this.transform(e).serverQuery;if(c){var l=this.inFlightLinkObservables,p=this.link,h={query:c,variables:r,operationName:(0,f.rY)(c)||void 0,context:this.prepareContext((0,i.pi)((0,i.pi)({},t),{forceFetch:!n}))};if(t=h.context,n){var d=l.get(c)||new Map;l.set(c,d);var v=JSON.stringify(r);if(!(a=d.get(v))){var y=new w([(0,s.h)(p,h)]);d.set(v,a=y),y.cleanup((function(){d.delete(v)&&d.size<1&&l.delete(c)}))}}else a=new w([(0,s.h)(p,h)])}else a=new w([b().of({data:{}})]),t=this.prepareContext(t);var m=this.transform(e).clientQuery;return m&&(a=S(a,(function(e){return u.localState.runResolvers({document:m,remoteResult:e,context:t,variables:r})}))),a},e.prototype.getResultsFromLink=function(e,t,r){var i=e.lastRequestId=this.generateRequestId();return S(this.getObservableFromLink(e.document,r.context,r.variables),(function(n){var o=(0,h.O)(n.errors);if(i>=e.lastRequestId){if(o&&"none"===r.errorPolicy)throw e.markError(new k.c({graphQLErrors:n.errors}));e.markResult(n,r,t),e.markReady()}var s={data:n.data,loading:!1,networkStatus:e.networkStatus||R.I.ready};return o&&"ignore"!==r.errorPolicy&&(s.errors=n.errors),s}),(function(t){var r=(0,k.M)(t)?t:new k.c({networkError:t});throw i>=e.lastRequestId&&e.markError(r),r}))},e.prototype.fetchQueryObservable=function(e,t,r){var i=this;void 0===r&&(r=R.I.loading);var n=this.transform(t.query).document,o=this.getVariables(n,t.variables),s=this.getQuery(e),a=s.networkStatus,u=t.fetchPolicy,c=void 0===u?"cache-first":u,l=t.errorPolicy,p=void 0===l?"none":l,h=t.returnPartialData,f=void 0!==h&&h,d=t.notifyOnNetworkStatusChange,v=void 0!==d&&d,y=t.context,b=void 0===y?{}:y;("cache-first"===c||"cache-and-network"===c||"network-only"===c||"no-cache"===c)&&v&&"number"==typeof a&&a!==r&&(0,R.O)(r)&&("cache-first"!==c&&(c="cache-and-network"),f=!0);var m=Object.assign({},t,{query:n,variables:o,fetchPolicy:c,errorPolicy:p,returnPartialData:f,notifyOnNetworkStatusChange:v,context:b}),g=function(e){return m.variables=e,i.fetchQueryByPolicy(s,m,r)};this.fetchCancelFns.set(e,(function(e){Promise.resolve().then((function(){return O.cancel(e)}))}));var O=new w(this.transform(m.query).hasClientExports?this.localState.addExportedVariables(m.query,m.variables,m.context).then(g):g(m.variables));return O.cleanup((function(){i.fetchCancelFns.delete(e);var r=t.nextFetchPolicy;r&&(t.nextFetchPolicy=void 0,t.fetchPolicy="function"==typeof r?r.call(t,t.fetchPolicy||"cache-first"):r)})),O},e.prototype.fetchQueryByPolicy=function(e,t,r){var n=this,o=t.query,s=t.variables,a=t.fetchPolicy,u=t.errorPolicy,c=t.returnPartialData,l=t.context;e.init({document:o,variables:s,networkStatus:r});var p=function(){return e.getDiff(s)},h=function(t,r){void 0===r&&(r=e.networkStatus||R.I.loading);var a=t.result,u=function(e){return b().of((0,i.pi)({data:e,loading:(0,R.O)(r),networkStatus:r},t.complete?null:{partial:!0}))};return n.transform(o).hasForcedResolvers?n.localState.runResolvers({document:o,remoteResult:{data:a},context:l,variables:s,onlyRunForcedResolvers:!0}).then((function(e){return u(e.data)})):u(a)},f=function(t){return n.getResultsFromLink(e,t,{variables:s,context:l,fetchPolicy:a,errorPolicy:u})};switch(a){default:case"cache-first":return(d=p()).complete?[h(d,e.markReady())]:c?[h(d),f(!0)]:[f(!0)];case"cache-and-network":var d;return(d=p()).complete||c?[h(d),f(!0)]:[f(!0)];case"cache-only":return[h(p(),e.markReady())];case"network-only":return[f(!0)];case"no-cache":return[f(!1)];case"standby":return[]}},e.prototype.getQuery=function(e){return e&&!this.queries.has(e)&&this.queries.set(e,new T(this.cache)),this.queries.get(e)},e.prototype.prepareContext=function(e){void 0===e&&(e={});var t=this.localState.prepareContext(e);return(0,i.pi)((0,i.pi)({},t),{clientAwareness:this.clientAwareness})},e}();function L(e,t){return(0,a.o)(e,t,t.variables&&{variables:(0,i.pi)((0,i.pi)({},e.variables),t.variables)})}var V=function(){function e(e){var t=this;this.defaultOptions={},this.resetStoreCallbacks=[],this.clearStoreCallbacks=[];var r=e.uri,i=e.credentials,s=e.headers,a=e.cache,c=e.ssrMode,l=void 0!==c&&c,p=e.ssrForceFetchDelay,h=void 0===p?0:p,f=e.connectToDevTools,d=void 0===f?"object"==typeof window&&!window.__APOLLO_CLIENT__&&!1:f,v=e.queryDeduplication,y=void 0===v||v,b=e.defaultOptions,m=e.assumeImmutableResults,g=void 0!==m&&m,O=e.resolvers,w=e.typeDefs,S=e.fragmentMatcher,k=e.name,E=e.version,R=e.link;if(R||(R=r?new u.u({uri:r,credentials:i,headers:s}):o.i.empty()),!a)throw new n.ej(9);this.link=R,this.cache=a,this.disableNetworkFetches=l||h>0,this.queryDeduplication=y,this.defaultOptions=b||{},this.typeDefs=w,h&&setTimeout((function(){return t.disableNetworkFetches=!1}),h),this.watchQuery=this.watchQuery.bind(this),this.query=this.query.bind(this),this.mutate=this.mutate.bind(this),this.resetStore=this.resetStore.bind(this),this.reFetchObservableQueries=this.reFetchObservableQueries.bind(this),d&&"object"==typeof window&&(window.__APOLLO_CLIENT__=this),this.version="3.3.19",this.localState=new F({cache:a,client:this,resolvers:O,fragmentMatcher:S}),this.queryManager=new _({cache:this.cache,link:this.link,queryDeduplication:y,ssrMode:l,clientAwareness:{name:k,version:E},localState:this.localState,assumeImmutableResults:g,onBroadcast:d?function(){t.devToolsHookCb&&t.devToolsHookCb({action:{},state:{queries:t.queryManager.getQueryStore(),mutations:t.queryManager.mutationStore||{}},dataWithOptimisticResults:t.cache.extract(!0)})}:void 0})}return e.prototype.stop=function(){this.queryManager.stop()},e.prototype.watchQuery=function(e){return this.defaultOptions.watchQuery&&(e=L(this.defaultOptions.watchQuery,e)),!this.disableNetworkFetches||"network-only"!==e.fetchPolicy&&"cache-and-network"!==e.fetchPolicy||(e=(0,i.pi)((0,i.pi)({},e),{fetchPolicy:"cache-first"})),this.queryManager.watchQuery(e)},e.prototype.query=function(e){return this.defaultOptions.query&&(e=L(this.defaultOptions.query,e)),(0,n.kG)("cache-and-network"!==e.fetchPolicy,10),this.disableNetworkFetches&&"network-only"===e.fetchPolicy&&(e=(0,i.pi)((0,i.pi)({},e),{fetchPolicy:"cache-first"})),this.queryManager.query(e)},e.prototype.mutate=function(e){return this.defaultOptions.mutate&&(e=L(this.defaultOptions.mutate,e)),this.queryManager.mutate(e)},e.prototype.subscribe=function(e){return this.queryManager.startGraphQLSubscription(e)},e.prototype.readQuery=function(e,t){return void 0===t&&(t=!1),this.cache.readQuery(e,t)},e.prototype.readFragment=function(e,t){return void 0===t&&(t=!1),this.cache.readFragment(e,t)},e.prototype.writeQuery=function(e){this.cache.writeQuery(e),this.queryManager.broadcastQueries()},e.prototype.writeFragment=function(e){this.cache.writeFragment(e),this.queryManager.broadcastQueries()},e.prototype.__actionHookForDevTools=function(e){this.devToolsHookCb=e},e.prototype.__requestRaw=function(e){return(0,s.h)(this.link,e)},e.prototype.resetStore=function(){var e=this;return Promise.resolve().then((function(){return e.queryManager.clearStore()})).then((function(){return Promise.all(e.resetStoreCallbacks.map((function(e){return e()})))})).then((function(){return e.reFetchObservableQueries()}))},e.prototype.clearStore=function(){var e=this;return Promise.resolve().then((function(){return e.queryManager.clearStore()})).then((function(){return Promise.all(e.clearStoreCallbacks.map((function(e){return e()})))}))},e.prototype.onResetStore=function(e){var t=this;return this.resetStoreCallbacks.push(e),function(){t.resetStoreCallbacks=t.resetStoreCallbacks.filter((function(t){return t!==e}))}},e.prototype.onClearStore=function(e){var t=this;return this.clearStoreCallbacks.push(e),function(){t.clearStoreCallbacks=t.clearStoreCallbacks.filter((function(t){return t!==e}))}},e.prototype.reFetchObservableQueries=function(e){return this.queryManager.reFetchObservableQueries(e)},e.prototype.extract=function(e){return this.cache.extract(e)},e.prototype.restore=function(e){return this.cache.restore(e)},e.prototype.addResolvers=function(e){this.localState.addResolvers(e)},e.prototype.setResolvers=function(e){this.localState.setResolvers(e)},e.prototype.getResolvers=function(){return this.localState.getResolvers()},e.prototype.setLocalStateFragmentMatcher=function(e){this.localState.setFragmentMatcher(e)},e.prototype.setLink=function(e){this.link=this.queryManager.link=e},e}()},586:(e,t,r)=>{"use strict";r.d(t,{u:()=>m});var i=r(3564),n=r(7591),o=r(2152),s=r(5942),a=Object.prototype.toString;function u(e){return c(e)}function c(e,t){switch(a.call(e)){case"[object Array]":if((t=t||new Map).has(e))return t.get(e);var r=e.slice(0);return t.set(e,r),r.forEach((function(e,i){r[i]=c(e,t)})),r;case"[object Object]":if((t=t||new Map).has(e))return t.get(e);var i=Object.create(Object.getPrototypeOf(e));return t.set(e,i),Object.keys(e).forEach((function(r){i[r]=c(e[r],t)})),i;default:return e}}var l=r(3190),p=r(4604),h=r(4517),f=r(9329),d=r.n(f),v=r(1813),y=r(7954),b=function(){function e(e,t,r,i){this.observer=e,this.options=t,this.fetch=r,this.shouldFetch=i}return e.prototype.reobserve=function(e,t){e?this.updateOptions(e):this.updatePolling();var r=this.fetch(this.options,t);return this.concast&&this.concast.removeObserver(this.observer,!0),r.addObserver(this.observer),(this.concast=r).promise},e.prototype.updateOptions=function(e){return Object.assign(this.options,(0,y.o)(e)),this.updatePolling(),this},e.prototype.stop=function(){this.concast&&(this.concast.removeObserver(this.observer),delete this.concast),this.pollingInfo&&(clearTimeout(this.pollingInfo.timeout),this.options.pollInterval=0,this.updatePolling())},e.prototype.updatePolling=function(){var e=this,t=this.pollingInfo,r=this.options.pollInterval;if(r){if((!t||t.interval!==r)&&((0,n.kG)(r,20),!1!==this.shouldFetch)){(t||(this.pollingInfo={})).interval=r;var i=function(){e.pollingInfo&&(e.shouldFetch&&e.shouldFetch()?e.reobserve({fetchPolicy:"network-only",nextFetchPolicy:e.options.fetchPolicy||"cache-first"},s.I.poll).then(o,o):o())},o=function(){var t=e.pollingInfo;t&&(clearTimeout(t.timeout),t.timeout=setTimeout(i,t.interval))};o()}}else t&&(clearTimeout(t.timeout),delete this.pollingInfo)},e}(),m=function(e){function t(t){var r=t.queryManager,n=t.queryInfo,o=t.options,a=e.call(this,(function(e){return a.onSubscribe(e)}))||this;a.observers=new Set,a.subscriptions=new Set,a.observer={next:function(e){(a.lastError||a.isDifferentFromLastResult(e))&&(a.updateLastResult(e),(0,l.p)(a.observers,"next",e))},error:function(e){a.updateLastResult((0,i.pi)((0,i.pi)({},a.lastResult),{error:e,errors:e.graphQLErrors,networkStatus:s.I.error,loading:!1})),(0,l.p)(a.observers,"error",a.lastError=e)}},a.isTornDown=!1,a.options=o,a.queryId=r.generateQueryId();var u=(0,p.$H)(o.query);return a.queryName=u&&u.name&&u.name.value,a.queryManager=r,a.queryInfo=n,a}return(0,i.ZT)(t,e),Object.defineProperty(t.prototype,"variables",{get:function(){return this.options.variables},enumerable:!1,configurable:!0}),t.prototype.result=function(){var e=this;return new Promise((function(t,r){var i={next:function(r){t(r),e.observers.delete(i),e.observers.size||e.queryManager.removeQuery(e.queryId),setTimeout((function(){n.unsubscribe()}),0)},error:r},n=e.subscribe(i)}))},t.prototype.getCurrentResult=function(e){void 0===e&&(e=!0);var t=this.lastResult,r=this.queryInfo.networkStatus||t&&t.networkStatus||s.I.ready,n=(0,i.pi)((0,i.pi)({},t),{loading:(0,s.O)(r),networkStatus:r});if(this.isTornDown)return n;var o=this.options.fetchPolicy,a=void 0===o?"cache-first":o;if("no-cache"===a||"network-only"===a)delete n.partial;else if(!n.data||!this.queryManager.transform(this.options.query).hasForcedResolvers){var u=this.queryInfo.getDiff();n.data=u.complete||this.options.returnPartialData?u.result:void 0,u.complete?(n.networkStatus!==s.I.loading||"cache-first"!==a&&"cache-only"!==a||(n.networkStatus=s.I.ready,n.loading=!1),delete n.partial):n.partial=!0}return e&&this.updateLastResult(n),n},t.prototype.isDifferentFromLastResult=function(e){return!(0,o.D)(this.lastResultSnapshot,e)},t.prototype.getLastResult=function(){return this.lastResult},t.prototype.getLastError=function(){return this.lastError},t.prototype.resetLastResults=function(){delete this.lastResult,delete this.lastResultSnapshot,delete this.lastError,this.isTornDown=!1},t.prototype.resetQueryStoreErrors=function(){this.queryManager.resetErrors(this.queryId)},t.prototype.refetch=function(e){var t={pollInterval:0},r=this.options.fetchPolicy;return"no-cache"!==r&&"cache-and-network"!==r&&(t.fetchPolicy="network-only",t.nextFetchPolicy=r||"cache-first"),e&&!(0,o.D)(this.options.variables,e)&&(t.variables=this.options.variables=(0,i.pi)((0,i.pi)({},this.options.variables),e)),this.newReobserver(!1).reobserve(t,s.I.refetch)},t.prototype.fetchMore=function(e){var t=this,r=(0,i.pi)((0,i.pi)({},e.query?e:(0,i.pi)((0,i.pi)((0,i.pi)({},this.options),e),{variables:(0,i.pi)((0,i.pi)({},this.options.variables),e.variables)})),{fetchPolicy:"no-cache"}),n=this.queryManager.generateQueryId();return r.notifyOnNetworkStatusChange&&(this.queryInfo.networkStatus=s.I.fetchMore,this.observe()),this.queryManager.fetchQuery(n,r,s.I.fetchMore).then((function(i){var n=i.data,o=e.updateQuery;return o?t.updateQuery((function(e){return o(e,{fetchMoreResult:n,variables:r.variables})})):t.queryManager.cache.writeQuery({query:r.query,variables:r.variables,data:n}),i})).finally((function(){t.queryManager.stopQuery(n),t.reobserve()}))},t.prototype.subscribeToMore=function(e){var t=this,r=this.queryManager.startGraphQLSubscription({query:e.document,variables:e.variables,context:e.context}).subscribe({next:function(r){var i=e.updateQuery;i&&t.updateQuery((function(e,t){var n=t.variables;return i(e,{subscriptionData:r,variables:n})}))},error:function(t){e.onError&&e.onError(t)}});return this.subscriptions.add(r),function(){t.subscriptions.delete(r)&&r.unsubscribe()}},t.prototype.setOptions=function(e){return this.reobserve(e)},t.prototype.setVariables=function(e){if((0,o.D)(this.variables,e))return this.observers.size?this.result():Promise.resolve();if(this.options.variables=e,!this.observers.size)return Promise.resolve();var t=this.options.fetchPolicy,r=void 0===t?"cache-first":t,i={fetchPolicy:r,variables:e};return"cache-first"!==r&&"no-cache"!==r&&"network-only"!==r&&(i.fetchPolicy="cache-and-network",i.nextFetchPolicy=r),this.reobserve(i,s.I.setVariables)},t.prototype.updateQuery=function(e){var t,r=this.queryManager,i=e(r.cache.diff({query:this.options.query,variables:this.variables,previousResult:null===(t=this.lastResult)||void 0===t?void 0:t.data,returnPartialData:!0,optimistic:!1}).result,{variables:this.variables});i&&(r.cache.writeQuery({query:this.options.query,data:i,variables:this.variables}),r.broadcastQueries())},t.prototype.startPolling=function(e){this.getReobserver().updateOptions({pollInterval:e})},t.prototype.stopPolling=function(){this.reobserver&&this.reobserver.updateOptions({pollInterval:0})},t.prototype.updateLastResult=function(e){var t=this.lastResult;return this.lastResult=e,this.lastResultSnapshot=this.queryManager.assumeImmutableResults?e:u(e),(0,h.O)(e.errors)||delete this.lastError,t},t.prototype.onSubscribe=function(e){var t=this;if(e===this.observer)return function(){};try{var r=e._subscription._observer;r&&!r.error&&(r.error=g)}catch(e){}var i=!this.observers.size;return this.observers.add(e),this.lastError?e.error&&e.error(this.lastError):this.lastResult&&e.next&&e.next(this.lastResult),i&&this.reobserve().catch((function(e){})),function(){t.observers.delete(e)&&!t.observers.size&&t.tearDownQuery()}},t.prototype.getReobserver=function(){return this.reobserver||(this.reobserver=this.newReobserver(!0))},t.prototype.newReobserver=function(e){var t=this,r=this.queryManager,n=this.queryId;return r.setObservableQuery(this),new b(this.observer,e?this.options:(0,i.pi)({},this.options),(function(e,i){return r.setObservableQuery(t),r.fetchQueryObservable(n,e,i)}),!r.ssrMode&&function(){return!(0,s.O)(t.queryInfo.networkStatus)})},t.prototype.reobserve=function(e,t){return this.isTornDown=!1,this.getReobserver().reobserve(e,t)},t.prototype.observe=function(){this.observer.next(this.getCurrentResult(!1))},t.prototype.hasObservers=function(){return this.observers.size>0},t.prototype.tearDownQuery=function(){this.isTornDown||(this.reobserver&&(this.reobserver.stop(),delete this.reobserver),this.subscriptions.forEach((function(e){return e.unsubscribe()})),this.subscriptions.clear(),this.queryManager.stopQuery(this.queryId),this.observers.clear(),this.isTornDown=!0)},t}(d());function g(e){}(0,v.D)(m)},1439:(e,t,r)=>{"use strict";r.r(t),r.d(t,{ApolloClient:()=>i.f,mergeOptions:()=>i.J,ObservableQuery:()=>n.u,NetworkStatus:()=>o.I,isApolloError:()=>u.M,ApolloError:()=>u.c,Cache:()=>c.C,ApolloCache:()=>l.R,InMemoryCache:()=>p.h,MissingFieldError:()=>h.y,defaultDataIdFromObject:()=>f.u,makeVar:()=>d.QS,HttpLink:()=>b.uG,checkFetcher:()=>b.U2,createHttpLink:()=>b.LQ,createSignalIfSupported:()=>b.$g,fallbackHttpConfig:()=>b.SC,parseAndCheckHttpResponse:()=>b.dO,rewriteURIForGET:()=>b.Hg,selectHttpOptionsAndBody:()=>b.E4,selectURI:()=>b.rg,serializeFetchParameter:()=>b.gE,fromError:()=>m.Q,toPromise:()=>g.V,fromPromise:()=>O.p,throwServerError:()=>w.P,Observable:()=>k.a,isReference:()=>E.Yk,makeReference:()=>E.kQ,setLogVerbosity:()=>R.U6,gql:()=>x.ZP,resetCaches:()=>x.HW,disableFragmentWarnings:()=>x._t,enableExperimentalFragmentVariables:()=>x.wO,disableExperimentalFragmentVariables:()=>x.J9});var i=r(2723),n=r(586),o=r(5942),s=r(2191),a={};for(const e in s)["default","ApolloClient","mergeOptions","ObservableQuery","NetworkStatus","isApolloError","ApolloError","Cache","ApolloCache","InMemoryCache","MissingFieldError","defaultDataIdFromObject","makeVar","fromError","toPromise","fromPromise","throwServerError","Observable","isReference","makeReference","setLogVerbosity","gql","resetCaches","disableFragmentWarnings","enableExperimentalFragmentVariables","disableExperimentalFragmentVariables"].indexOf(e)<0&&(a[e]=()=>s[e]);r.d(t,a);var u=r(1498),c=r(4038),l=r(4862),p=r(8806),h=r(2802),f=r(926),d=r(3974),v=r(5367);a={};for(const e in v)["default","ApolloClient","mergeOptions","ObservableQuery","NetworkStatus","isApolloError","ApolloError","Cache","ApolloCache","InMemoryCache","MissingFieldError","defaultDataIdFromObject","makeVar","fromError","toPromise","fromPromise","throwServerError","Observable","isReference","makeReference","setLogVerbosity","gql","resetCaches","disableFragmentWarnings","enableExperimentalFragmentVariables","disableExperimentalFragmentVariables"].indexOf(e)<0&&(a[e]=()=>v[e]);r.d(t,a);var y=r(1707);a={};for(const e in y)["default","ApolloClient","mergeOptions","ObservableQuery","NetworkStatus","isApolloError","ApolloError","Cache","ApolloCache","InMemoryCache","MissingFieldError","defaultDataIdFromObject","makeVar","fromError","toPromise","fromPromise","throwServerError","Observable","isReference","makeReference","setLogVerbosity","gql","resetCaches","disableFragmentWarnings","enableExperimentalFragmentVariables","disableExperimentalFragmentVariables"].indexOf(e)<0&&(a[e]=()=>y[e]);r.d(t,a);var b=r(8923),m=r(7511),g=r(1556),O=r(8992),w=r(5347),S=r(9329),k=r.n(S),E=r(386),R=r(7591),x=r(1230);(0,R.U6)("log")},5942:(e,t,r)=>{"use strict";var i;function n(e){return!!e&&e<7}r.d(t,{I:()=>i,O:()=>n}),function(e){e[e.loading=1]="loading",e[e.setVariables=2]="setVariables",e[e.fetchMore=3]="fetchMore",e[e.refetch=4]="refetch",e[e.poll=6]="poll",e[e.ready=7]="ready",e[e.error=8]="error"}(i||(i={}))},2191:()=>{},1498:(e,t,r)=>{"use strict";r.d(t,{M:()=>o,c:()=>s});var i=r(3564),n=r(4517);function o(e){return e.hasOwnProperty("graphQLErrors")}var s=function(e){function t(r){var i,o,s=r.graphQLErrors,a=r.networkError,u=r.errorMessage,c=r.extraInfo,l=e.call(this,u)||this;return l.graphQLErrors=s||[],l.networkError=a||null,l.message=u||(i=l,o="",(0,n.O)(i.graphQLErrors)&&i.graphQLErrors.forEach((function(e){var t=e?e.message:"Error message not found.";o+=t+"\n"})),i.networkError&&(o+=i.networkError.message+"\n"),o=o.replace(/\n$/,"")),l.extraInfo=c,l.__proto__=t.prototype,l}return(0,i.ZT)(t,e),t}(Error)},6829:(e,t,r)=>{"use strict";r.r(t);var i=r(1439),n={};for(const e in i)"default"!==e&&(n[e]=()=>i[e]);r.d(t,n);var o=r(3341);n={};for(const e in o)["default","ApolloCache","ApolloClient","ApolloError","ApolloLink","Cache","HttpLink","InMemoryCache","MissingFieldError","NetworkStatus","Observable","ObservableQuery","checkFetcher","concat","createHttpLink","createSignalIfSupported","defaultDataIdFromObject","disableExperimentalFragmentVariables","disableFragmentWarnings","empty","enableExperimentalFragmentVariables","execute","fallbackHttpConfig","from","fromError","fromPromise","gql","isApolloError","isReference","makeReference","makeVar","mergeOptions","parseAndCheckHttpResponse","resetCaches","rewriteURIForGET","selectHttpOptionsAndBody","selectURI","serializeFetchParameter","setLogVerbosity","split","throwServerError","toPromise"].indexOf(e)<0&&(n[e]=()=>o[e]);r.d(t,n)},4957:(e,t,r)=>{"use strict";r.d(t,{z:()=>i});var i=r(6706).i.concat},7325:(e,t,r)=>{"use strict";r.d(t,{c:()=>i});var i=r(6706).i.empty},2550:(e,t,r)=>{"use strict";r.d(t,{h:()=>i});var i=r(6706).i.execute},4674:(e,t,r)=>{"use strict";r.d(t,{D:()=>i});var i=r(6706).i.from},1707:(e,t,r)=>{"use strict";r.r(t),r.d(t,{empty:()=>i.c,from:()=>n.D,split:()=>o.V,concat:()=>s.z,execute:()=>a.h,ApolloLink:()=>u.i});var i=r(7325),n=r(4674),o=r(4738),s=r(4957),a=r(2550),u=r(6706),c=r(9875),l={};for(const e in c)["default","empty","from","split","concat","execute","ApolloLink"].indexOf(e)<0&&(l[e]=()=>c[e]);r.d(t,l)},4738:(e,t,r)=>{"use strict";r.d(t,{V:()=>i});var i=r(6706).i.split},9875:()=>{},4255:(e,t,r)=>{"use strict";r.d(t,{u:()=>s});var i=r(3564),n=r(6706),o=r(2974),s=function(e){function t(t){void 0===t&&(t={});var r=e.call(this,(0,o.L)(t).request)||this;return r.options=t,r}return(0,i.ZT)(t,e),t}(n.i)},9:(e,t,r)=>{"use strict";r.d(t,{U:()=>n});var i=r(7591),n=function(e){if(!e&&"undefined"==typeof fetch)throw new i.ej(22)}},2974:(e,t,r)=>{"use strict";r.d(t,{L:()=>y});var i=r(3564),n=r(8410),o=r(6706),s=r(9329),a=r.n(s),u=r(5992),c=r(9683),l=r(4157),p=r(9),h=r(6569),f=r(5371),d=r(4042),v=r(7511),y=function(e){void 0===e&&(e={});var t=e.uri,r=void 0===t?"/graphql":t,s=e.fetch,y=e.includeExtensions,b=e.useGETForQueries,m=e.includeUnusedVariables,g=void 0!==m&&m,O=(0,i._T)(e,["uri","fetch","includeExtensions","useGETForQueries","includeUnusedVariables"]);(0,p.U)(s),s||(s=fetch);var w={http:{includeExtensions:y},options:O.fetchOptions,credentials:O.credentials,headers:O.headers};return new o.i((function(e){var t=(0,c.r)(e,r),o=e.getContext(),p={};if(o.clientAwareness){var y=o.clientAwareness,m=y.name,O=y.version;m&&(p["apollographql-client-name"]=m),O&&(p["apollographql-client-version"]=O)}var S,k=(0,i.pi)((0,i.pi)({},p),o.headers),E={http:o.http,options:o.fetchOptions,credentials:o.credentials,headers:k},R=(0,h.E)(e,h.S,w,E),x=R.options,Q=R.body;if(Q.variables&&!g){var M=new Set(Object.keys(Q.variables));(0,n.visit)(e.query,{Variable:function(e,t,r){r&&"VariableDefinition"!==r.kind&&M.delete(e.name.value)}}),M.size&&(Q.variables=(0,i.pi)({},Q.variables),M.forEach((function(e){delete Q.variables[e]})))}if(!x.signal){var C=(0,f.$)(),I=C.controller,F=C.signal;(S=I)&&(x.signal=F)}if(b&&!e.query.definitions.some((function(e){return"OperationDefinition"===e.kind&&"mutation"===e.operation}))&&(x.method="GET"),"GET"===x.method){var P=(0,d.H)(t,Q),q=P.newURI,D=P.parseError;if(D)return(0,v.Q)(D);t=q}else try{x.body=(0,u.g)(Q,"Payload")}catch(D){return(0,v.Q)(D)}return new(a())((function(r){return s(t,x).then((function(t){return e.setContext({response:t}),t})).then((0,l.d)(e)).then((function(e){return r.next(e),r.complete(),e})).catch((function(e){"AbortError"!==e.name&&(e.result&&e.result.errors&&e.result.data&&r.next(e.result),r.error(e))})),function(){S&&S.abort()}}))}))}},5371:(e,t,r)=>{"use strict";r.d(t,{$:()=>i});var i=function(){if("undefined"==typeof AbortController)return{controller:!1,signal:!1};var e=new AbortController;return{controller:e,signal:e.signal}}},8923:(e,t,r)=>{"use strict";r.d(t,{dO:()=>i.d,gE:()=>n.g,SC:()=>o.S,E4:()=>o.E,U2:()=>s.U,$g:()=>a.$,rg:()=>u.r,LQ:()=>c.L,uG:()=>l.u,Hg:()=>p.H});var i=r(4157),n=r(5992),o=r(6569),s=r(9),a=r(5371),u=r(9683),c=r(2974),l=r(4255),p=r(4042)},4157:(e,t,r)=>{"use strict";r.d(t,{d:()=>o});var i=r(5347),n=Object.prototype.hasOwnProperty;function o(e){return function(t){return t.text().then((function(e){try{return JSON.parse(e)}catch(i){var r=i;throw r.name="ServerParseError",r.response=t,r.statusCode=t.status,r.bodyText=e,r}})).then((function(r){return t.status>=300&&(0,i.P)(t,r,"Response not successful: Received status code "+t.status),Array.isArray(r)||n.call(r,"data")||n.call(r,"errors")||(0,i.P)(t,r,"Server response was missing for query '"+(Array.isArray(e)?e.map((function(e){return e.operationName})):e.operationName)+"'."),r}))}}},4042:(e,t,r)=>{"use strict";r.d(t,{H:()=>n});var i=r(5992);function n(e,t){var r=[],n=function(e,t){r.push(e+"="+encodeURIComponent(t))};if("query"in t&&n("query",t.query),t.operationName&&n("operationName",t.operationName),t.variables){var o=void 0;try{o=(0,i.g)(t.variables,"Variables map")}catch(e){return{parseError:e}}n("variables",o)}if(t.extensions){var s=void 0;try{s=(0,i.g)(t.extensions,"Extensions map")}catch(e){return{parseError:e}}n("extensions",s)}var a="",u=e,c=e.indexOf("#");-1!==c&&(a=e.substr(c),u=e.substr(0,c));var l=-1===u.indexOf("?")?"?":"&";return{newURI:u+l+r.join("&")+a}}},6569:(e,t,r)=>{"use strict";r.d(t,{S:()=>o,E:()=>s});var i=r(3564),n=r(8410),o={http:{includeQuery:!0,includeExtensions:!1},headers:{accept:"*/*","content-type":"application/json"},options:{method:"POST"}},s=function(e,t){for(var r=[],o=2;o<arguments.length;o++)r[o-2]=arguments[o];var s=(0,i.pi)((0,i.pi)({},t.options),{headers:t.headers,credentials:t.credentials}),a=t.http||{};r.forEach((function(e){s=(0,i.pi)((0,i.pi)((0,i.pi)({},s),e.options),{headers:(0,i.pi)((0,i.pi)({},s.headers),e.headers)}),e.credentials&&(s.credentials=e.credentials),a=(0,i.pi)((0,i.pi)({},a),e.http)}));var u=e.operationName,c=e.extensions,l=e.variables,p=e.query,h={operationName:u,variables:l};return a.includeExtensions&&(h.extensions=c),a.includeQuery&&(h.query=(0,n.print)(p)),{options:s,body:h}}},9683:(e,t,r)=>{"use strict";r.d(t,{r:()=>i});var i=function(e,t){return e.getContext().uri||("function"==typeof t?t(e):t||"/graphql")}},5992:(e,t,r)=>{"use strict";r.d(t,{g:()=>n});var i=r(7591),n=function(e,t){var r;try{r=JSON.stringify(e)}catch(e){var n=new i.ej(23);throw n.parseError=e,n}return r}},7511:(e,t,r)=>{"use strict";r.d(t,{Q:()=>o});var i=r(9329),n=r.n(i);function o(e){return new(n())((function(t){t.error(e)}))}},8992:(e,t,r)=>{"use strict";r.d(t,{p:()=>o});var i=r(9329),n=r.n(i);function o(e){return new(n())((function(t){e.then((function(e){t.next(e),t.complete()})).catch(t.error.bind(t))}))}},5347:(e,t,r)=>{"use strict";r.d(t,{P:()=>i});var i=function(e,t,r){var i=new Error(r);throw i.name="ServerError",i.response=e,i.statusCode=e.status,i.result=t,i}},1556:(e,t,r)=>{"use strict";function i(e){var t=!1;return new Promise((function(r,i){e.subscribe({next:function(e){t||(t=!0,r(e))},error:i})}))}r.d(t,{V:()=>i}),r(7591)},7585:(e,t,r)=>{"use strict";r.d(t,{a:()=>a});var i=r(2950),n=r.n(i),o=r(7591),s=r(4273),a=function(e){var t=(0,s.K)();return n().createElement(t.Consumer,null,(function(t){return(0,o.kG)(t&&t.client,27),e.children(t.client)}))}},4273:(e,t,r)=>{"use strict";r.d(t,{K:()=>s,Z:()=>s});var i=r(2950),n=r.n(i),o=new(r(1578).m?WeakMap:Map);function s(){var e=o.get(n().createContext);return e||((e=n().createContext({})).displayName="ApolloContext",o.set(n().createContext,e)),e}},6689:(e,t,r)=>{"use strict";r.d(t,{e:()=>a});var i=r(2950),n=r.n(i),o=r(7591),s=r(4273),a=function(e){var t=e.client,r=e.children,i=(0,s.K)();return n().createElement(i.Consumer,null,(function(e){return void 0===e&&(e={}),t&&e.client!==t&&(e=Object.assign({},e,{client:t})),(0,o.kG)(e.client,28),n().createElement(i.Provider,{value:e},r)}))}},411:(e,t,r)=>{"use strict";r.d(t,{xJ:()=>a,td:()=>y,Db:()=>g,aM:()=>O,lY:()=>k,mU:()=>S});var i=r(2950),n=r.n(i),o=r(7591),s=r(4273);function a(){var e=n().useContext((0,s.K)()).client;return(0,o.kG)(e,33),e}var u=r(3564),c=r(2152),l=r(1498),p=r(5942),h=r(4901),f=function(){function e(e,t){this.isMounted=!1,this.previousOptions={},this.context={},this.options={},this.options=e||{},this.context=t||{}}return e.prototype.getOptions=function(){return this.options},e.prototype.setOptions=function(e,t){void 0===t&&(t=!1),t&&!(0,c.D)(this.options,e)&&(this.previousOptions=this.options),this.options=e},e.prototype.unmount=function(){this.isMounted=!1},e.prototype.refreshClient=function(){var e=this.options&&this.options.client||this.context&&this.context.client;(0,o.kG)(!!e,29);var t=!1;return e!==this.client&&(t=!0,this.client=e,this.cleanup()),{client:this.client,isNew:t}},e.prototype.verifyDocumentType=function(e,t){var r=(0,h.E2)(e);(0,h.mw)(t),(0,h.mw)(r.type),(0,o.kG)(r.type===t,30)},e}(),d=function(e){function t(t){var r=t.options,i=t.context,n=t.onNewData,o=e.call(this,r,i)||this;return o.runLazy=!1,o.previous=Object.create(null),o.runLazyQuery=function(e){o.cleanup(),o.runLazy=!0,o.lazyOptions=e,o.onNewData()},o.getQueryResult=function(){var e=o.observableQueryFields(),t=o.getOptions();if(t.skip)e=(0,u.pi)((0,u.pi)({},e),{data:void 0,error:void 0,loading:!1,networkStatus:p.I.ready,called:!0});else if(o.currentObservable){var r=o.currentObservable.getCurrentResult(),i=r.data,n=r.loading,s=r.partial,a=r.networkStatus,c=r.errors,h=r.error;if(c&&c.length>0&&(h=new l.c({graphQLErrors:c})),e=(0,u.pi)((0,u.pi)({},e),{data:i,loading:n,networkStatus:a,error:h,called:!0}),n);else if(h)Object.assign(e,{data:(o.currentObservable.getLastResult()||{}).data});else{var f=o.currentObservable.options.fetchPolicy;if(t.partialRefetch&&s&&(!i||0===Object.keys(i).length)&&"cache-only"!==f)return Object.assign(e,{loading:!0,networkStatus:p.I.loading}),e.refetch(),e}}e.client=o.client,o.setOptions(t,!0);var d=o.previous.result;return o.previous.loading=d&&d.loading||!1,e.previousData=d&&(d.data||d.previousData),o.previous.result=e,o.currentObservable&&o.currentObservable.resetQueryStoreErrors(),e},o.obsRefetch=function(e){var t;return null===(t=o.currentObservable)||void 0===t?void 0:t.refetch(e)},o.obsFetchMore=function(e){return o.currentObservable.fetchMore(e)},o.obsUpdateQuery=function(e){return o.currentObservable.updateQuery(e)},o.obsStartPolling=function(e){var t;null===(t=o.currentObservable)||void 0===t||t.startPolling(e)},o.obsStopPolling=function(){var e;null===(e=o.currentObservable)||void 0===e||e.stopPolling()},o.obsSubscribeToMore=function(e){return o.currentObservable.subscribeToMore(e)},o.onNewData=n,o}return(0,u.ZT)(t,e),t.prototype.execute=function(){this.refreshClient();var e=this.getOptions(),t=e.skip,r=e.query;return(t||r!==this.previous.query)&&(this.removeQuerySubscription(),this.removeObservable(!t),this.previous.query=r),this.updateObservableQuery(),this.isMounted&&this.startQuerySubscription(),this.getExecuteSsrResult()||this.getExecuteResult()},t.prototype.executeLazy=function(){return this.runLazy?[this.runLazyQuery,this.execute()]:[this.runLazyQuery,{loading:!1,networkStatus:p.I.ready,called:!1,data:void 0}]},t.prototype.fetchData=function(){var e=this,t=this.getOptions();return!t.skip&&!1!==t.ssr&&new Promise((function(t){return e.startQuerySubscription(t)}))},t.prototype.afterExecute=function(e){var t=(void 0===e?{}:e).lazy,r=void 0!==t&&t;return this.isMounted=!0,r&&!this.runLazy||this.handleErrorOrCompleted(),this.previousOptions=this.getOptions(),this.unmount.bind(this)},t.prototype.cleanup=function(){this.removeQuerySubscription(),this.removeObservable(!0),delete this.previous.result},t.prototype.getOptions=function(){var t=e.prototype.getOptions.call(this);return this.lazyOptions&&(t.variables=(0,u.pi)((0,u.pi)({},t.variables),this.lazyOptions.variables),t.context=(0,u.pi)((0,u.pi)({},t.context),this.lazyOptions.context)),this.runLazy&&delete t.skip,t},t.prototype.ssrInitiated=function(){return this.context&&this.context.renderPromises},t.prototype.getExecuteResult=function(){var e=this.getQueryResult();return this.startQuerySubscription(),e},t.prototype.getExecuteSsrResult=function(){var e=this.getOptions(),t=e.ssr,r=e.skip,i=!1===t,n=this.refreshClient().client.disableNetworkFetches,o=(0,u.pi)({loading:!0,networkStatus:p.I.loading,called:!0,data:void 0,stale:!1,client:this.client},this.observableQueryFields());if(i&&(this.ssrInitiated()||n))return this.previous.result=o,o;if(this.ssrInitiated()){var s=this.getQueryResult()||o;return s.loading&&!r&&this.context.renderPromises.addQueryPromise(this,(function(){return null})),s}},t.prototype.prepareObservableQueryOptions=function(){var e=this.getOptions();this.verifyDocumentType(e.query,h.n_.Query);var t=e.displayName||"Query";return!this.ssrInitiated()||"network-only"!==e.fetchPolicy&&"cache-and-network"!==e.fetchPolicy||(e.fetchPolicy="cache-first"),(0,u.pi)((0,u.pi)({},e),{displayName:t,context:e.context})},t.prototype.initializeObservableQuery=function(){if(this.ssrInitiated()&&(this.currentObservable=this.context.renderPromises.getSSRObservable(this.getOptions())),!this.currentObservable){var e=this.prepareObservableQueryOptions();this.previous.observableQueryOptions=(0,u.pi)((0,u.pi)({},e),{children:null}),this.currentObservable=this.refreshClient().client.watchQuery((0,u.pi)({},e)),this.ssrInitiated()&&this.context.renderPromises.registerSSRObservable(this.currentObservable,e)}},t.prototype.updateObservableQuery=function(){if(this.currentObservable){if(!this.getOptions().skip){var e=(0,u.pi)((0,u.pi)({},this.prepareObservableQueryOptions()),{children:null});(0,c.D)(e,this.previous.observableQueryOptions)||(this.previous.observableQueryOptions=e,this.currentObservable.setOptions(e).catch((function(){})))}}else this.initializeObservableQuery()},t.prototype.startQuerySubscription=function(e){var t=this;void 0===e&&(e=this.onNewData),this.currentSubscription||this.getOptions().skip||(this.currentSubscription=this.currentObservable.subscribe({next:function(r){var i=r.loading,n=r.networkStatus,o=r.data,s=t.previous.result;s&&s.loading===i&&s.networkStatus===n&&(0,c.D)(s.data,o)||e()},error:function(r){if(t.resubscribeToQuery(),!r.hasOwnProperty("graphQLErrors"))throw r;var i=t.previous.result;(i&&i.loading||!(0,c.D)(r,t.previous.error))&&(t.previous.error=r,e())}}))},t.prototype.resubscribeToQuery=function(){this.removeQuerySubscription();var e=this.currentObservable;if(e){var t=e.getLastError(),r=e.getLastResult();e.resetLastResults(),this.startQuerySubscription(),Object.assign(e,{lastError:t,lastResult:r})}},t.prototype.handleErrorOrCompleted=function(){if(this.currentObservable&&this.previous.result){var e=this.previous.result,t=e.data,r=e.loading,i=e.error;if(!r){var n=this.getOptions(),o=n.query,s=n.variables,a=n.onCompleted,u=n.onError,l=n.skip;if(this.previousOptions&&!this.previous.loading&&(0,c.D)(this.previousOptions.query,o)&&(0,c.D)(this.previousOptions.variables,s))return;!a||i||l?u&&i&&u(i):a(t)}}},t.prototype.removeQuerySubscription=function(){this.currentSubscription&&(this.currentSubscription.unsubscribe(),delete this.currentSubscription)},t.prototype.removeObservable=function(e){this.currentObservable&&(this.currentObservable.tearDownQuery(),e&&delete this.currentObservable)},t.prototype.observableQueryFields=function(){var e;return{variables:null===(e=this.currentObservable)||void 0===e?void 0:e.variables,refetch:this.obsRefetch,fetchMore:this.obsFetchMore,updateQuery:this.obsUpdateQuery,startPolling:this.obsStartPolling,stopPolling:this.obsStopPolling,subscribeToMore:this.obsSubscribeToMore}},t}(f);function v(e,t,r){void 0===r&&(r=!1);var n=(0,i.useContext)((0,s.K)()),o=(0,i.useReducer)((function(e){return e+1}),0),a=o[0],l=o[1],p=t?(0,u.pi)((0,u.pi)({},t),{query:e}):{query:e},h=(0,i.useRef)(),f=h.current||(h.current=new d({options:p,context:n,onNewData:function(){f.ssrInitiated()?l():Promise.resolve().then((function(){return h.current&&l()}))}}));f.setOptions(p),f.context=n;var v,y,b,m=(v=function(){return r?f.executeLazy():f.execute()},y={options:(0,u.pi)((0,u.pi)({},p),{onError:void 0,onCompleted:void 0}),context:n,tick:a},(b=(0,i.useRef)()).current&&(0,c.D)(y,b.current.key)||(b.current={key:y,value:v()}),b.current.value),g=r?m[1]:m;return(0,i.useEffect)((function(){return function(){return f.cleanup()}}),[]),(0,i.useEffect)((function(){return f.afterExecute({lazy:r})}),[g.loading,g.networkStatus,g.error,g.data]),m}function y(e,t){return v(e,t,!0)}var b=r(2723),m=function(e){function t(t){var r=t.options,i=t.context,n=t.result,o=t.setResult,s=e.call(this,r,i)||this;return s.runMutation=function(e){void 0===e&&(e={}),s.onMutationStart();var t=s.generateNewMutationId();return s.mutate(e).then((function(e){return s.onMutationCompleted(e,t),e})).catch((function(e){var r=s.getOptions().onError;if(s.onMutationError(e,t),r)return r(e),{data:void 0,errors:e};throw e}))},s.verifyDocumentType(r.mutation,h.n_.Mutation),s.result=n,s.setResult=o,s.mostRecentMutationId=0,s}return(0,u.ZT)(t,e),t.prototype.execute=function(e){return this.isMounted=!0,this.verifyDocumentType(this.getOptions().mutation,h.n_.Mutation),[this.runMutation,(0,u.pi)((0,u.pi)({},e),{client:this.refreshClient().client})]},t.prototype.afterExecute=function(){return this.isMounted=!0,this.unmount.bind(this)},t.prototype.cleanup=function(){},t.prototype.mutate=function(e){return this.refreshClient().client.mutate((0,b.J)(this.getOptions(),e))},t.prototype.onMutationStart=function(){this.result.loading||this.getOptions().ignoreResults||this.updateResult({loading:!0,error:void 0,data:void 0,called:!0})},t.prototype.onMutationCompleted=function(e,t){var r=this.getOptions(),i=r.onCompleted,n=r.ignoreResults,o=e.data,s=e.errors,a=s&&s.length>0?new l.c({graphQLErrors:s}):void 0;this.isMostRecentMutation(t)&&!n&&this.updateResult({called:!0,loading:!1,data:o,error:a}),i&&i(o)},t.prototype.onMutationError=function(e,t){this.isMostRecentMutation(t)&&this.updateResult({loading:!1,error:e,data:void 0,called:!0})},t.prototype.generateNewMutationId=function(){return++this.mostRecentMutationId},t.prototype.isMostRecentMutation=function(e){return this.mostRecentMutationId===e},t.prototype.updateResult=function(e){if(this.isMounted&&(!this.previousResult||!(0,c.D)(this.previousResult,e)))return this.setResult(e),this.previousResult=e,e},t}(f);function g(e,t){var r=(0,i.useContext)((0,s.K)()),n=(0,i.useState)({called:!1,loading:!1}),o=n[0],a=n[1],c=t?(0,u.pi)((0,u.pi)({},t),{mutation:e}):{mutation:e},l=(0,i.useRef)(),p=(l.current||(l.current=new m({options:c,context:r,result:o,setResult:a})),l.current);return p.setOptions(c),p.context=r,(0,i.useEffect)((function(){return p.afterExecute()})),p.execute(o)}function O(e,t){return v(e,t,!1)}var w=function(e){function t(t){var r=t.options,i=t.context,n=t.setResult,o=e.call(this,r,i)||this;return o.currentObservable={},o.setResult=n,o.initialize(r),o}return(0,u.ZT)(t,e),t.prototype.execute=function(e){if(!0===this.getOptions().skip)return this.cleanup(),{loading:!1,error:void 0,data:void 0,variables:this.getOptions().variables};var t=e;this.refreshClient().isNew&&(t=this.getLoadingResult());var r=this.getOptions().shouldResubscribe;return"function"==typeof r&&(r=!!r(this.getOptions())),!1!==r&&this.previousOptions&&Object.keys(this.previousOptions).length>0&&(this.previousOptions.subscription!==this.getOptions().subscription||!(0,c.D)(this.previousOptions.variables,this.getOptions().variables)||this.previousOptions.skip!==this.getOptions().skip)&&(this.cleanup(),t=this.getLoadingResult()),this.initialize(this.getOptions()),this.startSubscription(),this.previousOptions=this.getOptions(),(0,u.pi)((0,u.pi)({},t),{variables:this.getOptions().variables})},t.prototype.afterExecute=function(){this.isMounted=!0},t.prototype.cleanup=function(){this.endSubscription(),delete this.currentObservable.query},t.prototype.initialize=function(e){this.currentObservable.query||!0===this.getOptions().skip||(this.currentObservable.query=this.refreshClient().client.subscribe({query:e.subscription,variables:e.variables,fetchPolicy:e.fetchPolicy,context:e.context}))},t.prototype.startSubscription=function(){this.currentObservable.subscription||(this.currentObservable.subscription=this.currentObservable.query.subscribe({next:this.updateCurrentData.bind(this),error:this.updateError.bind(this),complete:this.completeSubscription.bind(this)}))},t.prototype.getLoadingResult=function(){return{loading:!0,error:void 0,data:void 0}},t.prototype.updateResult=function(e){this.isMounted&&this.setResult(e)},t.prototype.updateCurrentData=function(e){var t=this.getOptions().onSubscriptionData;this.updateResult({data:e.data,loading:!1,error:void 0}),t&&t({client:this.refreshClient().client,subscriptionData:e})},t.prototype.updateError=function(e){this.updateResult({error:e,loading:!1})},t.prototype.completeSubscription=function(){var e=this;Promise.resolve().then((function(){var t=e.getOptions().onSubscriptionComplete;t&&t(),e.endSubscription()}))},t.prototype.endSubscription=function(){this.currentObservable.subscription&&(this.currentObservable.subscription.unsubscribe(),delete this.currentObservable.subscription)},t}(f);function S(e,t){var r=(0,i.useContext)((0,s.K)()),n=t?(0,u.pi)((0,u.pi)({},t),{subscription:e}):{subscription:e},o=(0,i.useState)({loading:!n.skip,error:void 0,data:void 0}),a=o[0],c=o[1],l=(0,i.useRef)(),p=(l.current||(l.current=new w({options:n,context:r,setResult:c})),l.current);return p.setOptions(n,!0),p.context=r,(0,i.useEffect)((function(){return p.afterExecute()})),(0,i.useEffect)((function(){return p.cleanup.bind(p)}),[]),p.execute(a)}function k(e){var t=e(),r=(0,i.useState)(t)[1];return(0,i.useEffect)((function(){var i=e();if(t===i)return e.onNextChange(r);r(i)}),[t]),t}},3341:(e,t,r)=>{"use strict";r.r(t),r.d(t,{ApolloProvider:()=>i.e,ApolloConsumer:()=>n.a,getApolloContext:()=>o.K,resetApolloContext:()=>o.Z,useApolloClient:()=>s.xJ,useLazyQuery:()=>s.td,useMutation:()=>s.Db,useQuery:()=>s.aM,useReactiveVar:()=>s.lY,useSubscription:()=>s.mU,DocumentType:()=>a.n_,operationName:()=>a.mw,parser:()=>a.E2});var i=r(6689),n=r(7585),o=r(4273),s=r(411),a=r(4901),u=r(5923),c={};for(const e in u)["default","ApolloProvider","ApolloConsumer","getApolloContext","resetApolloContext","DocumentType","operationName","parser","useApolloClient","useLazyQuery","useMutation","useQuery","useReactiveVar","useSubscription"].indexOf(e)<0&&(c[e]=()=>u[e]);r.d(t,c)},4901:(e,t,r)=>{"use strict";r.d(t,{n_:()=>i,mw:()=>s,E2:()=>a});var i,n=r(7591);!function(e){e[e.Query=0]="Query",e[e.Mutation=1]="Mutation",e[e.Subscription=2]="Subscription"}(i||(i={}));var o=new Map;function s(e){var t;switch(e){case i.Query:t="Query";break;case i.Mutation:t="Mutation";break;case i.Subscription:t="Subscription"}return t}function a(e){var t,r,s=o.get(e);if(s)return s;(0,n.kG)(!!e&&!!e.kind,34);var a=e.definitions.filter((function(e){return"FragmentDefinition"===e.kind})),u=e.definitions.filter((function(e){return"OperationDefinition"===e.kind&&"query"===e.operation})),c=e.definitions.filter((function(e){return"OperationDefinition"===e.kind&&"mutation"===e.operation})),l=e.definitions.filter((function(e){return"OperationDefinition"===e.kind&&"subscription"===e.operation}));(0,n.kG)(!a.length||u.length||c.length||l.length,35),(0,n.kG)(u.length+c.length+l.length<=1,36),r=u.length?i.Query:i.Mutation,u.length||c.length||(r=i.Subscription);var p=u.length?u:c.length?c:l;(0,n.kG)(1===p.length,37);var h=p[0];t=h.variableDefinitions||[];var f={name:h.name&&"Name"===h.name.kind?h.name.value:"data",type:r,variables:t};return o.set(e,f),f}},5923:()=>{},4517:(e,t,r)=>{"use strict";function i(e){return Array.isArray(e)&&e.length>0}r.d(t,{O:()=>i})},1578:(e,t,r)=>{"use strict";r.d(t,{m:()=>i});var i="function"==typeof WeakMap&&!("object"==typeof navigator&&"ReactNative"===navigator.product)},7954:(e,t,r)=>{"use strict";function i(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=Object.create(null);return e.forEach((function(e){e&&Object.keys(e).forEach((function(t){var i=e[t];void 0!==i&&(r[t]=i)}))})),r}r.d(t,{o:()=>i})},7742:(e,t,r)=>{"use strict";r.d(t,{Ee:()=>o,bw:()=>s,w0:()=>c});var i=r(3564),n=Object.prototype.hasOwnProperty;function o(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return s(e)}function s(e){var t=e[0]||{},r=e.length;if(r>1)for(var i=new c,n=1;n<r;++n)t=i.merge(t,e[n]);return t}function a(e){return null!==e&&"object"==typeof e}var u=function(e,t,r){return this.merge(e[r],t[r])},c=function(){function e(e){void 0===e&&(e=u),this.reconciler=e,this.isObject=a,this.pastCopies=new Set}return e.prototype.merge=function(e,t){for(var r=this,o=[],s=2;s<arguments.length;s++)o[s-2]=arguments[s];return a(t)&&a(e)?(Object.keys(t).forEach((function(s){if(n.call(e,s)){var a=e[s];if(t[s]!==a){var u=r.reconciler.apply(r,(0,i.pr)([e,t,s],o));u!==a&&((e=r.shallowCopyForMerge(e))[s]=u)}}else(e=r.shallowCopyForMerge(e))[s]=t[s]})),e):t},e.prototype.shallowCopyForMerge=function(e){return a(e)&&!this.pastCopies.has(e)&&(e=Array.isArray(e)?e.slice(0):(0,i.pi)({__proto__:Object.getPrototypeOf(e)},e),this.pastCopies.add(e)),e},e}()},6376:(e,t,r)=>{"use strict";r.d(t,{LZ:()=>o,FS:()=>s,mj:()=>a});var i=r(8410),n=r(7591);function o(e,t){var r=e.directives;return!r||!r.length||function(e){var t=[];return e&&e.length&&e.forEach((function(e){if(function(e){var t=e.name.value;return"skip"===t||"include"===t}(e)){var r=e.arguments;e.name.value,(0,n.kG)(r&&1===r.length,39);var i=r[0];(0,n.kG)(i.name&&"if"===i.name.value,40);var o=i.value;(0,n.kG)(o&&("Variable"===o.kind||"BooleanValue"===o.kind),41),t.push({directive:e,ifArgument:i})}})),t}(r).every((function(e){var r=e.directive,i=e.ifArgument,o=!1;return"Variable"===i.value.kind?(o=t&&t[i.value.name.value],(0,n.kG)(void 0!==o,38)):o=i.value.value,"skip"===r.name.value?!o:o}))}function s(e,t){return function(e){var t=[];return(0,i.visit)(e,{Directive:function(e){t.push(e.name.value)}}),t}(t).some((function(t){return e.indexOf(t)>-1}))}function a(e){return e&&s(["client"],e)&&s(["export"],e)}},1234:(e,t,r)=>{"use strict";r.d(t,{Gw:()=>d,aL:()=>m,ob:()=>g,Fo:()=>y});var i=r(3564),n=r(8410),o=(r(7591),r(4604));function s(e,t,r){var i=0;return e.forEach((function(r,n){t.call(this,r,n,e)&&(e[i++]=r)}),r),e.length=i,e}var a=r(386),u=r(9770),c={kind:"Field",name:{kind:"Name",value:"__typename"}};function l(e,t){return e.selectionSet.selections.every((function(e){return"FragmentSpread"===e.kind&&l(t[e.name.value],t)}))}function p(e){return l((0,o.$H)(e)||(0,o.pD)(e),(0,u.F)((0,o.kU)(e)))?null:e}function h(e){return function(t){return e.some((function(e){return e.name&&e.name===t.name.value||e.test&&e.test(t)}))}}function f(e,t){var r=Object.create(null),o=[],a=Object.create(null),u=[],c=p((0,n.visit)(t,{Variable:{enter:function(e,t,i){"VariableDefinition"!==i.kind&&(r[e.name.value]=!0)}},Field:{enter:function(t){if(e&&t.directives&&e.some((function(e){return e.remove}))&&t.directives&&t.directives.some(h(e)))return t.arguments&&t.arguments.forEach((function(e){"Variable"===e.value.kind&&o.push({name:e.value.name.value})})),t.selectionSet&&b(t.selectionSet).forEach((function(e){u.push({name:e.name.value})})),null}},FragmentSpread:{enter:function(e){a[e.name.value]=!0}},Directive:{enter:function(t){if(h(e)(t))return null}}}));return c&&s(o,(function(e){return!!e.name&&!r[e.name]})).length&&(c=function(e,t){var r=function(e){return function(t){return e.some((function(e){return t.value&&"Variable"===t.value.kind&&t.value.name&&(e.name===t.value.name.value||e.test&&e.test(t))}))}}(e);return p((0,n.visit)(t,{OperationDefinition:{enter:function(t){return(0,i.pi)((0,i.pi)({},t),{variableDefinitions:t.variableDefinitions?t.variableDefinitions.filter((function(t){return!e.some((function(e){return e.name===t.variable.name.value}))})):[]})}},Field:{enter:function(t){if(e.some((function(e){return e.remove}))){var i=0;if(t.arguments&&t.arguments.forEach((function(e){r(e)&&(i+=1)})),1===i)return null}}},Argument:{enter:function(e){if(r(e))return null}}}))}(o,c)),c&&s(u,(function(e){return!!e.name&&!a[e.name]})).length&&(c=function(e,t){function r(t){if(e.some((function(e){return e.name===t.name.value})))return null}return p((0,n.visit)(t,{FragmentSpread:{enter:r},FragmentDefinition:{enter:r}}))}(u,c)),c}function d(e){return(0,n.visit)((0,o.A$)(e),{SelectionSet:{enter:function(e,t,r){if(!r||"OperationDefinition"!==r.kind){var n=e.selections;if(n&&!n.some((function(e){return(0,a.My)(e)&&("__typename"===e.name.value||0===e.name.value.lastIndexOf("__",0))}))){var o=r;if(!((0,a.My)(o)&&o.directives&&o.directives.some((function(e){return"export"===e.name.value}))))return(0,i.pi)((0,i.pi)({},e),{selections:(0,i.pr)(n,[c])})}}}}})}d.added=function(e){return e===c};var v={test:function(e){var t="connection"===e.name.value;return t&&(!e.arguments||e.arguments.some((function(e){return"key"===e.name.value}))),t}};function y(e){return f([v],(0,o.A$)(e))}function b(e){var t=[];return e.selections.forEach((function(e){((0,a.My)(e)||(0,a.Ao)(e))&&e.selectionSet?b(e.selectionSet).forEach((function(e){return t.push(e)})):"FragmentSpread"===e.kind&&t.push(e)})),t}function m(e){return"query"===(0,o.p$)(e).operation?e:(0,n.visit)(e,{OperationDefinition:{enter:function(e){return(0,i.pi)((0,i.pi)({},e),{operation:"query"})}}})}function g(e){(0,o.A$)(e);var t=f([{test:function(e){return"client"===e.name.value},remove:!0}],e);return t&&(t=(0,n.visit)(t,{FragmentDefinition:{enter:function(e){if(e.selectionSet&&e.selectionSet.selections.every((function(e){return(0,a.My)(e)&&"__typename"===e.name.value})))return null}}})),t}},3190:(e,t,r)=>{"use strict";function i(e,t,r){var i=[];e.forEach((function(e){return e[t]&&i.push(e)})),i.forEach((function(e){return e[t](r)}))}r.d(t,{p:()=>i})},1813:(e,t,r)=>{"use strict";r.d(t,{D:()=>o});var i=r(9329),n=r.n(i);function o(e){function t(t){Object.defineProperty(e,t,{value:n()})}return"function"==typeof Symbol&&Symbol.species&&t(Symbol.species),t("@@species"),e}},8751:(e,t,r)=>{"use strict";r.d(t,{g7:()=>u});var i=null,n={},o=1,s="@wry/context:Slot",a=Array,u=a[s]||function(){var e=function(){function e(){this.id=["slot",o++,Date.now(),Math.random().toString(36).slice(2)].join(":")}return e.prototype.hasValue=function(){for(var e=i;e;e=e.parent)if(this.id in e.slots){var t=e.slots[this.id];if(t===n)break;return e!==i&&(i.slots[this.id]=t),!0}return i&&(i.slots[this.id]=n),!1},e.prototype.getValue=function(){if(this.hasValue())return i.slots[this.id]},e.prototype.withValue=function(e,t,r,n){var o,s=((o={__proto__:null})[this.id]=e,o),a=i;i={parent:a,slots:s};try{return t.apply(n,r)}finally{i=a}},e.bind=function(e){var t=i;return function(){var r=i;try{return i=t,e.apply(this,arguments)}finally{i=r}}},e.noContext=function(e,t,r){if(!i)return e.apply(r,t);var n=i;try{return i=null,e.apply(r,t)}finally{i=n}},e}();try{Object.defineProperty(a,s,{value:a[s]=e,enumerable:!1,writable:!1,configurable:!1})}finally{return e}}();u.bind,u.noContext},2152:(e,t,r)=>{"use strict";r.d(t,{D:()=>u});var i=Object.prototype,n=i.toString,o=i.hasOwnProperty,s=Function.prototype.toString,a=new Map;function u(e,t){try{return c(e,t)}finally{a.clear()}}function c(e,t){if(e===t)return!0;var r,i,a,u=n.call(e);if(u!==n.call(t))return!1;switch(u){case"[object Array]":if(e.length!==t.length)return!1;case"[object Object]":if(f(e,t))return!0;var p=l(e),d=l(t),v=p.length;if(v!==d.length)return!1;for(var y=0;y<v;++y)if(!o.call(t,p[y]))return!1;for(y=0;y<v;++y){var b=p[y];if(!c(e[b],t[b]))return!1}return!0;case"[object Error]":return e.name===t.name&&e.message===t.message;case"[object Number]":if(e!=e)return t!=t;case"[object Boolean]":case"[object Date]":return+e==+t;case"[object RegExp]":case"[object String]":return e==""+t;case"[object Map]":case"[object Set]":if(e.size!==t.size)return!1;if(f(e,t))return!0;for(var m=e.entries(),g="[object Map]"===u;;){var O=m.next();if(O.done)break;var w=O.value,S=w[0],k=w[1];if(!t.has(S))return!1;if(g&&!c(k,t.get(S)))return!1}return!0;case"[object AsyncFunction]":case"[object GeneratorFunction]":case"[object AsyncGeneratorFunction]":case"[object Function]":var E=s.call(e);return E===s.call(t)&&(i=h,!((a=(r=E).length-i.length)>=0&&r.indexOf(i,a)===a))}return!1}function l(e){return Object.keys(e).filter(p,e)}function p(e){return void 0!==this[e]}var h="{ [native code] }";function f(e,t){var r=a.get(e);if(r){if(r.has(t))return!0}else a.set(e,r=new Set);return r.add(t),!1}},1230:(e,t,r)=>{"use strict";r.d(t,{HW:()=>h,_t:()=>f,wO:()=>d,J9:()=>v,ZP:()=>S});var i=r(655),n=r(8410),o=new Map,s=new Map,a=!0,u=!1;function c(e){return e.replace(/[\s,]+/g," ").trim()}function l(e){var t,r,l,p=c(e);if(!o.has(p)){var h=(0,n.parse)(e,{experimentalFragmentVariables:u});if(!h||"Document"!==h.kind)throw new Error("Not a valid GraphQL document.");o.set(p,function(e){var t=new Set(e.definitions);t.forEach((function(e){e.loc&&delete e.loc,Object.keys(e).forEach((function(r){var i=e[r];i&&"object"==typeof i&&t.add(i)}))}));var r=e.loc;return r&&(delete r.startToken,delete r.endToken),e}((t=h,r=new Set,l=[],t.definitions.forEach((function(e){if("FragmentDefinition"===e.kind){var t=e.name.value,i=c((o=e.loc).source.body.substring(o.start,o.end)),n=s.get(t);n&&!n.has(i)?a&&console.warn("Warning: fragment with name "+t+" already exists.\ngraphql-tag enforces all fragment names across your application to be unique; read more about\nthis in the docs: http://dev.apollodata.com/core/fragments.html#unique-names"):n||s.set(t,n=new Set),n.add(i),r.has(i)||(r.add(i),l.push(e))}else l.push(e);var o})),(0,i.pi)((0,i.pi)({},t),{definitions:l}))))}return o.get(p)}function p(e){for(var t=[],r=1;r<arguments.length;r++)t[r-1]=arguments[r];"string"==typeof e&&(e=[e]);var i=e[0];return t.forEach((function(t,r){t&&"Document"===t.kind?i+=t.loc.source.body:i+=t,i+=e[r+1]})),l(i)}function h(){o.clear(),s.clear()}function f(){a=!1}function d(){u=!0}function v(){u=!1}var y,b=p,m=h,g=f,O=d,w=v;(y=p||(p={})).gql=b,y.resetCaches=m,y.disableFragmentWarnings=g,y.enableExperimentalFragmentVariables=O,y.disableExperimentalFragmentVariables=w,p.default=p;const S=p},2667:(e,t,r)=>{"use strict";r.d(t,{Gl:()=>a,dP:()=>P,re:()=>T});var i=function(){return Object.create(null)},n=Array.prototype,o=n.forEach,s=n.slice,a=function(){function e(e,t){void 0===e&&(e=!0),void 0===t&&(t=i),this.weakness=e,this.makeData=t}return e.prototype.lookup=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.lookupArray(e)},e.prototype.lookupArray=function(e){var t=this;return o.call(e,(function(e){return t=t.getChildTrie(e)})),t.data||(t.data=this.makeData(s.call(e)))},e.prototype.getChildTrie=function(t){var r=this.weakness&&function(e){switch(typeof e){case"object":if(null===e)break;case"function":return!0}return!1}(t)?this.weak||(this.weak=new WeakMap):this.strong||(this.strong=new Map),i=r.get(t);return i||r.set(t,i=new e(this.weakness,this.makeData)),i},e}(),u=r(8751);function c(){}var l,p=function(){function e(e,t){void 0===e&&(e=1/0),void 0===t&&(t=c),this.max=e,this.dispose=t,this.map=new Map,this.newest=null,this.oldest=null}return e.prototype.has=function(e){return this.map.has(e)},e.prototype.get=function(e){var t=this.getNode(e);return t&&t.value},e.prototype.getNode=function(e){var t=this.map.get(e);if(t&&t!==this.newest){var r=t.older,i=t.newer;i&&(i.older=r),r&&(r.newer=i),t.older=this.newest,t.older.newer=t,t.newer=null,this.newest=t,t===this.oldest&&(this.oldest=i)}return t},e.prototype.set=function(e,t){var r=this.getNode(e);return r?r.value=t:(r={key:e,value:t,newer:null,older:this.newest},this.newest&&(this.newest.newer=r),this.newest=r,this.oldest=this.oldest||r,this.map.set(e,r),r.value)},e.prototype.clean=function(){for(;this.oldest&&this.map.size>this.max;)this.delete(this.oldest.key)},e.prototype.delete=function(e){var t=this.map.get(e);return!!t&&(t===this.newest&&(this.newest=t.older),t===this.oldest&&(this.oldest=t.newer),t.newer&&(t.newer.older=t.older),t.older&&(t.older.newer=t.newer),this.map.delete(e),this.dispose(t.value,e),!0)},e}(),h=new u.g7,f=Object.prototype.hasOwnProperty,d=void 0===(l=Array.from)?function(e){var t=[];return e.forEach((function(e){return t.push(e)})),t}:l;function v(e){var t=e.unsubscribe;"function"==typeof t&&(e.unsubscribe=void 0,t())}var y=[];function b(e,t){if(!e)throw new Error(t||"assertion failure")}function m(e){switch(e.length){case 0:throw new Error("unknown value");case 1:return e[0];case 2:throw e[1]}}var g=function(){function e(t){this.fn=t,this.parents=new Set,this.childValues=new Map,this.dirtyChildren=null,this.dirty=!0,this.recomputing=!1,this.value=[],this.deps=null,++e.count}return e.prototype.peek=function(){if(1===this.value.length&&!S(this))return O(this),this.value[0]},e.prototype.recompute=function(e){return b(!this.recomputing,"already recomputing"),O(this),S(this)?function(e,t){return C(e),h.withValue(e,w,[e,t]),function(e,t){if("function"==typeof e.subscribe)try{v(e),e.unsubscribe=e.subscribe.apply(null,t)}catch(t){return e.setDirty(),!1}return!0}(e,t)&&function(e){e.dirty=!1,S(e)||E(e)}(e),m(e.value)}(this,e):m(this.value)},e.prototype.setDirty=function(){this.dirty||(this.dirty=!0,this.value.length=0,k(this),v(this))},e.prototype.dispose=function(){var e=this;this.setDirty(),C(this),R(this,(function(t,r){t.setDirty(),I(t,e)}))},e.prototype.forget=function(){this.dispose()},e.prototype.dependOn=function(e){e.add(this),this.deps||(this.deps=y.pop()||new Set),this.deps.add(e)},e.prototype.forgetDeps=function(){var e=this;this.deps&&(d(this.deps).forEach((function(t){return t.delete(e)})),this.deps.clear(),y.push(this.deps),this.deps=null)},e.count=0,e}();function O(e){var t=h.getValue();if(t)return e.parents.add(t),t.childValues.has(e)||t.childValues.set(e,[]),S(e)?x(t,e):Q(t,e),t}function w(e,t){e.recomputing=!0,e.value.length=0;try{e.value[0]=e.fn.apply(null,t)}catch(t){e.value[1]=t}e.recomputing=!1}function S(e){return e.dirty||!(!e.dirtyChildren||!e.dirtyChildren.size)}function k(e){R(e,x)}function E(e){R(e,Q)}function R(e,t){var r=e.parents.size;if(r)for(var i=d(e.parents),n=0;n<r;++n)t(i[n],e)}function x(e,t){b(e.childValues.has(t)),b(S(t));var r=!S(e);if(e.dirtyChildren){if(e.dirtyChildren.has(t))return}else e.dirtyChildren=y.pop()||new Set;e.dirtyChildren.add(t),r&&k(e)}function Q(e,t){b(e.childValues.has(t)),b(!S(t));var r,i,n,o=e.childValues.get(t);0===o.length?e.childValues.set(t,t.value.slice(0)):(r=o,i=t.value,(n=r.length)>0&&n===i.length&&r[n-1]===i[n-1]||e.setDirty()),M(e,t),S(e)||E(e)}function M(e,t){var r=e.dirtyChildren;r&&(r.delete(t),0===r.size&&(y.length<100&&y.push(r),e.dirtyChildren=null))}function C(e){e.childValues.size>0&&e.childValues.forEach((function(t,r){I(e,r)})),e.forgetDeps(),b(null===e.dirtyChildren)}function I(e,t){t.parents.delete(e),e.childValues.delete(t),M(e,t)}var F={setDirty:!0,dispose:!0,forget:!0};function P(e){var t=new Map,r=e&&e.subscribe;function i(e){var i=h.getValue();if(i){var n=t.get(e);n||t.set(e,n=new Set),i.dependOn(n),"function"==typeof r&&(v(n),n.unsubscribe=r(e))}}return i.dirty=function(e,r){var i=t.get(e);if(i){var n=r&&f.call(F,r)?r:"setDirty";d(i).forEach((function(e){return e[n]()})),t.delete(e),v(i)}},i}function q(){var e=new a("function"==typeof WeakMap);return function(){return e.lookupArray(arguments)}}q();var D=new Set;function T(e,t){void 0===t&&(t=Object.create(null));var r=new p(t.max||Math.pow(2,16),(function(e){return e.dispose()})),i=t.keyArgs,n=t.makeCacheKey||q(),o=function(){var o=n.apply(null,i?i.apply(null,arguments):arguments);if(void 0===o)return e.apply(null,arguments);var s=r.get(o);s||(r.set(o,s=new g(e)),s.subscribe=t.subscribe,s.forget=function(){return r.delete(o)});var a=s.recompute(Array.prototype.slice.call(arguments));return r.set(o,s),D.add(r),h.hasValue()||(D.forEach((function(e){return e.clean()})),D.clear()),a};function s(e){var t=r.get(e);t&&t.setDirty()}function a(e){var t=r.get(e);if(t)return t.peek()}function u(e){return r.delete(e)}return Object.defineProperty(o,"size",{get:function(){return r.map.size},configurable:!1,enumerable:!1}),o.dirtyKey=s,o.dirty=function(){s(n.apply(null,arguments))},o.peekKey=a,o.peek=function(){return a(n.apply(null,arguments))},o.forgetKey=u,o.forget=function(){return u(n.apply(null,arguments))},o.makeCacheKey=n,o.getKey=i?function(){return n.apply(null,i.apply(null,arguments))}:n,Object.freeze(o)}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,